{"question": "What is the syntax for declaring a variable in Rust?", "answer": "let x = 5;"}
{"question": "How do you declare a mutable variable in Rust?", "answer": "let mut x = 5;"}
{"question": "What is the difference between 'let' and 'const'?", "answer": "'const' is a compile-time constant, while 'let' is a variable. 'const' requires a type annotation."}
{"question": "What is the purpose of 'match' in Rust?", "answer": "To destructure and compare values against patterns."}
{"question": "How do you create a new thread in Rust?", "answer": "use std::thread; thread::spawn(|| { /* code */ });"}
{"question": "What is the 'Option' type used for?", "answer": "To represent optional values (Some(T) or None)."}
{"question": "How to handle panics in Rust?", "answer": "Use 'panic!' macro. To recover, use 'catch_unwind' from std::panic."}
{"question": "What is a 'struct' in Rust?", "answer": "A custom data type with named fields."}
{"question": "How to define a function in Rust?", "answer": "fn function_name(parameters) -> return_type { /* code */ }"}
{"question": "What is the 'Result' type used for?", "answer": "To handle success or error outcomes (Ok(T) or Err(E))."}
{"question": "How to use a closure in Rust?", "answer": "|args| { /* code */ } or as a function parameter."}
{"question": "What is the 'Rc' smart pointer for?", "answer": "To enable multiple ownership via reference counting."}
{"question": "How to create a vector in Rust?", "answer": "let v = vec![1, 2, 3]; or Vec::new()"}
{"question": "What is the 'Box' type used for?", "answer": "To allocate data on the heap."}
{"question": "How to implement a trait in Rust?", "answer": "impl TraitName for Type { /* method implementations */ }"}
{"question": "What is the 'self' keyword in method definitions?", "answer": "Refers to the instance of the type the method is called on."}
{"question": "How to use 'if let' for pattern matching?", "answer": "if let Some(x) = value { /* handle Some */ } else { /* handle None */ }"}
{"question": "What is the 'lifetime' annotation in Rust?", "answer": "To specify how long references are valid."}
{"question": "How to create a new String in Rust?", "answer": "let s = String::new(); or String::from(\"text\");"}
{"question": "What is the 'as' keyword used for?", "answer": "For type casting, e.g., 5 as u8."}
{"question": "How to use 'use' to bring modules into scope?", "answer": "use module::item; or use module::*;"}
{"question": "What is the 'pub' keyword for?", "answer": "To make items public (visible outside the module)."}
{"question": "How to handle errors with 'Result'?", "answer": "Use '?' operator or match on Ok/Err."}
{"question": "What is the 'drop' trait used for?", "answer": "To define custom cleanup logic for a type."}
{"question": "How to create an array in Rust?", "answer": "let a = [1, 2, 3]; or [0; 5] for initialized arrays."}
{"question": "What is the 'self' keyword in trait methods?", "answer": "Refers to the implementor type when calling trait methods."}
{"question": "How to use 'Arc' for thread-safe reference counting?", "answer": "use std::sync::Arc; let arc = Arc::new(data);"}
{"question": "What is the 'enum' type in Rust?", "answer": "A type that can have multiple variants."}
{"question": "How to pass a closure to a function?", "answer": "fn take_closure<F>(f: F) where F: Fn() { f(); }"}
{"question": "What is the 'as_ref' method for?", "answer": "Converts a Box<T> to a &T."}
{"question": "How to use 'thread::join' in Rust?", "answer": "let handle = thread::spawn(...); handle.join().unwrap();"}
{"question": "What is the 'derive' attribute used for?", "answer": "Automatically generates implementations for traits like Debug, Clone."}
{"question": "How to create a slice in Rust?", "answer": "&array[0..2] or &string[0..2]"}
{"question": "What is the 'match' arm syntax?", "answer": "Pattern => expression"}
{"question": "How to use 'Result::ok' and 'Result::err'?", "answer": "Extracts the Ok or Err value, respectively."}
{"question": "What is the 'lifetime' elision rule?", "answer": "Rust infers lifetimes in common cases, e.g., function parameters."}
{"question": "How to use 'Vec::push'?", "answer": "v.push(value);"}
{"question": "What is the 'static' keyword in Rust?", "answer": "Indicates a reference that lives for the entire program."}
{"question": "How to use 'thread::scope'?", "answer": "fn main() { thread::scope(|s| { s.spawn(|| { /* code */ }); }); }"}
{"question": "What is the 'as_mut' method for?", "answer": "Converts a Box<T> to a &mut T."}
{"question": "How to use 'Result::map'?", "answer": "transforms the Ok value while preserving the Err."}
{"question": "What is the 'Send' trait?", "answer": "Marks types that can be safely sent between threads."}
{"question": "How to use 'Option::unwrap'?", "answer": "Returns the Some value or panics if None."}
{"question": "What is the 'Sync' trait?", "answer": "Marks types that can be safely shared between threads."}
{"question": "How to use 'thread::Builder'?", "answer": "thread::Builder::new().spawn(|| { /* code */ }).unwrap();"}
{"question": "What is the 'lifetime' parameter in function signatures?", "answer": "Specifies the relationship between references, e.g., fn foo<'a>(x: &'a str) -> &'a str"}
{"question": "How to use 'Vec::pop'?", "answer": "v.pop(); returns Some(value) or None if empty."}
{"question": "What is the 'RefCell' type used for?", "answer": "Runtime borrow checking for interior mutability."}
{"question": "How to use 'Result::and' and 'Result::or'?", "answer": "Chains operations, e.g., ok_result.and(another_result)"}
{"question": "What is the 'thread_local!' macro?", "answer": "Declares a thread-local variable."}
{"question": "How to use 'Option::map'?", "answer": "Transforms Some value, returns None if original is None."}
{"question": "What is the 'Mutex' type in Rust?", "answer": "Provides mutual exclusion for shared data."}
{"question": "How to use 'thread::current'?", "answer": "Returns the current thread's handle."}
{"question": "What is the 'Box::new'?", "answer": "Allocates a value on the heap."}
{"question": "How to use 'Result::expect'?", "answer": "Returns the Ok value or panics with a message."}
{"question": "What is the 'Rc::clone'?", "answer": "Increments the reference count of an Rc."}
{"question": "How to use 'Vec::len'?", "answer": "v.len(); returns the number of elements."}
{"question": "What is the 'lifetime' of a reference?", "answer": "The period during which the reference is valid."}
{"question": "How to use 'Option::unwrap_or'?", "answer": "Returns Some value or a default if None."}
{"question": "What is the 'thread::sleep'?", "answer": "use std::thread; use std::time::Duration; thread::sleep(Duration::from_secs(1));"}
{"question": "How to use 'Result::and_then'?", "answer": "Chains operations, e.g., ok_result.and_then(|x| Ok(x + 1))"}
{"question": "What is the 'Send' trait's purpose?", "answer": "Ensures a type can be safely sent to another thread."}
{"question": "How to use 'Vec::clear'?", "answer": "v.clear(); removes all elements."}
{"question": "What is the 'Sync' trait's purpose?", "answer": "Ensures a type can be safely shared between threads."}
{"question": "How to use 'thread::available_parallelism'?", "answer": "Returns the number of logical cores available."}
{"question": "What is the 'RefCell' borrow checker?", "answer": "Checks borrows at runtime, not compile time."}
{"question": "How to use 'Option::filter'?", "answer": "Returns Some if the closure returns true, else None."}
{"question": "What is the 'MutexGuard' type?", "answer": "A guard that allows access to a Mutex's inner value."}
{"question": "How to use 'Result::map_err'?", "answer": "Transforms the Err value while preserving the Ok."}
{"question": "What is the 'thread::spawn' closure's move keyword?", "answer": "Moves ownership of variables into the thread."}
{"question": "How to use 'Vec::extend'?", "answer": "v.extend(iterable); adds elements from an iterator."}
{"question": "What is the 'lifetime' parameter in struct definitions?", "answer": "Specifies how long references in the struct are valid."}
{"question": "How to use 'Option::and'?", "answer": "Returns None if original is None, else the other Option."}
{"question": "What is the 'OnceLock' type?", "answer": "A thread-safe once-initialized value."}
{"question": "How to use 'Result::unwrap_or_default'?", "answer": "Returns Ok value or the default if Err."}
{"question": "What is the 'thread::panicking' function?", "answer": "Returns true if the current thread is panicking."}
{"question": "How to use 'Vec::iter'?", "answer": "v.iter(); returns an iterator over &T."}
{"question": "What is the 'lifetime' of a function's return value?", "answer": "Must be valid for at least the shortest lifetime of its inputs."}
{"question": "How to use 'Option::or'?", "answer": "Returns the Option if Some, else the other Option."}
{"question": "What is the 'Mutex' type's 'lock' method?", "answer": "Returns a MutexGuard, which must be released to unlock."}
{"question": "How to use 'Result::into_ok'?", "answer": "Extracts the Ok value or panics if Err."}
{"question": "What is the 'thread::Builder::name'?", "answer": "Sets the thread's name for debugging."}
{"question": "How to use 'Vec::into_iter'?", "answer": "Consumes the Vec and returns an iterator over T."}
{"question": "What is the 'lifetime' of a static variable?", "answer": "It lives for the entire program duration."}
{"question": "How to use 'Option::xor'?", "answer": "Returns Some if exactly one of the Options is Some."}
{"question": "What is the 'Arc' type's 'clone' method?", "answer": "Increments the reference count."}
{"question": "How to use 'Result::is_ok'?", "answer": "Checks if the Result is Ok."}
{"question": "What is the 'thread::yield_now' function?", "answer": "Yields the current thread to the scheduler."}
{"question": "How to use 'Vec::reserve'?", "answer": "v.reserve(10); preallocates space for elements."}
{"question": "What is the 'lifetime' of a function's parameter?", "answer": "Must be valid for the function's execution."}
{"question": "How to use 'Option::take'?", "answer": "Removes the Some value and returns it."}
{"question": "What is the 'OnceCell' type?", "answer": "A thread-safe once-initialized value."}
{"question": "How to use 'Result::is_err'?", "answer": "Checks if the Result is Err."}
{"question": "What is the 'thread::scoped' function?", "answer": "Creates a thread that is joined automatically."}
{"question": "How to use 'Vec::shrink_to_fit'?", "answer": "v.shrink_to_fit(); reduces capacity to match length."}
{"question": "What is the 'lifetime' of a function's return value?", "answer": "Must be valid for at least the shortest lifetime of its inputs."}
{"question": "How to use 'Option::flatten'?", "answer": "Flattens nested Options into a single Option."}
{"question": "What is the 'Mutex' type's 'try_lock' method?", "answer": "Returns None if the lock is already held, else a MutexGuard."}
{"question": "How to use 'Result::and' and 'Result::or' for chaining?", "answer": "Result::and(Ok(42)) returns Ok(42), Result::or(Err(\"msg\")) returns Err(\"msg\")"}
{"question": "What is the difference between let and const in Rust?", "answer": "`let` declares variables, `const` defines constants. `const` requires type annotation and is evaluated at compile-time."}
{"question": "How do you declare a mutable variable in Rust?", "answer": "Use `let mut` followed by the variable name. Example: ```rust\nlet mut x = 5;\n```"}
{"question": "What is the purpose of the match expression in Rust?", "answer": "To handle multiple possible values of an expression, providing a way to match patterns and execute code accordingly."}
{"question": "Explain the concept of ownership in Rust.", "answer": "Ownership governs memory management. Each value has a single owner, and when the owner goes out of scope, the value is dropped."}
{"question": "What are the three types of data types in Rust?", "answer": "Scalar (integers, floats, booleans, chars), compound (arrays, tuples), and reference types (references, slices)."}
{"question": "How do you create a new thread in Rust?", "answer": "Use `std::thread::spawn`. Example: ```rust\nstd::thread::spawn(|| { /* code */ });\n```"}
{"question": "What is the difference between a vector and an array in Rust?", "answer": "Vectors are dynamic and growable, while arrays have fixed size and are stored on the stack."}
{"question": "How does Rust handle memory safety without a garbage collector?", "answer": "Through ownership and borrowing system, ensuring that references are always valid and memory is freed when no longer needed."}
{"question": "What is a closure in Rust?", "answer": "A function-like structure that can capture variables from its environment. Syntax: `|x| x + 1`."}
{"question": "How do you handle errors in Rust?", "answer": "Using the `Result` and `Option` types, along with `match` or `if let` for handling outcomes."}
{"question": "What is the purpose of the 'Send' trait in Rust?", "answer": "It indicates that a type can be safely sent between threads. Types implementing `Send` can be moved to another thread."}
{"question": "How do you share data between threads in Rust?", "answer": "Use `Arc` (Atomic Reference Counted) with `Mutex` or `RwLock` for thread-safe access. Example: ```rust\nlet data = Arc::new(Mutex::new(0));\n```"}
{"question": "What is the 'JoinHandle' in Rust threads?", "answer": "It allows waiting for a thread to finish. Call `.join()` on it to block until the thread completes."}
{"question": "How do you use async/await in Rust?", "answer": "Define an `async` function, then use `await` to pause execution. Requires an async runtime like `tokio`."}
{"question": "What is a channel in Rust's concurrency model?", "answer": "A way to send messages between threads. Use `std::sync::mpsc::channel()` for multiple producer, single consumer."}
{"question": "What is the difference between a struct and a tuple in Rust?", "answer": "A struct has named fields, while a tuple has unnamed fields. Example: `struct Point { x: i32, y: i32 }` vs tuple `(i32, i32)`."}
{"question": "How do you implement a trait for a type in Rust?", "answer": "Use the `impl` block. Example: ```rust\nimpl MyTrait for MyType { ... }\n```"}
{"question": "What is the purpose of the 'use' keyword in Rust?", "answer": "To bring modules, functions, or types into scope. Example: ```rust\nuse std::collections::HashMap;\n```"}
{"question": "How do you create a slice in Rust?", "answer": "Use a range with a reference. Example: ```rust\nlet slice = &arr[1..3];\n```"}
{"question": "What is the 'match' arm in Rust?", "answer": "Each case in a `match` expression. Example: `match x { 1 => ..., _ => ... }`."}
{"question": "How do you use the 'if let' construct in Rust?", "answer": "To handle `Option` or `Result` types with a single case. Example: ```rust\nif let Some(x) = value { ... }\n```"}
{"question": "What is the 'where' clause in Rust used for?", "answer": "To specify trait bounds for generic types. Example: ```rust\nfn foo<T: Trait>(t: T) where T: AnotherTrait { ... }\n```"}
{"question": "How do you create a new String in Rust?", "answer": "Using `String::new()` or `to_string()`. Example: ```rust\nlet s = String::new();\n```"}
{"question": "What is the 'lifetime' annotation in Rust?", "answer": "To specify how long references are valid. Used in function parameters with references. Example: ```rust\nfn foo<'a>(x: &'a i32) -> &'a i32 { ... }\n```"}
{"question": "How do you use the 'ref' keyword in pattern matching?", "answer": "To bind a reference to a value. Example: ```rust\nmatch x { ref y => ... }\n```"}
{"question": "What is the 'RwLock' in Rust?", "answer": "A reader-writer lock that allows multiple readers or one writer. Used for thread-safe shared access."}
{"question": "How do you handle panics in Rust?", "answer": "Using `panic!` macro or `catch_unwind`. Example: ```rust\nstd::panic::catch_unwind(|| { ... });\n```"}
{"question": "What is the 'Option' type in Rust?", "answer": "Represents a value that may be present (`Some`) or absent (`None`). Used for optional values."}
{"question": "How do you create a new enum in Rust?", "answer": "Using the `enum` keyword. Example: ```rust\nenum Color { Red, Green, Blue }\n```"}
{"question": "What is the 'Result' type in Rust?", "answer": "Represents success (`Ok`) or failure (`Err`). Used for error-prone operations."}
{"question": "How do you use the 'as_ref' method in Rust?", "answer": "Converts a value into a reference. Example: ```rust\nlet s = \"hello\".as_ref();\n```"}
{"question": "What is the 'Box' type in Rust used for?", "answer": "To allocate data on the heap. Example: ```rust\nlet b = Box::new(5);\n```"}
{"question": "How do you create a constant in Rust?", "answer": "Using the `const` keyword. Example: ```rust\nconst MAX: u8 = 255;\n```"}
{"question": "What is the 'impl' block used for in Rust?", "answer": "To define methods for a type. Example: ```rust\nimpl MyStruct { fn my_method(&self) { ... } }\n```"}
{"question": "What is the 'Rust' ownership system?", "answer": "Manages memory by assigning ownership of values to variables, ensuring no dangling pointers or memory leaks."}
{"question": "How do you create a reference to a variable in Rust?", "answer": "Using the `&` operator. Example: ```rust\nlet x = 5; let y = &x;\n```"}
{"question": "How do you use the 'unwrap' method in Rust?", "answer": "To get the value inside `Some` or `Ok`, panicking if it's `None` or `Err`. Example: ```rust\nlet x = option.unwrap();\n```"}
{"question": "What is the 'Rust' borrow checker?", "answer": "A compiler component enforcing borrowing rules to prevent data races and ensure memory safety."}
{"question": "How do you create a new array in Rust?", "answer": "Using `[value; length]` syntax. Example: ```rust\nlet arr = [0; 5];\n```"}
{"question": "What is the 'Rust' 'self' keyword used for?", "answer": "In method definitions, refers to the instance of the type. Example: ```rust\nfn my_method(&self) { ... }\n```"}
{"question": "How do you use the 'Rust' 'match' expression with enums?", "answer": "To handle each variant of an enum. Example: ```rust\nmatch color { Color::Red => ..., _ => ... }\n```"}
{"question": "What is the 'Rust' 'pub' keyword used for?", "answer": "To make items public. Example: ```rust\npub fn my_function() { ... }\n```"}
{"question": "How do you use the 'Rust' 'async' function?", "answer": "Define with `async` keyword, then `await` futures. Example: ```rust\nasync fn my_async() { ... }\n```"}
{"question": "What is the 'Rust' 'move' keyword in closures?", "answer": "Forces the closure to take ownership of captured variables. Example: ```rust\nthread::spawn(move || { ... });\n```"}
{"question": "How do you create a tuple in Rust?", "answer": "Using parentheses. Example: ```rust\nlet t = (1, \"hello\");\n```"}
{"question": "What is the 'Rust' 'match' expression's 'wildcard' pattern?", "answer": "The `_` pattern matches any value. Example: ```rust\nmatch x { 1 => ..., _ => ... }\n```"}
{"question": "How do you define a function in Rust?", "answer": "Using the `fn` keyword. Example: ```rust\nfn add(a: i32, b: i32) -> i32 { a + b }\n```"}
{"question": "What is the 'Rust' 'as' keyword used for?", "answer": "To cast values between types. Example: ```rust\nlet x: i32 = 5 as i32;\n```"}
{"question": "How do you handle multiple threads with a thread pool in Rust?", "answer": "Use `threadpool` crate or `std::thread::spawn` with a loop. Example: ```rust\nthreadpool::ThreadPool::new(4).execute(...);\n```"}
{"question": "What is the 'Rust' 'lifetime' elision rules?", "answer": "Rules allowing the compiler to infer lifetimes in common cases, like when a function returns a reference."}
{"question": "How do you create a new String from a string slice?", "answer": "Using `to_string()` or `String::from()`. Example: ```rust\nlet s = \"hello\".to_string();\n```"}
{"question": "What is the 'Rust' 'static' keyword used for?", "answer": "To indicate a reference that lives for the entire program. Example: ```rust\nfn foo(x: &'static str) { ... }\n```"}
{"question": "How do you use the 'Rust' 'ref mut' in pattern matching?", "answer": "To bind a mutable reference. Example: ```rust\nmatch x { ref mut y => ... }\n```"}
{"question": "What is the 'Rust' 'unsafe' block?", "answer": "Allows bypassing safety checks. Used for low-level operations like raw pointers or calling unsafe functions."}
{"question": "How do you create a new struct in Rust?", "answer": "Using `struct` keyword. Example: ```rust\nstruct Point { x: i32, y: i32 }\n```"}
{"question": "What is the 'Rust' 'derive' attribute?", "answer": "Automatically implements traits for a type. Example: ```rust#[derive(Debug)]\nstruct MyStruct;\n```"}
{"question": "How do you create a new HashMap in Rust?", "answer": "Using `HashMap::new()` or the `hashmap!` macro. Example: ```rust\nuse std::collections::HashMap;\nlet mut map = HashMap::new();\n```"}
{"question": "What is the 'Rust' 'lifetime' parameter in function signatures?", "answer": "Specifies the relationship between references. Example: ```rust\nfn longest<'a>(s1: &'a str, s2: &'a str) -> &'a str { ... }\n```"}
{"question": "How do you use the 'Rust' 'Result' type?", "answer": "To handle success or failure. Example: ```rust\nlet result: Result<i32, String> = Ok(5);\n```"}
{"question": "What is the 'Rust' 'match' expression's 'exhaustive' requirement?", "answer": "All possible values must be covered. Use `_` as a fallback to ensure exhaustiveness."}
{"question": "How do you create a new iterator in Rust?", "answer": "Using `iter()` or `into_iter()`. Example: ```rust\nfor item in vec.iter() { ... }\n```"}
{"question": "What is the 'Rust' 'trait' system?", "answer": "Enables shared behavior across types. Define with `trait` keyword, implement with `impl` block."}
{"question": "How do you use the 'Rust' 'Option' type?", "answer": "To represent optional values. Example: ```rust\nlet x: Option<i32> = Some(5);\n```"}
{"question": "What is the 'Rust' 'lifetime' in function parameters?", "answer": "Specifies the scope of references. Example: ```rust\nfn print<'a>(s: &'a str) { ... }\n```"}
{"question": "How do you create a new thread with a closure?", "answer": "Use `std::thread::spawn` with a closure. Example: ```rust\nstd::thread::spawn(|| { /* code */ });\n```"}
{"question": "What is the 'Rust' 'Box' type?", "answer": "Allocates data on the heap. Example: ```rust\nlet b = Box::new(5);\n```"}
{"question": "How do you handle a panic in Rust?", "answer": "Use `catch_unwind` or `panic!` macro. Example: ```rust\nstd::panic::catch_unwind(|| { ... });\n```"}
{"question": "What is the 'Rust' 'Option::unwrap_or' method?", "answer": "Returns the value if `Some`, else the provided default. Example: ```rust\nlet x = option.unwrap_or(0);\n```"}
{"question": "How do you create a new String from a format?", "answer": "Using `format!` macro. Example: ```rust\nlet s = format!(\"Hello, {}\", name);\n```"}
{"question": "What is the 'Rust' 'RwLock' vs 'Mutex'?", "answer": "`RwLock` allows multiple readers or one writer, while `Mutex` allows only one writer at a time."}
{"question": "How do you use the 'Rust' 'Result::ok' method?", "answer": "Converts `Result` to `Option`. Example: ```rust\nlet x = result.ok();\n```"}
{"question": "What is the 'Rust' 'lifetime' in struct definitions?", "answer": "Specifies how long references in a struct live. Example: ```rust\nstruct Data<'a> { s: &'a str }\n```"}
{"question": "How do you create a new array with initial values?", "answer": "Using `[value; length]` syntax. Example: ```rust\nlet arr = [1; 5]; // [1,1,1,1,1]\n```"}
{"question": "What is the 'Rust' 'Arc' type?", "answer": "Atomic reference counting for thread-safe sharing. Example: ```rust\nlet data = Arc::new(0);\n```"}
{"question": "How do you use the 'Rust' 'match' expression with a struct?", "answer": "Pattern match on struct fields. Example: ```rust\nmatch point { Point { x: 1, y: 2 } => ... }\n```"}
{"question": "What is the 'Rust' 'lifetime' in function return types?", "answer": "Specifies the reference's validity. Example: ```rust\nfn get_str() -> &'static str { \"hello\" }\n```"}
{"question": "How do you create a new Vec in Rust?", "answer": "Using `Vec::new()` or `vec!` macro. Example: ```rust\nlet v = Vec::new();\n```"}
{"question": "What is the 'Rust' 'lifetime' in method signatures?", "answer": "Specifies reference lifetimes. Example: ```rust\nfn get(&self) -> &i32 { ... }\n```"}
{"question": "How do you use the 'Rust' 'Result::expect' method?", "answer": "Returns the value or panics with a message. Example: ```rust\nlet x = result.expect(\"error message\");\n```"}
{"question": "What is the 'Rust' 'Option::as_ref' method?", "answer": "Converts `Option<T>` to `Option<&T>`. Example: ```rust\nlet s = option.as_ref();\n```"}
{"question": "How do you create a new thread with a value?", "answer": "Use `std::thread::spawn` with a closure. Example: ```rust\nstd::thread::spawn(move || { value });\n```"}
{"question": "What is the 'Rust' 'Send' trait?", "answer": "Indicates a type can be safely sent between threads. Example: ```rust\nimpl Send for MyType { ... }\n```"}
{"question": "How do you use the 'Rust' 'match' expression with a slice?", "answer": "Pattern match on slice elements. Example: ```rust\nmatch slice { [a, b, c] => ... }\n```"}
{"question": "What is the 'Rust' 'lifetime' in function parameters?", "answer": "Specifies the scope of references. Example: ```rust\nfn process<'a>(s: &'a str) { ... }\n```"}
{"question": "How do you create a new String with a capacity?", "answer": "Using `String::with_capacity`. Example: ```rust\nlet s = String::with_capacity(10);\n```"}
{"question": "What is the 'Rust' 'RwLockReadGuard'?", "answer": "A guard returned by `RwLock::read()`. Ensures read-only access while held."}
{"question": "How do you use the 'Rust' 'Option::map' method?", "answer": "Applies a function to the `Some` value. Example: ```rust\nlet x = option.map(|v| v * 2);\n```"}
{"question": "What is the 'Rust' 'Box::leak' function?", "answer": "Leaks a `Box`, returning a reference with 'static lifetime. Example: ```rust\nlet s = Box::leak(Box::new(\"hello\"));\n```"}
{"question": "How do you create a new thread with a return value?", "answer": "Use `std::thread::spawn` and `join()`. Example: ```rust\nlet handle = std::thread::spawn(|| 42);\nlet result = handle.join().unwrap();\n```"}
{"question": "What is the 'Rust' 'Send' and 'Sync' traits?", "answer": "`Send` allows moving between threads, `Sync` allows shared access. Types implementing both are thread-safe."}
{"question": "How do you handle a panic in an async function?", "answer": "Use `try_join!` or `catch_unwind`. Example: ```rust\nasync fn my_async() -> Result<(), Box<dyn Error>> { ... }\n```"}
{"question": "What is the 'Rust' 'async' block?", "answer": "Creates a future. Example: ```rust\nlet future = async { ... };\n```"}
{"question": "How do you use the 'Rust' 'await' keyword?", "answer": "Pauses execution until a future resolves. Example: ```rust\nlet result = future.await;\n```"}
{"question": "What is the 'Rust' 'tokio' runtime?", "answer": "An asynchronous runtime for building async applications. Example: ```rust\n#[tokio::main]\nasync fn main() { ... }\n```"}
{"question": "How do you create a channel in Rust?", "answer": "Use `std::sync::mpsc::channel()`. Example: ```rust\nlet (tx, rx) = std::sync::mpsc::channel();\n```"}
{"question": "What is the 'Rust' 'crossbeam' crate used for?", "answer": "Provides thread-safe data structures and channels. Example: ```rust\nuse crossbeam::channel::unbounded;\n```"}
{"question": "How do you use the 'Rust' 'Mutex' type?", "answer": "For thread-safe mutable access. Example: ```rust\nlet data = Mutex::new(0);\nlet mut data = data.lock().unwrap();\n```"}
{"question": "What is the 'Rust' 'RwLock' type?", "answer": "Allows multiple readers or one writer. Example: ```rust\nlet data = RwLock::new(0);\nlet data = data.read().unwrap();\n```"}
{"question": "How do you create a new thread with a closure that captures variables?", "answer": "Use `move` keyword. Example: ```rust\nstd::thread::spawn(move || { /* captures variables */ });\n```"}
{"question": "What is the 'Rust' 'async' function's return type?", "answer": "A `Future` type. Example: ```rust\nasync fn my_async() -> i32 { ... }\n```"}
{"question": "How do you use the 'Rust' 'try_join!' macro?", "answer": "Waits for multiple futures. Example: ```rust\ntry_join!(future1, future2);\n```"}
{"question": "What is the 'Rust' 'select!' macro?", "answer": "Waits for any of multiple futures to complete. Example: ```rust\nselect! { ... }\n```"}
{"question": "How do you use the 'Rust' 'join' method on a thread?", "answer": "Blocks until the thread finishes. Example: ```rust\nlet handle = std::thread::spawn(|| { ... });\nhandle.join().unwrap();\n```"}
{"question": "What is the keyword for declaring a variable in Rust?", "answer": "let"}
{"question": "How to create a mutable variable?", "answer": "let mut var = value;"}
{"question": "What is the default integer type in Rust?", "answer": "i32"}
{"question": "How to define a constant?", "answer": "const NAME: Type = value;"}
{"question": "What is the purpose of the 'match' expression?", "answer": "To compare a value against patterns and execute code based on the matching pattern."}
{"question": "How to create a new thread?", "answer": "std::thread::spawn(|| { /* code */ });"}
{"question": "What is the 'Copy' trait?", "answer": "Allows a type to be copied instead of moved."}
{"question": "What is a 'Vec' in Rust?", "answer": "A dynamic array type."}
{"question": "How to handle errors using 'Result'?", "answer": "Use match or ? operator to propagate errors."}
{"question": "What is the 'Option' enum used for?", "answer": "To represent values that may be absent."}
{"question": "How to implement a trait for a struct?", "answer": "impl Trait for StructName { ... }"}
{"question": "What is the 'self' keyword in method definitions?", "answer": "Refers to the instance of the struct."}
{"question": "What is a 'struct' in Rust?", "answer": "A custom data type that can hold multiple values."}
{"question": "How to define a function?", "answer": "fn function_name(parameters) -> return_type { ... }"}
{"question": "What is the 'use' keyword for?", "answer": "To bring modules into scope."}
{"question": "What is the 'pub' keyword used for?", "answer": "To make items public."}
{"question": "How to create a slice?", "answer": "&array[start..end]"}
{"question": "What is the 'lifetime' annotation?", "answer": "Specifies how long references are valid."}
{"question": "What is the 'Box' type?", "answer": "A smart pointer for heap allocation."}
{"question": "How to use a closure?", "answer": "|params| { body }"}
{"question": "What is the 'Rust' ownership system?", "answer": "A set of rules that govern how memory is managed."}
{"question": "What is the 'move' keyword in closures?", "answer": "Forces the closure to take ownership of captured variables."}
{"question": "How to use 'if let'?", "answer": "To handle a single pattern match case."}
{"question": "What is the 'Result' type?", "answer": "An enum representing success or error."}
{"question": "What is the 'Drop' trait?", "answer": "Provides a way to run code when a value goes out of scope."}
{"question": "How to use 'match' with enums?", "answer": "Pattern match on each variant."}
{"question": "What is the 'as' keyword used for?", "answer": "For type casting or renaming imports."}
{"question": "What is the 'static' keyword in Rust?", "answer": "Specifies a reference that lives for the entire program."}
{"question": "How to create a tuple?", "answer": "(value1, value2, ...)"}
{"question": "What is the 'RefCell' type?", "answer": "A way to have interior mutability."}
{"question": "What is the 'Arc' type?", "answer": "A thread-safe reference-counted pointer."}
{"question": "How to use 'iter()' on a Vec?", "answer": "To get an iterator over the elements."}
{"question": "What is the 'Box::new()' function?", "answer": "Allocates a value on the heap."}
{"question": "What is the 'pub use' statement?", "answer": "Re-exports a module under a different name."}
{"question": "How to handle panics?", "answer": "Using 'panic!' or 'unwrap()'."}
{"question": "What is the 'lifetime' elision rule?", "answer": "Rust infers lifetimes in common cases."}
{"question": "What is the 'impl' block?", "answer": "Used to implement methods for a type."}
{"question": "How to use 'match' with 'Some' and 'None'?", "answer": "To handle optional values."}
{"question": "What is the 'as_ref()' method?", "answer": "Converts a Box to a reference."}
{"question": "What is the 'Send' trait?", "answer": "Marks a type as safe to send between threads."}
{"question": "How to define a function with a closure parameter?", "answer": "fn example<F>(f: F) where F: Fn() { f(); }"}
{"question": "What is the 'Sync' trait?", "answer": "Marks a type as safe to share between threads."}
{"question": "What is the 'Cow' type?", "answer": "A clone-on-write smart pointer."}
{"question": "How to use 'thread::join()'?", "answer": "To wait for a thread to finish."}
{"question": "What is the 'derive' attribute?", "answer": "Automatically implements traits for a struct."}
{"question": "What is the 'lifetime' parameter in function signatures?", "answer": "Specifies the relationship between references."}
{"question": "How to use 'Ref' and 'RefMut' with 'Rc'?", "answer": "Through 'Rc::clone()' and 'Rc::get_mut()'."}
{"question": "What is the 'thread_local!' macro?", "answer": "Declares a thread-local variable."}
{"question": "How to use 'crossbeam::channel' for concurrency?", "answer": "Use send() and recv() to communicate between threads."}
{"question": "What is the 'once_cell' crate used for?", "answer": "Lazy initialization of static variables."}
{"question": "How to use 'tokio::spawn' for async tasks?", "answer": "tokio::spawn(async { /* code */ });"}
{"question": "What is the 'async' keyword?", "answer": "Declares an asynchronous function."}
{"question": "How to await a future?", "answer": "Using 'await' inside an async function."}
{"question": "What is the 'Future' trait?", "answer": "Represents a value that may become available later."}
{"question": "How to use 'Mutex' for thread safety?", "answer": "Wrap data in Mutex and use lock() to access it."}
{"question": "What is the 'RwLock' type?", "answer": "A read-write lock for concurrent access."}
{"question": "How to use 'Once' for initialization?", "answer": "Use Once::new() and call call_once()."}
{"question": "What is the 'thread::scoped' function?", "answer": "Creates a thread that can join with a lifetime."}
{"question": "How to use 'crossbeam::scope' for scoped threads?", "answer": "crossbeam::scope(|s| { s.spawn(|| { /* code */ }); });"}
{"question": "What is the 'std::sync::mpsc' module?", "answer": "Provides multi-producer, single-consumer channels."}
{"question": "How to use 'Arc<Mutex<T>>' for shared mutability?", "answer": "Arc provides reference counting, Mutex ensures thread safety."}
{"question": "What is the 'std::thread::available_parallelism()' function?", "answer": "Returns the number of available CPU cores."}
{"question": "How to use 'std::future::Future' trait?", "answer": "Implement poll() to define asynchronous behavior."}
{"question": "What is the 'std::pin::Pin' type?", "answer": "Ensures a value is not moved while referenced."}
{"question": "How to use 'std::sync::Barrier' for synchronization?", "answer": "Call wait() on all threads to synchronize."}
{"question": "What is the 'std::sync::Condvar' type?", "answer": "A condition variable for thread waiting."}
{"question": "How to use 'std::sync::atomic' for atomic operations?", "answer": "Use types like AtomicUsize with load() and store()."}
{"question": "What is the 'std::cell::Cell' type?", "answer": "Provides interior mutability without borrowing."}
{"question": "How to use 'std::cell::RefCell' for runtime checks?", "answer": "Use borrow() and borrow_mut() for mutable access."}
{"question": "What is the 'std::rc::Rc' type?", "answer": "A reference-counted pointer for single-threaded use."}
{"question": "How to use 'std::rc::Weak' for non-owning references?", "answer": "Rc::downgrade() creates a Weak pointer."}
{"question": "What is the 'std::boxed::Box' type?", "answer": "A smart pointer for heap allocation."}
{"question": "How to use 'std::vec::Vec' for dynamic arrays?", "answer": "Vec<T> provides growable, heap-allocated arrays."}
{"question": "What is the 'std::collections::HashMap' type?", "answer": "A key-value map with hash-based lookup."}
{"question": "How to use 'std::collections::BTreeMap'?", "answer": "A sorted map implemented as a tree."}
{"question": "What is the 'std::collections::HashSet' type?", "answer": "A collection of unique values with hash-based lookup."}
{"question": "How to use 'std::collections::VecDeque'?", "answer": "A double-ended queue."}
{"question": "What is the 'std::collections::LinkedList' type?", "answer": "A doubly linked list."}
{"question": "How to use 'std::collections::BinaryHeap'?", "answer": "A max-heap implemented as a binary tree."}
{"question": "What is the 'std::collections::HashMap::entry()' method?", "answer": "Allows checking and inserting entries efficiently."}
{"question": "How to use 'std::collections::BTreeSet'?", "answer": "A sorted set implemented as a tree."}
{"question": "What is the difference between let and const in Rust?", "answer": "let declares a variable, while const defines a constant. const requires a type annotation and is evaluated at compile-time."}
{"question": "How do you declare a mutable variable?", "answer": "Use let mut followed by the variable name. Example: let mut x = 5;"}
{"question": "What are the basic data types in Rust?", "answer": "Primitive types like i32, u32, f64, bool, char, and compound types like arrays, tuples, and structs."}
{"question": "What is the purpose of the match expression?", "answer": "To handle multiple possible values of an expression with pattern matching."}
{"question": "How to define a function?", "answer": "Use the fn keyword. Example: fn add(a: i32, b: i32) -> i32 { a + b }"}
{"question": "What is a tuple?", "answer": "A collection of values with fixed size and mixed types. Example: (1, \"hello\")"}
{"question": "What is a struct?", "answer": "A custom data type with named fields. Example: struct Point { x: i32, y: i32 }"}
{"question": "What is the difference between a struct and an enum?", "answer": "Structs group data, enums represent a value that can be one of several variants."}
{"question": "How to create a vector?", "answer": "Use Vec::new() or the vec! macro. Example: let v = vec![1, 2, 3];"}
{"question": "What is the borrow checker?", "answer": "A Rust compiler component that enforces borrowing rules to prevent data races."}
{"question": "How to implement a trait for a custom type?", "answer": "Use impl Trait for Type { ... }. Example: impl Display for Point { ... }"}
{"question": "What are lifetimes and why are they important?", "answer": "Lifetimes ensure references are valid for the correct scope, preventing dangling references."}
{"question": "What is a closure?", "answer": "An anonymous function that can capture its environment. Example: |x| x + 1"}
{"question": "How to use the Option type?", "answer": "Option<T> represents a value that may be None. Use match or if let to handle it."}
{"question": "What is the Result type used for?", "answer": "To handle operations that may succeed (Ok) or fail (Err)."}
{"question": "How to create a custom module?", "answer": "Use the mod keyword. Example: mod my_module { ... }"}
{"question": "What is the difference between pub and private?", "answer": "pub makes items accessible outside the module, private restricts access."}
{"question": "How to use the match expression with enums?", "answer": "Pattern match each variant. Example: match result { Ok(v) => v, Err(e) => e }"}
{"question": "What is the purpose of the 'use' keyword?", "answer": "To bring modules, types, or functions into scope. Example: use std::io::Read;"}
{"question": "How to create a trait with associated functions?", "answer": "Define the trait with fn, then implement it for a type. Example: trait MyTrait { fn new() -> Self; }"}
{"question": "What is the difference between a String and a &str?", "answer": "String is a heap-allocated, growable string; &str is a slice pointing to a string."}
{"question": "How to use the if let syntax?", "answer": "Simplify matching a single pattern. Example: if let Some(x) = value { ... }"}
{"question": "What is the purpose of the 'as' keyword?", "answer": "For type casting. Example: let x: i32 = 5 as i32;"}
{"question": "How to handle panics in Rust?", "answer": "Use panic!() to cause a panic, or unwrap() to handle Option/Result."}
{"question": "What is the difference between a function and a method?", "answer": "Methods are functions associated with a type via impl blocks, functions are standalone."}
{"question": "What is the purpose of the Box type?", "answer": "Allocates data on the heap. Example: let b = Box::new(5);"}
{"question": "How to use the derive macro?", "answer": "Add #[derive(...)] to a struct or enum. Example: #[derive(Debug)] struct Point;"}
{"question": "What is the 'where' clause in traits?", "answer": "Specifies trait bounds for generic types. Example: fn foo<T: Trait + Clone> where T: Debug { ... }"}
{"question": "How to implement a trait for multiple types?", "answer": "Use a trait implementation with a generic type. Example: impl<T> MyTrait for Vec<T> { ... }"}
{"question": "What is the difference between a struct and a tuple struct?", "answer": "Structs have named fields; tuple structs have unnamed fields but can have names."}
{"question": "How to use the 'self' keyword in methods?", "answer": "Refers to the current instance. Example: fn greet(&self) { ... }"}
{"question": "What is the purpose of the 'panic!' macro?", "answer": "Causes the current thread to panic and unwind."}
{"question": "How to handle errors with Result?", "answer": "Use match, if let, or the ? operator. Example: let data = file.read()?;"}
{"question": "What is the 'as' keyword used for in pattern matching?", "answer": "To rename a matched value. Example: if let Some(x) = value.as_ref() { ... }"}
{"question": "What is the difference between a thread and an async task?", "answer": "Threads are OS-level, async tasks are cooperative and managed by the runtime."}
{"question": "How to create a thread?", "answer": "Use std::thread::spawn. Example: std::thread::spawn(|| { ... });"}
{"question": "What is the purpose of the Send trait?", "answer": "Indicates a type can be safely sent between threads."}
{"question": "What is the Sync trait?", "answer": "Indicates a type can be safely shared between threads."}
{"question": "How to use channels for communication between threads?", "answer": "Use std::sync::mpsc::channel(). Example: let (tx, rx) = channel();"}
{"question": "What is a Mutex and how is it used?", "answer": "A mutual exclusion lock. Use lock() to access the inner value. Example: let data = mutex.lock().unwrap();"}
{"question": "What is an Arc and how does it work?", "answer": "A thread-safe reference-counted pointer. Use Arc::new() to create. Example: let arc = Arc::new(data);"}
{"question": "How to handle thread safety with shared data?", "answer": "Use Arc<Mutex<T>> for shared ownership and mutual exclusion."}
{"question": "What is async/await in Rust?", "answer": "Syntax for writing asynchronous code. Example: async fn main() { ... }"}
{"question": "How to use the tokio runtime?", "answer": "Use #[tokio::main] for async functions. Example: tokio::main() async fn main() { ... }"}
{"question": "What is the 'join' method on a thread?", "answer": "Waits for the thread to finish. Example: thread.join().unwrap();"}
{"question": "What is the 'thread_local!' macro used for?", "answer": "Declares a thread-local variable. Example: thread_local! { static X: i32 = 0; }"}
{"question": "How to use the 'once_cell' crate for lazy initialization?", "answer": "Use OnceCell::new() and get_or_init(). Example: let cell = OnceCell::new(); cell.get_or_init(|| 42);"}
{"question": "What is the difference between a String and a Vec<u8>?", "answer": "String is a UTF-8 encoded, growable collection of characters; Vec<u8> is a byte buffer."}
{"question": "How to create a slice?", "answer": "Use &array[start..end]. Example: let s = &arr[1..3];"}
{"question": "What is the purpose of the 'ref' keyword in patterns?", "answer": "To borrow a reference instead of moving the value. Example: if let Some(ref x) = value { ... }"}
{"question": "How to use the 'match' expression with a range?", "answer": "Use the ..= operator. Example: match x { 1..=5 => ... }"}
{"question": "What is the 'Option::unwrap_or' method?", "answer": "Returns the value if Some, else the provided default. Example: let x = opt.unwrap_or(0);"}
{"question": "How to use the 'Result::expect' method?", "answer": "Returns the value if Ok, else panics with a message. Example: let x = res.expect(\"error message\");"}
{"question": "What is the 'as_ref' method for Option?", "answer": "Converts Some(T) to Some(&T). Example: opt.as_ref().map(|x| x.len())"}
{"question": "How to use the 'Result::map' method?", "answer": "Applies a function to the Ok value. Example: res.map(|x| x * 2)"}
{"question": "What is the 'Box::new' function?", "answer": "Allocates a value on the heap. Example: let b = Box::new(5);"}
{"question": "How to use the 'Vec::push' method?", "answer": "Adds an element to the end. Example: let mut v = Vec::new(); v.push(1);"}
{"question": "What is the 'Vec::iter' method?", "answer": "Returns an iterator over references. Example: for item in vec.iter() { ... }"}
{"question": "How to use the 'Vec::into_iter' method?", "answer": "Consumes the vector and returns an iterator. Example: for item in vec.into_iter() { ... }"}
{"question": "What is the 'Vec::retain' method?", "answer": "Keeps elements that satisfy a closure. Example: vec.retain(|x| *x > 0);"}
{"question": "How to use the 'Vec::split_at_mut' method?", "answer": "Splits a vector into two mutable slices. Example: let (left, right) = vec.split_at_mut(2);"}
{"question": "What is the 'Vec::resize' method?", "answer": "Changes the length of the vector. Example: vec.resize(5, 0);"}
{"question": "How to use the 'Vec::drain' method?", "answer": "Removes and returns elements. Example: let drained = vec.drain(1..3);"}
{"question": "What is the 'Vec::extend' method?", "answer": "Adds elements from an iterator. Example: vec.extend([1, 2, 3].iter());"}
{"question": "How to use the 'Vec::into_boxed_slice' method?", "answer": "Converts a Vec to a Box<[T]>. Example: let boxed = vec.into_boxed_slice();"}
{"question": "What is the 'Vec::clone' method?", "answer": "Creates a new Vec with copies of elements. Example: let new_vec = vec.clone();"}
{"question": "How to use the 'Vec::swap' method?", "answer": "Exchanges two elements. Example: vec.swap(0, 1);"}
{"question": "What is the 'Vec::reverse' method?", "answer": "Reverses the order of elements. Example: vec.reverse();"}
{"question": "How to use the 'Vec::sort' method?", "answer": "Sorts elements in place. Example: vec.sort();"}
{"question": "What is the 'Vec::binary_search' method?", "answer": "Finds an element using binary search. Example: let index = vec.binary_search(&x);"}
{"question": "How to use the 'Vec::dedup' method?", "answer": "Removes consecutive duplicates. Example: vec.dedup();"}
{"question": "What is the 'Vec::split_off' method?", "answer": "Splits the vector at a position, returning the second part. Example: let right = vec.split_off(2);"}
{"question": "How to use the 'Vec::resize_with' method?", "answer": "Resizes the vector, initializing new elements with a closure. Example: vec.resize_with(5, Default::default);"}
{"question": "What is the 'Vec::into_iter' method?", "answer": "Consumes the vector and returns an iterator. Example: for item in vec.into_iter() { ... }"}
{"question": "How to use the 'Vec::iter_mut' method?", "answer": "Returns an iterator over mutable references. Example: for item in vec.iter_mut() { ... }"}
{"question": "What is the 'Vec::into_boxed_slice' method?", "answer": "Converts a Vec to a Box<[T]>. Example: let boxed = vec.into_boxed_slice();"}
{"question": "What is the keyword to declare a variable in Rust?", "answer": "let"}
{"question": "How to declare a mutable variable?", "answer": "let mut x = 5;"}
{"question": "What is the default integer type in Rust?", "answer": "i32"}
{"question": "What is the difference between 'let' and 'const'?", "answer": "'let' declares a variable, 'const' defines a compile-time constant."}
{"question": "How to define a function in Rust?", "answer": "fn add(a: i32, b: i32) -> i32 { a + b }"}
{"question": "What is the purpose of the 'match' expression?", "answer": "To compare a value against patterns and execute code based on the matching pattern."}
{"question": "How to create a struct in Rust?", "answer": "struct Point { x: i32, y: i32 }"}
{"question": "What is the difference between struct and tuple struct?", "answer": "A regular struct has named fields; a tuple struct has unnamed fields."}
{"question": "How to implement a method on a struct?", "answer": "Use 'impl' block: impl Point { fn new() -> Self { ... } }"}
{"question": "What is the 'Option' type used for?", "answer": "To represent optional values (Some or None)."}
{"question": "How to create an enum in Rust?", "answer": "enum Color { Red, Green, Blue }"}
{"question": "What is the 'Result' type used for?", "answer": "To handle success or error outcomes (Ok or Err)."}
{"question": "How to use a slice in Rust?", "answer": "Use &str or &[T] to reference a portion of a collection."}
{"question": "What is the 'Vec' type?", "answer": "A growable array type for dynamic data."}
{"question": "How to handle string concatenation in Rust?", "answer": "Use the 'format!' macro or '+'. Example: let s = format!(\"{} {}\", \"hello\", \"world\");"}
{"question": "What is the 'Box' type used for?", "answer": "To allocate data on the heap."}
{"question": "How to use a reference in Rust?", "answer": "Use & to borrow a value without taking ownership."}
{"question": "What is the 'lifetime' annotation?", "answer": "Specifies how long a reference is valid to prevent dangling references."}
{"question": "How to use the 'if let' construct?", "answer": "To handle a single pattern match case: if let Some(x) = value { ... }"}
{"question": "What is the 'for' loop syntax in Rust?", "answer": "for i in 0..5 { ... } or for i in 0..=5 { ... }"}
{"question": "What is a trait in Rust?", "answer": "A trait defines shared behavior for types."}
{"question": "How to define a trait?", "answer": "trait MyTrait { fn method(&self); }"}
{"question": "What is the 'derive' attribute used for?", "answer": "To automatically implement common traits like Debug, Clone."}
{"question": "How to use generics in Rust?", "answer": "fn generic<T>(x: T) -> T { x }"}
{"question": "What is the 'where' clause in generics?", "answer": "To specify trait bounds for generic parameters."}
{"question": "How to implement a trait for a type?", "answer": "impl MyTrait for i32 { fn method(&self) { ... } }"}
{"question": "What is the 'match' arm syntax?", "answer": "Each arm is a pattern followed by => and code: match x { 1 => \"one\", _ => \"other\" }"}
{"question": "How to use the 'iter()' method?", "answer": "To create an iterator over a collection: for item in vec.iter() { ... }"}
{"question": "What is the 'map' function in iterators?", "answer": "Transforms each element: iter.map(|x| x * 2)"}
{"question": "How to use the 'filter' function?", "answer": "Selects elements that match a predicate: iter.filter(|x| *x > 0)"}
{"question": "What is the 'collect' method?", "answer": "Converts an iterator into a collection: iter.collect::<Vec<_>>()"}
{"question": "How to use the 'Option::unwrap()' method?", "answer": "Extracts the value or panics: Some(5).unwrap()"}
{"question": "What is the 'Result::expect()' method?", "answer": "Extracts the value or panics with a message: Ok(5).expect(\"error\")"}
{"question": "How to use the 'panic!' macro?", "answer": "Triggers a runtime panic: panic!(\"message\")"}
{"question": "What is the 'unwrap_or' method for Option?", "answer": "Returns the value or a default: Some(5).unwrap_or(0)"}
{"question": "How to use the 'and_then' method for Option?", "answer": "Chains operations: Some(5).and_then(|x| Some(x + 1))"}
{"question": "What is the 'Result::map_err()' method?", "answer": "Transforms an Err value: Ok(5).map_err(|e| e.to_string())"}
{"question": "How to use the 'Box<dyn Trait>' syntax?", "answer": "For dynamic dispatch with trait objects: let obj: Box<dyn MyTrait> = Box::new(MyStruct {});"}
{"question": "What is the 'self' keyword in methods?", "answer": "Refers to the current instance of a type: fn method(&self) { ... }"}
{"question": "How to use the 'as' keyword for type casting?", "answer": "Converts between types: let x: i32 = 5 as i32;"}
{"question": "How to create a new thread in Rust?", "answer": "Use std::thread::spawn(|| { ... });"}
{"question": "What is the 'join' method for threads?", "answer": "Waits for a thread to finish: handle.join().unwrap()"}
{"question": "What is a Mutex in Rust?", "answer": "A mutual exclusion lock for thread-safe data access."}
{"question": "How to use a Mutex?", "answer": "Use std::sync::Mutex and .lock() method: let data = mutex.lock().unwrap();"}
{"question": "What is a RwLock in Rust?", "answer": "A read-write lock that allows multiple readers or one writer."}
{"question": "How to use channels in Rust?", "answer": "Use std::sync::mpsc::channel() and send/receive: let (tx, rx) = channel(); tx.send(5); rx.recv()"}
{"question": "What is the 'Arc' type used for?", "answer": "Thread-safe reference counting: std::sync::Arc<T>"}
{"question": "How to share data between threads using Arc?", "answer": "Wrap data in Arc and clone it for each thread: let data = Arc::new(5);"}
{"question": "What is the 'async' keyword used for?", "answer": "Declares an asynchronous function: async fn my_async() {}"}
{"question": "How to run an async function in Rust?", "answer": "Use tokio::runtime::Runtime or async_std::task::block_on."}
{"question": "What is the 'await' operator?", "answer": "Waits for an async task to complete: let result = my_async().await;"}
{"question": "How to use 'Send' and 'Sync' traits?", "answer": "'Send' allows ownership across threads; 'Sync' allows shared access."}
{"question": "What is a 'RwLock' used for?", "answer": "To allow multiple readers or exclusive writers."}
{"question": "How to create a static variable in Rust?", "answer": "Use 'static' keyword: static X: i32 = 5;"}
{"question": "What is the 'use' keyword for?", "answer": "To bring modules into scope: use std::collections::HashMap;"}
{"question": "How to handle panics in Rust?", "answer": "Use 'panic!' or 'unwrap()' to trigger a panic; 'catch_unwind' for recovery."}
{"question": "What is the 'drop' trait?", "answer": "Allows custom cleanup when a value goes out of scope."}
{"question": "How to use the 'as_ref' method?", "answer": "Converts a value to a reference: Some(5).as_ref()"}
{"question": "What is the 'Cow' type?", "answer": "A clone-on-write smart pointer: std::borrow::Cow."}
{"question": "How to use the 'try' macro?", "answer": "For error propagation in async code: let result = try!(my_result);"}
{"question": "What is the 'lifetime' elision rules?", "answer": "Rust infers lifetimes in common cases, like when a function returns a reference."}
{"question": "How to use the 'impl Trait' syntax?", "answer": "To return a type that implements a trait without naming it: fn my_func() -> impl MyTrait { ... }"}
{"question": "What is the 'const' keyword used for?", "answer": "To define compile-time constants: const PI: f64 = 3.14;"}
{"question": "How to use the 'match' expression with guards?", "answer": "Add 'if' conditions: match x { Some(y) if y > 0 => ... }"}
{"question": "What is the 'derive' macro for?", "answer": "Automatically generates implementations for traits like PartialEq."}
{"question": "How to use the 'default' trait?", "answer": "Provides a default value: impl Default for MyStruct { fn default() -> Self { ... } }"}
{"question": "What is the 'From' trait?", "answer": "Converts from another type: impl From<i32> for MyType { ... }"}
{"question": "How to use the 'Into' trait?", "answer": "Converts into another type: let s: String = \"hello\".into();"}
{"question": "What is the 'Iterator' trait?", "answer": "Defines methods for iterating over elements: next(), size_hint(), etc."}
{"question": "How to use the 'into_iter()' method?", "answer": "Consumes the collection and returns an iterator: for item in vec.into_iter() { ... }"}
{"question": "What is the 'iter()' method?", "answer": "Returns an iterator over references: for item in vec.iter() { ... }"}
{"question": "How to use the 'into_iter' vs 'iter'?", "answer": "'into_iter' consumes the collection; 'iter' borrows it."}
{"question": "What is the 'cloned' method for iterators?", "answer": "Creates an iterator over clones of elements: iter.cloned()"}
{"question": "How to use the 'copied' method for iterators?", "answer": "Creates an iterator over copies of elements: iter.copied()"}
{"question": "What is the 'zip' method for iterators?", "answer": "Combines two iterators into a single one: iter1.zip(iter2)"}
{"question": "How to use the 'filter_map' method?", "answer": "Filters and maps in one step: iter.filter_map(|x| if x > 0 { Some(x) } else { None })"}
{"question": "What is the 'fold' method for iterators?", "answer": "Accumulates values: iter.fold(0, |acc, x| acc + x)"}
{"question": "How to use the 'try_fold' method?", "answer": "For error-prone accumulation: iter.try_fold(0, |acc, x| Ok(acc + x))"}
{"question": "What is the 'try_for_each' method?", "answer": "Executes a function for each element, stopping on error."}
{"question": "How to use the 'try_map' method?", "answer": "Maps elements with error handling: iter.try_map(|x| Ok(x * 2))"}
{"question": "What is the 'Future' trait?", "answer": "Represents asynchronous computations."}
{"question": "How to use 'tokio::spawn'?", "answer": "Spawns an async task: tokio::spawn(async { ... })"}
{"question": "How do you declare a variable in Rust?", "answer": "Use `let x = 5;` for immutable variables or `let mut x = 5;` for mutable ones.\n```rust\nlet x = 5;\nlet mut y = 10;\n```"}
{"question": "What is the difference between `let` and `const` in Rust?", "answer": "`let` declares a variable with optional mutability, while `const` defines a compile-time constant.\n```rust\nconst PI: f64 = 3.14;\nlet x = 5;\n```"}
{"question": "How to handle panics in Rust?", "answer": "Use `panic!()` macro. Example:\n```rust\npanic!(\"error message\");\n```"}
{"question": "What is the purpose of `match` in Rust?", "answer": "To compare a value against patterns and execute code based on the matching pattern."}
{"question": "How to create a struct in Rust?", "answer": "Use `struct` keyword. Example:\n```rust\nstruct Point { x: i32, y: i32 }\n```"}
{"question": "What is the `Option` enum used for?", "answer": "To represent optional values (Some(T) or None)."}
{"question": "How to implement a trait for a type?", "answer": "Use `impl Trait for Type`. Example:\n```rust\nimpl Display for Point {\n    fn fmt(&self, f: &mut Formatter) -> Result {\n        write!(f, \"({}, {})\", self.x, self.y)\n    }\n}\n```"}
{"question": "What is the `Result` type in Rust?", "answer": "A generic enum for success (Ok(T)) or error (Err(E)) handling."}
{"question": "How to borrow a reference in Rust?", "answer": "Use `&` for immutable or `&mut` for mutable references.\n```rust\nlet s = String::from(\"hello\");\nlet s_ref = &s;\nlet s_mut_ref = &mut s;\n```"}
{"question": "What is the `Box` type used for?", "answer": "To allocate data on the heap and own it.\n```rust\nlet b = Box::new(5);\n```"}
{"question": "How to create a thread in Rust?", "answer": "Use `std::thread::spawn`. Example:\n```rust\nstd::thread::spawn(|| {\n    println!(\"Hello from thread\");\n});\n```"}
{"question": "What is the `RwLock` type used for?", "answer": "To allow multiple readers or one writer at a time.\n```rust\nuse std::sync::RwLock;\nlet data = RwLock::new(5);\n```"}
{"question": "How to handle multiple ownership?", "answer": "Use `Arc<T>` (Atomic Reference Counted) for thread-safe shared ownership.\n```rust\nuse std::sync::Arc;\nlet data = Arc::new(5);\n```"}
{"question": "What is the `?` operator in Rust?", "answer": "Shortens error propagation in functions returning `Result` or `Option`."}
{"question": "How to define a function in Rust?", "answer": "Use `fn function_name() { ... }`. Example:\n```rust\nfn add(a: i32, b: i32) -> i32 {\n    a + b\n}\n```"}
{"question": "What is the `#[derive(Debug)]` attribute for?", "answer": "Enables the `Debug` trait for a struct, allowing it to be printed with `{:?}`."}
{"question": "How to create a slice in Rust?", "answer": "Use `&array[start..end]`. Example:\n```rust\nlet arr = [1,2,3,4];\nlet slice = &arr[1..3];\n```"}
{"question": "What is the `use` keyword used for?", "answer": "To bring items into scope. Example:\n```rust\nuse std::collections::HashMap;\n```"}
{"question": "How to handle type inference in Rust?", "answer": "Rust infers types from context. Example:\n```rust\nlet x = 5; // inferred as i32\n```"}
{"question": "What is the `lifetime` system in Rust?", "answer": "Ensures references are valid for the correct duration, preventing dangling references."}
{"question": "How to create a vector in Rust?", "answer": "Use `vec![1,2,3]` or `Vec::new()`. Example:\n```rust\nlet v = vec![1,2,3];\n```"}
{"question": "What is the `enum` type in Rust?", "answer": "A type that can have multiple named variants. Example:\n```rust\nenum Color { Red, Green, Blue }\n```"}
{"question": "How to use pattern matching with `match`?", "answer": "Match against values, enums, or destructured data. Example:\n```rust\nmatch x {\n    1 => println!(\"one\"),\n    _ => println!(\"other\"),\n}\n```"}
{"question": "What is the `Box::new()` function?", "answer": "Allocates a value on the heap and returns a `Box<T>` pointer."}
{"question": "How to implement a method for a struct?", "answer": "Use `impl` block. Example:\n```rust\nimpl Point {\n    fn new(x: i32, y: i32) -> Self {\n        Point { x, y }\n    }\n}\n```"}
{"question": "What is the `Arc` type used for?", "answer": "Thread-safe shared ownership with reference counting."}
{"question": "How to create a channel for communication between threads?", "answer": "Use `std::sync::mpsc::channel()`. Example:\n```rust\nuse std::sync::mpsc;\nlet (tx, rx) = mpsc::channel();\n```"}
{"question": "What is the purpose of `unsafe` blocks?", "answer": "To bypass Rust's safety checks for low-level operations."}
{"question": "How to handle string concatenation in Rust?", "answer": "Use `+` operator or `format!()` macro. Example:\n```rust\nlet s = \"hello\".to_string() + \" world\";\n```"}
{"question": "What is the `Option::unwrap()` method?", "answer": "Returns the value inside `Some(T)` or panics if `None`."}
{"question": "How to define a constant in Rust?", "answer": "Use `const` keyword. Example:\n```rust\nconst MAX_SPEED: u8 = 100;\n```"}
{"question": "What is the `Result::ok()` method?", "answer": "Extracts the `Ok(T)` value or returns `None` if `Err(E)`."}
{"question": "How to use the `if let` construct?", "answer": "Matches a single pattern and ignores others. Example:\n```rust\nif let Some(x) = value {\n    println!(\"Found: {}\", x);\n}\n```"}
{"question": "What is the `Rust` ownership system?", "answer": "Controls memory management via unique ownership and strict borrowing rules."}
{"question": "How to create a tuple in Rust?", "answer": "Use parentheses. Example:\n```rust\nlet t = (1, \"hello\");\n```"}
{"question": "What is the `Box<T>` type?", "answer": "A smart pointer for heap-allocated data."}
{"question": "How to use the `while let` loop?", "answer": "Continuously matches a pattern. Example:\n```rust\nwhile let Some(x) = rx.recv() {\n    println!(\"Received: {}\", x);\n}\n```"}
{"question": "What is the `Rust` borrow checker?", "answer": "Enforces borrowing rules at compile time to prevent data races."}
{"question": "How to create a static variable in Rust?", "answer": "Use `static` keyword. Example:\n```rust\nstatic PI: f64 = 3.14;\n```"}
{"question": "What is the `Rust` `pub` keyword?", "answer": "Makes items public for external access."}
{"question": "How to use the `?` operator in a function?", "answer": "Propagates errors from a `Result` or `Option`.\n```rust\nfn read_file() -> Result<String, std::io::Error> {\n    let s = std::fs::read_to_string(\"file.txt\")?;\n    Ok(s)\n}\n```"}
{"question": "What is the `Rust` `self` keyword?", "answer": "Refers to the current instance in method implementations."}
{"question": "How to create a reference to a slice?", "answer": "Use `&[T]`. Example:\n```rust\nlet arr = [1,2,3];\nlet slice: &[i32] = &arr;\n```"}
{"question": "What is the `Rust` `as` operator?", "answer": "Converts between types. Example:\n```rust\nlet x: i32 = 5.0 as i32;\n```"}
{"question": "How to use the `match` arm for a range?", "answer": "Use `..=` for inclusive ranges. Example:\n```rust\nmatch x {\n    1..=5 => println!(\"in range\"),\n    _ => println!(\"out of range\"),\n}\n```"}
{"question": "What is the `Rust` `drop` trait?", "answer": "Allows custom cleanup logic when a value goes out of scope."}
{"question": "How to create a thread-safe shared mutable state?", "answer": "Use `Mutex<T>` or `RwLock<T>`.\n```rust\nuse std::sync::{Arc, Mutex};\nlet data = Arc::new(Mutex::new(5));\n```"}
{"question": "What is the `Rust` `fn` keyword?", "answer": "Declares a function."}
{"question": "How to use the `where` clause in generics?", "answer": "Specifies trait bounds. Example:\n```rust\nfn foo<T: Display + Clone>(x: T) where T: Debug {\n    // ...\n}\n```"}
{"question": "What is the `Rust` `use` statement?", "answer": "Imports items into scope."}
{"question": "How to handle a `Result` type?", "answer": "Use `match` or `if let` to handle `Ok` or `Err`."}
{"question": "What is the `Rust` `self` in trait methods?", "answer": "Refers to the implementing type."}
{"question": "How to create a closure in Rust?", "answer": "Use `|args| body`. Example:\n```rust\nlet add = |a: i32, b: i32| a + b;\n```"}
{"question": "What is the `Rust` `as_ref()` method?", "answer": "Converts a `Box<T>` to a `&T`."}
{"question": "How to use the `Rust` `?` operator in `main`?", "answer": "`main` can return `Result` or `Option` and use `?` for error handling."}
{"question": "What is the `Rust` `#[derive(Clone)]` attribute?", "answer": "Enables the `Clone` trait for a type."}
{"question": "How to create a `Vec` with initial capacity?", "answer": "Use `Vec::with_capacity(n)`. Example:\n```rust\nlet v = Vec::with_capacity(10);\n```"}
{"question": "What is the `Rust` `as_mut()` method?", "answer": "Converts a `Box<T>` to a `&mut T`."}
{"question": "How to use the `Rust` `if let` with `Option`?", "answer": "Checks for `Some(T)` and ignores `None`. Example:\n```rust\nif let Some(x) = opt {\n    // handle x\n}\n```"}
{"question": "What is the `Rust` `pub use` statement?", "answer": "Reexports an item under a different name."}
{"question": "How to implement a trait for multiple types?", "answer": "Use `impl Trait for Type` for each type."}
{"question": "What is the `Rust` `Box::leak()` function?", "answer": "Leaks a `Box<T>`, returning a `&'static T`."}
{"question": "How to create a `HashMap` in Rust?", "answer": "Use `HashMap::new()` or `hashmap![]` macro.\n```rust\nuse std::collections::HashMap;\nlet mut map = HashMap::new();\n```"}
{"question": "What is the `Rust` `#[derive(PartialEq)]` attribute?", "answer": "Enables equality comparisons for a type."}
{"question": "How to use the `Rust` `while` loop?", "answer": "Executes code while a condition is true. Example:\n```rust\nlet mut i = 0;\nwhile i < 5 {\n    println!(\"{}\", i);\n    i += 1;\n}\n```"}
{"question": "What is the `Rust` `struct` field syntax?", "answer": "`struct Name { field: Type }`."}
{"question": "How to create a `VecDeque` in Rust?", "answer": "Use `VecDeque::new()` from `std::collections`.\n```rust\nuse std::collections::VecDeque;\nlet mut dq = VecDeque::new();\n```"}
{"question": "What is the `Rust` `#[derive(Debug)]` attribute?", "answer": "Enables printing with `{:?}` format specifier."}
{"question": "How to handle a `Result` with `unwrap_or`?", "answer": "Provides a default value on `Err`. Example:\n```rust\nlet x = result.unwrap_or(0);\n```"}
{"question": "What is the `Rust` `?` operator in `main`?", "answer": "Allows error propagation in `main` function."}
{"question": "How to create a `Cow` type in Rust?", "answer": "Use `Cow::Borrowed` or `Cow::Owned` for copy-on-write.\n```rust\nuse std::borrow::Cow;\nlet s = Cow::Borrowed(\"hello\");\n```"}
{"question": "What is the `Rust` `#[derive(Default)]` attribute?", "answer": "Provides a default value for a type."}
{"question": "How to use the `Rust` `match` with `ref`?", "answer": "Borrows the value instead of moving it. Example:\n```rust\nmatch x {\n    ref y => println!(\"{}\", y),\n}\n```"}
{"question": "What is the `Rust` `#[derive(Clone)]` attribute?", "answer": "Enables cloning of a type."}
{"question": "How to create a `Vec` with initial elements?", "answer": "Use `vec![1, 2, 3]` or `Vec::from([1,2,3])`.\n```rust\nlet v = vec![1, 2, 3];\n```"}
{"question": "What is the `Rust` `#[derive(PartialOrd)]` attribute?", "answer": "Enables partial ordering comparisons for a type."}
{"question": "How to use the `Rust` `if let` with `Result`?", "answer": "Checks for `Ok(T)` and ignores `Err(E)`. Example:\n```rust\nif let Ok(x) = result {\n    // handle x\n}\n```"}
{"question": "What is the `Rust` `#[derive(Ord)]` attribute?", "answer": "Enables total ordering comparisons for a type."}
{"question": "How to create a `BTreeMap` in Rust?", "answer": "Use `BTreeMap::new()` from `std::collections`.\n```rust\nuse std::collections::BTreeMap;\nlet mut map = BTreeMap::new();\n```"}
{"question": "What is the `Rust` `#[derive(Eq)]` attribute?", "answer": "Enables equality comparisons for a type."}
{"question": "How to use the `Rust` `match` with `ref mut`?", "answer": "Borrows and allows mutation. Example:\n```rust\nmatch x {\n    ref mut y => *y = 5,\n}\n```"}
{"question": "What is the `Rust` `#[derive(Hash)]` attribute?", "answer": "Enables hashing for a type."}
{"question": "How to create a `LinkedList` in Rust?", "answer": "Use `LinkedList::new()` from `std::collections`.\n```rust\nuse std::collections::LinkedList;\nlet mut list = LinkedList::new();\n```"}
{"question": "What is the `Rust` `#[derive(Deserialize)]` attribute?", "answer": "Enables deserialization with Serde."}
{"question": "How to create a `BinaryHeap` in Rust?", "answer": "Use `BinaryHeap::new()` from `std::collections`.\n```rust\nuse std::collections::BinaryHeap;\nlet mut heap = BinaryHeap::new();\n```"}
{"question": "What is the `Rust` `#[derive(Serialize)]` attribute?", "answer": "Enables serialization with Serde."}
{"question": "How to use the `Rust` `?` operator in `?`-returning functions?", "answer": "Propagates errors automatically."}
{"question": "What is the `Rust` `#[derive(From)]` attribute?", "answer": "Enables conversion between types using `From` trait."}
{"question": "How to create a `HashSet` in Rust?", "answer": "Use `HashSet::new()` from `std::collections`.\n```rust\nuse std::collections::HashSet;\nlet mut set = HashSet::new();\n```"}
{"question": "What is the `Rust` `#[derive(Ord)]` trait?", "answer": "Provides total ordering for a type."}
{"question": "How to use the `Rust` `match` with `..`?", "answer": "Matches a range of values. Example:\n```rust\nmatch x {\n    1..=5 => println!(\"in range\"),\n    _ => println!(\"out of range\"),\n}\n```"}
{"question": "What is the `Rust` `#[derive(PartialEq)]` trait?", "answer": "Provides partial equality comparisons for a type."}
{"question": "How to create a `Vec` with repeated elements?", "answer": "Use `vec![value; count]`. Example:\n```rust\nlet v = vec![0; 5]; // [0,0,0,0,0]\n```"}
{"question": "What is the `Rust` `#[derive(Debug)]` trait?", "answer": "Allows printing with `dbg!()` or `println!` using `:?` format."}
{"question": "How to use the `Rust` `match` with `ref` and `mut`?", "answer": "Borrows and allows mutation. Example:\n```rust\nmatch x {\n    ref mut y => *y = 5,\n}\n```"}
{"question": "What is the `Rust` `#[derive(Clone)]` trait?", "answer": "Allows cloning of a type."}
{"question": "How to create a `HashMap` with initial key-value pairs?", "answer": "Use `hashmap![]` macro. Example:\n```rust\nuse std::collections::hashmap;\nlet map = hashmap!{\n    \"key\" => \"value\"\n};\n```"}
{"question": "What is the `Rust` `#[derive(Ord)]` trait?", "answer": "Provides total ordering for a type."}
{"question": "How to use the `Rust` `match` with `@` pattern?", "answer": "Binds a value to a variable. Example:\n```rust\nmatch x {\n    y @ 1..=5 => println!(\"range: {}\", y),\n    _ => println!(\"other\"),\n}\n```"}
{"question": "What is the `Rust` `#[derive(Eq)]` trait?", "answer": "Provides equality comparisons for a type."}
{"question": "How to create a `BTreeSet` in Rust?", "answer": "Use `BTreeSet::new()` from `std::collections`.\n```rust\nuse std::collections::BTreeSet;\nlet mut set = BTreeSet::new();\n```"}
{"question": "What is the `Rust` `#[derive(Hash)]` trait?", "answer": "Enables hashing for a type."}
{"question": "How to use the `Rust` `match` with `|` for multiple patterns?", "answer": "Matches any of the specified patterns. Example:\n```rust\nmatch x {\n    1 | 2 => println!(\"one or two\"),\n    _ => println!(\"other\"),\n}\n```"}
{"question": "What is the `Rust` `#[derive(From)]` trait?", "answer": "Enables conversion between types using `From`."}
{"question": "How to create a `BinaryHeap` with custom ordering?", "answer": "Implement `Ord` trait for the type."}
{"question": "What is the `Rust` `#[derive(Deserialize)]` trait?", "answer": "Enables deserialization with Serde."}
{"question": "How to create a `LinkedList` with initial elements?", "answer": "Use `LinkedList::from([1,2,3])`.\n```rust\nuse std::collections::LinkedList;\nlet list = LinkedList::from([1,2,3]);\n```"}
{"question": "What is the `Rust` `#[derive(Serialize)]` trait?", "answer": "Enables serialization with Serde."}
{"question": "What is the syntax for declaring a variable in Rust?", "answer": "let x = 5;"}
{"question": "How to declare a constant in Rust?", "answer": "const PI: f64 = 3.14159;"}
{"question": "What is the difference between 'let' and 'const'?", "answer": "'let' creates a variable, 'const' defines a compile-time constant. 'const' requires type annotation and is immutable by default."}
{"question": "What is Rust's ownership system?", "answer": "A set of rules that govern how memory is managed, ensuring no dangling pointers or data races without a runtime garbage collector."}
{"question": "How to create a mutable variable?", "answer": "let mut x = 5;"}
{"question": "What is the purpose of 'match' expressions?", "answer": "To handle multiple possible values of a variable with pattern matching."}
{"question": "How to define a function in Rust?", "answer": "fn add(a: i32, b: i32) -> i32 { a + b }"}
{"question": "What is a 'struct' in Rust?", "answer": "A custom data type that groups related values together."}
{"question": "How to create an enum in Rust?", "answer": "enum Color { Red, Green, Blue }"}
{"question": "What is the 'Option' type used for?", "answer": "To represent values that may be absent (Some(T) or None)."}
{"question": "How to handle errors in Rust?", "answer": "Using the 'Result' type (Ok(T) or Err(E)) and the '?' operator."}
{"question": "What is a 'trait' in Rust?", "answer": "A way to define shared behavior across different types."}
{"question": "How to implement a trait for a struct?", "answer": "impl MyTrait for MyStruct { ... }"}
{"question": "What is the 'self' keyword used for?", "answer": "To refer to the current instance in method definitions."}
{"question": "How to create a new thread?", "answer": "use std::thread; thread::spawn(|| { ... });"}
{"question": "What is 'Arc' in Rust?", "answer": "A thread-safe reference-counted pointer for shared ownership."}
{"question": "How to share data between threads?", "answer": "Use 'Arc<Mutex<T>>' for thread-safe mutable sharing."}
{"question": "What is the 'Rust' borrow checker?", "answer": "A compiler feature that enforces borrowing rules to prevent data races."}
{"question": "What is a 'lifetime' in Rust?", "answer": "A syntax to specify how long references are valid."}
{"question": "How to use a closure in Rust?", "answer": "fn main() { let add = |a, b| a + b; }"}
{"question": "What is the 'Vec' type?", "answer": "A dynamic array that can grow or shrink at runtime."}
{"question": "How to create a slice in Rust?", "answer": "&arr[1..3] to get a view of a subset of an array."}
{"question": "What is the 'Box' type used for?", "answer": "To allocate data on the heap and manage ownership."}
{"question": "How to use 'if let' for pattern matching?", "answer": "if let Some(x) = value { ... } to handle a single case."}
{"question": "What is the 'use' keyword for?", "answer": "To bring modules, types, or functions into scope."}
{"question": "How to handle panics in Rust?", "answer": "Using 'panic!' or 'unwrap()' to trigger a panic, but prefer 'match' for safe handling."}
{"question": "What is the 'pub' keyword used for?", "answer": "To make items public (visible outside the module)."}
{"question": "How to create a tuple in Rust?", "answer": "let point = (3, 4);"}
{"question": "What is the 'as' keyword used for?", "answer": "To cast values between types (e.g., 5 as f64)."}
{"question": "How to implement a trait for a type?", "answer": "impl Trait for Type { ... }"}
{"question": "What is the 'drop' trait?", "answer": "Allows custom cleanup logic when a value goes out of scope."}
{"question": "How to use 'match' with enums?", "answer": "match color { Color::Red => \"red\", _ => \"other\" }"}
{"question": "What is the 'Result' type?", "answer": "A generic type for success (Ok) or error (Err) values."}
{"question": "How to create a static variable?", "answer": "static X: i32 = 5; (must be compile-time constant)."}
{"question": "What is the 'as_ref' method?", "answer": "Converts a Box<T> to a &T without consuming the Box."}
{"question": "How to use 'while let' for iteration?", "answer": "while let Some(x) = iter.next() { ... }"}
{"question": "What is the 'copy' trait?", "answer": "Allows types to be copied instead of moved when assigned."}
{"question": "How to use 'ref' in pattern matching?", "answer": "Matches a reference instead of moving the value (e.g., match &x { ref y => ... })."}
{"question": "What is the 'Send' trait?", "answer": "Marks a type as safe to send between threads."}
{"question": "How to use 'thread::join()'?", "answer": "Waits for a thread to finish execution (e.g., handle.join().unwrap())."}
{"question": "What is the 'Rust' package manager?", "answer": "Cargo, used for building, testing, and managing dependencies."}
{"question": "How to create a vector with initial values?", "answer": "vec![1, 2, 3]"}
{"question": "What is the 'as_str()' method?", "answer": "Converts a String to a &str (e.g., s.as_str())."}
{"question": "How to use 'match' with 'Option'?", "answer": "match opt { Some(x) => x, None => 0 }"}
{"question": "What is the 'Rust' module system?", "answer": "Organizes code into namespaces using 'mod' and 'use'."}
{"question": "How to create a reference to a variable?", "answer": "&x to get a immutable reference, &mut x for mutable."}
{"question": "What is the 'Rust' 'if let' syntax?", "answer": "A concise way to handle a single pattern in an 'if' condition."}
{"question": "How to use 'ref mut' in patterns?", "answer": "Matches a mutable reference (e.g., match &mut x { ref mut y => ... })."}
{"question": "What is the 'Rust' 'drop' trait?", "answer": "Allows custom cleanup when a value is no longer in use."}
{"question": "How to create a thread-safe counter?", "answer": "use std::sync::{Arc, Mutex}; let counter = Arc::new(Mutex::new(0));"}
{"question": "What is the 'Rust' 'lifetime' syntax?", "answer": "'a specifies how long a reference is valid (e.g., fn foo<'a>(x: &'a i32) -> &'a i32 { x }."}
{"question": "How to use 'Rust' macros?", "answer": "macro_rules! my_macro { ... } or using built-in macros like println!."}
{"question": "What is the 'Rust' 'Box' type?", "answer": "A smart pointer that allocates data on the heap."}
{"question": "How to use 'Rust' 'as' for type casting?", "answer": "5 as f64 converts an i32 to a f64."}
{"question": "What is the 'Rust' 'impl' block?", "answer": "Used to define methods for a type (struct or enum)."}
{"question": "How to create a function that returns a closure?", "answer": "fn make_adder(x: i32) -> Box<dyn Fn(i32) -> i32> { Box::new(move |y| x + y) }"}
{"question": "What is the 'Rust' 'move' keyword in closures?", "answer": "Forces the closure to take ownership of captured variables."}
{"question": "How to use 'Rust' 'thread::spawn' with data?", "answer": "thread::spawn(move || { ... }) to move data into the thread."}
{"question": "What is the 'Rust' 'Mutex' type?", "answer": "A mutual exclusion lock for thread-safe data access."}
{"question": "How to use 'Rust' 'Arc' with 'Mutex'?", "answer": "Arc<Mutex<T>> for shared ownership and thread-safe mutation."}
{"question": "What is the 'Rust' 'lifetime' elision rules?", "answer": "Rules that allow the compiler to infer lifetimes in common cases."}
{"question": "How to create a static mutable variable?", "answer": "static mut X: i32 = 5; (requires unsafe block to access)."}
{"question": "What is the 'Rust' 'lifetime' parameter?", "answer": "Specifies the scope of references (e.g., 'a in fn foo<'a>(x: &'a i32))."}
{"question": "How to use 'Rust' 'match' with multiple patterns?", "answer": "match x { 1 | 2 => \"one or two\", _ => \"other\" }"}
{"question": "What is the 'Rust' 'as_ref' method?", "answer": "Converts a Box<T> to a &T without consuming the Box."}
{"question": "How to use 'Rust' 'if let' with 'None'?", "answer": "if let None = opt { ... } to handle absence."}
{"question": "What is the 'Rust' 'Send' trait?", "answer": "Indicates a type can be safely sent to another thread."}
{"question": "How to use 'Rust' 'thread::join'?", "answer": "handle.join().unwrap() waits for the thread to finish."}
{"question": "What is the 'Rust' 'Copy' trait?", "answer": "Allows values to be copied instead of moved (e.g., i32 implements Copy)."}
{"question": "How to create a thread-safe vector?", "answer": "use std::sync::Mutex; let vec = Mutex::new(vec![1, 2, 3]);"}
{"question": "What is the 'Rust' 'as_str' method?", "answer": "Converts a String to a &str (e.g., s.as_str())."}
{"question": "How to use 'Rust' 'ref' in patterns?", "answer": "Matches a reference instead of moving the value (e.g., match &x { ref y => ... })."}
{"question": "What is the 'Rust' 'lifetime' annotation?", "answer": "Specifies the relationship between references (e.g., 'a in fn foo<'a>(x: &'a i32))."}
{"question": "How to use 'Rust' 'move' in closures?", "answer": "Forces the closure to take ownership of captured variables."}
{"question": "What is the 'Rust' 'Box' smart pointer?", "answer": "Allocates data on the heap and provides owned access."}
{"question": "How to create a function that returns a closure?", "answer": "fn make_adder(x: i32) -> Box<dyn Fn(i32) -> i32> { Box::new(move |y| x + y) }"}
{"question": "What is the 'Rust' 'as' type cast?", "answer": "Converts between types (e.g., 5 as f64)."}
{"question": "How to use 'Rust' 'impl' for traits?", "answer": "impl Trait for Type { ... } to provide trait methods."}
{"question": "What is the 'Rust' 'match' arm syntax?", "answer": "Each arm has a pattern and an expression (e.g., 1 => 2, _ => 3)."}
{"question": "How to use 'Rust' 'if let' with 'Some'?", "answer": "if let Some(x) = opt { ... } to handle presence."}
{"question": "What is the 'Rust' 'Send' and 'Sync' traits?", "answer": "'Send' allows types to be moved between threads, 'Sync' allows shared references across threads."}
{"question": "How to create a thread-safe counter with 'Arc'?", "answer": "use std::sync::{Arc, Mutex}; let counter = Arc::new(Mutex::new(0));"}
{"question": "What is the 'Rust' 'lifetime' elision?", "answer": "Compiler infers lifetimes in common cases, like function parameters."}
{"question": "What is the difference between 'let' and 'const' in Rust?", "answer": "'let' declares a variable (mutable by default), while 'const' defines an immutable constant. Constants must have a type specified and are evaluated at compile time."}
{"question": "How do you create a mutable variable in Rust?", "answer": "Use 'let mut variable_name = value;' to declare a mutable variable."}
{"question": "What is the purpose of the 'match' expression?", "answer": "It allows pattern matching against a value, enabling exhaustive checks for enums, tuples, and other types."}
{"question": "Explain Rust's ownership system.", "answer": "Ownership governs memory management. Each value has a single owner, and when the owner goes out of scope, the value is dropped. Moves transfer ownership, while borrows allow temporary access."}
{"question": "What is a 'lifetime' in Rust?", "answer": "A lifetime specifies how long references are valid. It helps the compiler ensure references don't outlive the data they point to."}
{"question": "How do you handle panics in Rust?", "answer": "Use 'panic!' to trigger a panic. For recovery, use 'Result' types or 'catch_unwind' in threads."}
{"question": "What is the 'Option' type used for?", "answer": "It represents optional values (Some(T) or None), avoiding null pointers and ensuring safety."}
{"question": "How do you define a function in Rust?", "answer": "Use 'fn function_name(parameters) -> return_type { ... }'. Example: ```rust fn add(a: i32, b: i32) -> i32 { a + b }```"}
{"question": "What is the 'Result' type and when is it used?", "answer": "'Result<T, E>' represents success (Ok(T)) or failure (Err(E)). Used for error handling in functions that may fail."}
{"question": "How to create a vector in Rust?", "answer": "Use 'Vec::new()' or the vec! macro. Example: ```rust let v = vec![1, 2, 3];```"}
{"question": "What is the difference between 'Vec' and 'array'?", "answer": "'Vec' is a dynamic, heap-allocated list. 'array' is a fixed-size, stack-allocated collection."}
{"question": "How to use the 'if let' syntax?", "answer": "'if let PATTERN = EXPR' checks if a value matches a pattern, ignoring others. Example: ```rust if let Some(x) = value { ... }```"}
{"question": "What is the 'Box' type used for?", "answer": "'Box<T>' provides heap allocation for values. Useful for owned pointers and trait objects."}
{"question": "How to implement a trait for a type?", "answer": "Use 'impl Trait for Type { ... }'. Example: ```rust impl Display for MyStruct { ... }```"}
{"question": "What is the 'Rc' type and when to use it?", "answer": "'Rc<T>' (Reference Counted) allows multiple ownership of a value on the same thread. Use for shared, immutable data."}
{"question": "How to iterate over a collection with 'for'?", "answer": "Use 'for item in collection { ... }'. Example: ```rust for i in 0..5 { println!(\"{}\", i); }```"}
{"question": "What is the 'as_ref' method used for?", "answer": "Converts a value into a reference. For example, 'String::as_ref()' returns a '&str'."}
{"question": "How to create a new thread in Rust?", "answer": "Use 'std::thread::spawn(|| { ... })'. Example: ```rust std::thread::spawn(|| { println!(\"Hello\"); });```"}
{"question": "What is the 'Arc' type and how does it differ from 'Rc'?", "answer": "'Arc<T>' (Atomic Reference Counted) allows shared ownership across threads, while 'Rc<T>' is for single-threaded use."}
{"question": "How to use the 'unwrap' method on an Option?", "answer": "'unwrap()' returns the value inside Some, panics if None. Example: ```rust let x = Some(5).unwrap();```"}
{"question": "What is the 'pub' keyword used for?", "answer": "Marks items (functions, structs, etc.) as public, making them accessible from other modules."}
{"question": "How to use the 'use' statement to import modules?", "answer": "'use module::Item;' brings items into scope. Example: ```rust use std::collections::HashMap;```"}
{"question": "What is the 'self' keyword in Rust?", "answer": "'self' refers to the current type in method definitions. 'Self' is the type alias."}
{"question": "How to define a constant in Rust?", "answer": "Use 'const NAME: TYPE = value;' with a type annotation. Example: ```rust const MAX: u8 = 100;```"}
{"question": "What is the 'lifetime' parameter in function signatures?", "answer": "Specifies how long references in the function are valid. Example: ```rust fn longest<'a>(s1: &'a str, s2: &'a str) -> &'a str { ... }```"}
{"question": "How to use the 'match' expression with enums?", "answer": "Matches against enum variants. Example: ```rust match value { Enum::Variant => ... }```"}
{"question": "What is the 'RefCell' type used for?", "answer": "'RefCell<T>' allows mutable borrowing with runtime checks. Useful for single-threaded interior mutability."}
{"question": "How to create a slice in Rust?", "answer": "Use 'slice[start..end]' or 'array.as_slice()'. Example: ```rust let s = &arr[1..3];```"}
{"question": "What is the 'impl' block used for?", "answer": "Defines methods for a type. Example: ```rust impl MyStruct { fn new() -> Self { ... } }```"}
{"question": "How to use the 'as_mut' method?", "answer": "'as_mut()' converts a 'Box<T>' into a '&mut T'. Example: ```rust let mut x = Box::new(5); x.as_mut();```"}
{"question": "What is the 'panic!' macro used for?", "answer": "Causes the current thread to panic, unwinding the stack and terminating the program unless caught."}
{"question": "How to use the 'try!' macro?", "answer": "'try!' propagates errors from a Result. If Err, returns it from the function. Example: ```rust let x = try!(some_result);```"}
{"question": "What is the 'thread::spawn' function?", "answer": "Creates a new thread. Example: ```rust std::thread::spawn(|| { ... });```"}
{"question": "How to use the 'Mutex' type for thread safety?", "answer": "'Mutex<T>' allows shared mutable access across threads. Use 'lock()' to acquire the guard. Example: ```rust let m = Mutex::new(5); let mut data = m.lock().unwrap();```"}
{"question": "What is the 'Box::new' function used for?", "answer": "Allocates a value on the heap and returns a Box. Example: ```rust let b = Box::new(42);```"}
{"question": "How to use the 'Option::is_none' method?", "answer": "'is_none()' returns true if the Option is None. Example: ```rust if some_val.is_none() { ... }```"}
{"question": "What is the 'Result::ok' method?", "answer": "'ok()' converts a Result to an Option, returning Some if Ok, None if Err."}
{"question": "How to use the 'Vec::push' method?", "answer": "'push()' adds an element to the end of a Vec. Example: ```rust let mut v = Vec::new(); v.push(1);```"}
{"question": "What is the 'array' type in Rust?", "answer": "'[T; N]' is a fixed-size array. Example: ```rust let a: [i32; 3] = [1, 2, 3];```"}
{"question": "How to use the 'for' loop with ranges?", "answer": "Iterate with 'for i in 0..5 { ... }' or 'for i in 0..=5 { ... }' for inclusive ranges."}
{"question": "What is the 'Rc::clone' function?", "answer": "'Rc::clone()' increments the reference count. Example: ```rust let rc = Rc::new(5); let clone = Rc::clone(&rc);```"}
{"question": "How to use the 'match' expression with patterns?", "answer": "Matches values against patterns. Example: ```rust match x { 1 => \"one\", _ => \"other\" }```"}
{"question": "What is the 'RefCell::borrow_mut' method?", "answer": "'borrow_mut()' provides mutable access to a RefCell's contents. Panics if already borrowed."}
{"question": "How to use the 'thread::join' function?", "answer": "'join()' waits for a thread to finish. Example: ```rust let handle = thread::spawn(...); handle.join().unwrap();```"}
{"question": "What is the 'Box::leak' function?", "answer": "'Box::leak()' converts a Box into a raw pointer, preventing deallocation. Use with caution."}
{"question": "How to use the 'Option::unwrap_or' method?", "answer": "'unwrap_or(default)' returns the value or the default if None. Example: ```rust let x = opt.unwrap_or(0);```"}
{"question": "What is the 'Result::err' method?", "answer": "'err()' converts a Result to an Option, returning Some if Err, None if Ok."}
{"question": "How to use the 'Vec::pop' method?", "answer": "'pop()' removes and returns the last element. Example: ```rust let last = vec.pop();```"}
{"question": "What is the 'array' length in Rust?", "answer": "The length is fixed and specified at compile time. Access with '.len()' method."}
{"question": "How to use the 'async' keyword in Rust?", "answer": "Declares an async function. Example: ```rust async fn my_async() { ... }```"}
{"question": "What is the 'await' operator used for?", "answer": "'await' suspends execution until a future resolves. Example: ```rust let result = my_async().await;```"}
{"question": "How to share data between threads safely?", "answer": "Use 'Arc<T>' for reference counting or 'Mutex<T>' for mutual exclusion."}
{"question": "What is the 'Send' trait?", "answer": "'Send' indicates a type can be safely sent between threads. Most types implement it by default."}
{"question": "How to create a channel for thread communication?", "answer": "Use 'std::sync::mpsc::channel()'. Example: ```rust let (tx, rx) = mpsc::channel();```"}
{"question": "What is the 'Drop' trait?", "answer": "Allows custom cleanup when a value goes out of scope. Implement 'drop(&mut self)'."}
{"question": "How to use the 'match' expression with multiple patterns?", "answer": "Combine patterns with '|'. Example: ```rust match x { 1 | 2 => \"one or two\", _ => \"other\" }```"}
{"question": "What is the 'Deref' trait?", "answer": "Enables dereferencing with the * operator. Implement 'deref()' to return a reference."}
{"question": "How to use the 'as_ref' method on a Box?", "answer": "'as_ref()' converts a Box<T> into a &T. Example: ```rust let b = Box::new(5); let r = b.as_ref();```"}
{"question": "What is the 'thread_local!' macro?", "answer": "Declares a thread-local variable. Each thread gets its own instance."}
{"question": "How to use the 'try!' macro with Result?", "answer": "'try!' returns Err if the Result is Err. Example: ```rust let x = try!(some_result);```"}
{"question": "What is the 'Once' type in Rust?", "answer": "'Once' ensures a block of code runs exactly once. Used with 'OnceLock' for lazy initialization."}
{"question": "How to use the 'iter()' method on a Vec?", "answer": "'iter()' returns an iterator over references. Example: ```rust for item in vec.iter() { ... }```"}
{"question": "What is the 'Iterator' trait?", "answer": "Defines the 'next()' method for iterating. Implement it to create custom iterators."}
{"question": "How to use the 'map' method on an Option?", "answer": "'map()' applies a function to the Some value. Example: ```rust let x = Some(5).map(|i| i * 2);```"}
{"question": "What is the 'Result' type's 'map_err' method?", "answer": "'map_err()' transforms the Err variant. Example: ```rust let res = Ok(5).map_err(|e| e.to_string());```"}
{"question": "How to use the 'into_iter()' method on a Vec?", "answer": "'into_iter()' consumes the Vec and yields its elements. Example: ```rust for item in vec.into_iter() { ... }```"}
{"question": "What is the 'static' lifetime?", "answer": "'static' indicates a reference that lives for the entire program. Used for string literals."}
{"question": "How to use the 'where' clause in trait bounds?", "answer": "'where' clarifies complex trait bounds. Example: ```rust fn foo<T: Trait + Clone> where T: Debug { ... }```"}
{"question": "What is the 'PhantomData' type?", "answer": "'PhantomData' is a marker type for generic parameters. Used to indicate ownership without data."}
{"question": "How to use the 'derive' attribute for traits?", "answer": "'derive' automatically implements traits. Example: ```rust #[derive(Debug)] struct MyStruct;```"}
{"question": "What is the 'default' trait?", "answer": "'Default' provides a default value. Implement 'default()' to set it. Example: ```rust impl Default for MyStruct { fn default() -> Self { ... } }```"}
{"question": "How to use the 'From' trait for type conversion?", "answer": "'From' allows conversion from another type. Example: ```rust impl From<i32> for MyType { fn from(i: i32) -> Self { ... } }```"}
{"question": "What is the 'Into' trait?", "answer": "'Into' is the inverse of 'From'. Implement 'into()' to convert to another type."}
{"question": "How to use the 'try_from' method for type conversion?", "answer": "'try_from()' returns a Result. Example: ```rust let x = MyType::try_from(5);```"}
{"question": "What is the 'Sized' trait?", "answer": "'Sized' indicates a type has a known size at compile time. Most types implement it."}
{"question": "How to use the 'dyn' keyword for trait objects?", "answer": "'dyn Trait' creates a trait object. Example: ```rust let obj: Box<dyn Trait> = Box::new(MyStruct);```"}
{"question": "What is the 'Sync' trait?", "answer": "'Sync' indicates a type can be safely shared between threads. Most types implement it."}
{"question": "How to use the 'crossbeam' crate for concurrency?", "answer": "Provides scoped threads and channels. Example: ```rust crossbeam::scope(|scope| { ... });```"}
{"question": "What is the 'join' method for threads?", "answer": "'join()' waits for a thread to complete. Returns a Result with its output."}
{"question": "How to use the 'channel' function in 'std::sync::mpsc'?", "answer": "Creates a channel for sending and receiving values. Example: ```rust let (tx, rx) = mpsc::channel();```"}
{"question": "What is the 'MutexGuard' type?", "answer": "'MutexGuard' is the guard returned by 'Mutex::lock()'. Automatically released when dropped."}
{"question": "How to use the 'Arc::clone' function?", "answer": "'Arc::clone()' increments the reference count. Example: ```rust let arc = Arc::new(5); let clone = Arc::clone(&arc);```"}
{"question": "What is the 'thread::available_parallelism' function?", "answer": "Returns the number of logical cores available. Useful for parallel processing."}
{"question": "How to use the 'thread::sleep' function?", "answer": "'thread::sleep(Duration::from_secs(1))' pauses the current thread for 1 second."}
{"question": "What is the 'once_cell' crate used for?", "answer": "Provides lazy initialization with 'OnceCell'. Example: ```rust static CELL: OnceCell<i32> = OnceCell::new();```"}
{"question": "How to use the 'lazy_static' macro?", "answer": "'lazy_static!' creates static variables with lazy initialization. Example: ```rust lazy_static! { static ref X: i32 = 5; }```"}
{"question": "What is the 'crossbeam-channel' crate?", "answer": "Provides channels for safe concurrency. Example: ```rust let (s, r) = unbounded();```"}
{"question": "How to use the 'scoped' function in 'crossbeam'?", "answer": "'crossbeam::scope' creates a thread that borrows data from the parent. Example: ```rust crossbeam::scope(|scope| { ... });```"}
{"question": "What is the 'thread_local' macro?", "answer": "Declares a thread-local variable. Each thread has its own instance."}
{"question": "How to use the 'thread::spawn' function with a closure?", "answer": "Pass a closure to 'spawn'. Example: ```rust std::thread::spawn(move || { ... });```"}
{"question": "What is the 'RwLock' type?", "answer": "'RwLock<T>' allows shared or exclusive access. Use 'read()' for shared, 'write()' for exclusive."}
{"question": "How to use the 'try_lock' method on a RwLock?", "answer": "'try_lock()' attempts to acquire the lock without blocking. Returns a Result."}
{"question": "What is the 'thread::current' function?", "answer": "'thread::current()' returns the current thread's id. Useful for debugging."}
{"question": "How to use the 'thread::Builder' for custom threads?", "answer": "Configure threads with 'thread::Builder'. Example: ```rust thread::Builder::new().spawn(|| { ... })?;```"}
{"question": "What is the 'thread::panicking' function?", "answer": "'thread::panicking()' returns true if the current thread is panicking."}
{"question": "What is the default integer type in Rust?", "answer": "The default is 'i32'."}
{"question": "How do you declare a constant in Rust?", "answer": "Using 'const' keyword, e.g., 'const PI: f64 = 3.14;'."}
{"question": "What is the difference between 'let' and 'const'?", "answer": "'let' creates a variable, 'const' defines a compile-time constant. Variables can be mutable with 'mut'; constants are always immutable."}
{"question": "How to create a mutable variable?", "answer": "Use 'let mut x = 5;'."}
{"question": "What is the purpose of 'match' in Rust?", "answer": "To handle multiple possible values of an expression, similar to switch in other languages."}
{"question": "How to define a function with multiple parameters?", "answer": "Function parameters are separated by commas, e.g., 'fn add(a: i32, b: i32) -> i32 { a + b }'."}
{"question": "What is the 'pub' keyword used for?", "answer": "To make a function, struct, or module public (accessible from other crates)."}
{"question": "How to handle panics in Rust?", "answer": "Use 'panic!' macro, but prefer 'Result' or 'Option' for error handling."}
{"question": "What is the 'Option' enum?", "answer": "Represents an optional value, either 'Some(T)' or 'None'."}
{"question": "How to create a struct?", "answer": "Use 'struct' keyword, e.g., 'struct Point { x: i32, y: i32 };'."}
{"question": "What is a 'tuple'?", "answer": "A collection of values with fixed size and types, e.g., '(1, \"a\")'."}
{"question": "How to create a vector?", "answer": "Use 'vec![1, 2, 3]' or 'Vec::new()' with 'push' method."}
{"question": "What is the 'if let' syntax?", "answer": "Matches a single pattern and executes code if it matches, ignoring others."}
{"question": "What is 'borrowing' in Rust?", "answer": "Referring to a value without taking ownership, using '&' or '&&'."}
{"question": "How to implement a trait for a struct?", "answer": "Use 'impl Trait for Struct { ... }', e.g., 'impl ToString for Point { ... }'."}
{"question": "What is the 'Box' type used for?", "answer": "To allocate data on the heap, e.g., 'let b = Box::new(5);'."}
{"question": "What is 'lifetime' in Rust?", "answer": "A way to ensure references are valid for the correct duration, preventing dangling references."}
{"question": "How to use 'as_ref' in Rust?", "answer": "Converts a 'Box<T>' to a '&T', e.g., 'let s: String = \"hello\".to_string(); let s_ref: &str = s.as_ref();'."}
{"question": "What is the 'Result' type?", "answer": "Represents success ('Ok') or failure ('Err'), used for error handling."}
{"question": "How to create a thread?", "answer": "Use 'thread::spawn()', e.g., 'thread::spawn(|| { println!(\"Hello\"); });'."}
{"question": "What is 'RwLock'?", "answer": "A synchronization primitive allowing multiple readers or one writer at a time."}
{"question": "How to use 'async/await'?", "answer": "Define an async function with 'async fn', then use 'await' on futures."}
{"question": "What is 'Arc<T>'?", "answer": "'Arc<T>' provides shared ownership across threads with atomic reference counting."}
{"question": "How to handle errors with 'Result'?", "answer": "Use 'match' or 'if let' to handle 'Ok' or 'Err' variants."}
{"question": "What is the 'derive' attribute?", "answer": "Automatically implements common traits like 'Debug', 'Clone', or 'PartialEq'."}
{"question": "How to use 'match' with enums?", "answer": "Pattern match on enum variants, e.g., 'match color { Color::Red => ... }'."}
{"question": "What is 'ownership' in Rust?", "answer": "Rust's system for managing memory, ensuring unique ownership of values."}
{"question": "How to use 'iter()' vs 'into_iter()'?", "answer": "'iter()' borrows elements, 'into_iter()' consumes the collection."}
{"question": "What is 'trait object'?", "answer": "A dynamic type that allows using a trait as a value, e.g., 'Box<dyn Trait>'."}
{"question": "How to use 'try_from' method?", "answer": "Converts from another type, returning a 'Result', e.g., 'u8::try_from(256)'."}
{"question": "What is 'lifetime elision'?", "answer": "Rust's rules to infer lifetimes automatically in common cases."}
{"question": "How to use 'thread::join'?", "answer": "Waits for a thread to finish, e.g., 'handle.join().unwrap()'."}
{"question": "What is 'Send' trait?", "answer": "'Send' indicates a type can be safely transferred between threads."}
{"question": "How to use 'match' with 'Option'?", "answer": "Handle 'Some' and 'None' cases, e.g., 'match opt { Some(x) => x, None => 0 }'."}
{"question": "What is 'borrow checker'?", "answer": "Rust's compiler component that enforces borrowing rules at compile time."}
{"question": "How to use 'as_mut'?", "answer": "Converts a 'Box<T>' to a '&mut T', e.g., 'let mut b = Box::new(5); let m = b.as_mut();'."}
{"question": "What is 'lifetime parameter'?", "answer": "A generic parameter specifying reference validity, e.g., 'fn foo<'a>(x: &'a i32) -> &'a i32'."}
{"question": "How to use 'crossbeam' crate?", "answer": "Provides synchronization primitives like 'crossbeam_channel' for thread communication."}
{"question": "What is 'async' function?", "answer": "A function that returns a future, allowing non-blocking execution with 'await'."}
{"question": "How to use 'RefCell'?", "answer": "'RefCell<T>' allows interior mutability with runtime borrow checking."}
{"question": "What is 'panic! macro'?", "answer": "Causes a runtime panic, used for unrecoverable errors."}
{"question": "How to use 'match' with 'Result'?", "answer": "Handle 'Ok' and 'Err' variants, e.g., 'match result { Ok(x) => x, Err(e) => e }'."}
{"question": "What is 'module' in Rust?", "answer": "A way to organize code into namespaces, using 'mod' keyword."}
{"question": "How to use 'use' keyword?", "answer": "Brings items into scope, e.g., 'use std::collections::HashMap;'."}
{"question": "What is 'pattern matching'?", "answer": "A way to destructure and match values against patterns in 'match' expressions."}
{"question": "How to use 'as' keyword?", "answer": "Converts types, e.g., 'let x: u8 = 100_i32 as u8;'."}
{"question": "What is 'trait'?", "answer": "A way to define shared behavior for types, using 'trait' keyword."}
{"question": "How to use 'where' clause in generics?", "answer": "Specifies trait bounds for generic parameters, e.g., 'fn foo<T: Display + Clone>()'."}
{"question": "What is 'lifetime bound'?", "answer": "A constraint on a lifetime parameter, e.g., 'fn foo<'a, T: 'a>()'."}
{"question": "How to use 'thread_local!' macro?", "answer": "Declares a thread-local variable, accessible only in the thread it was created."}
{"question": "What is 'channel' in Rust concurrency?", "answer": "A communication mechanism between threads, e.g., 'mpsc::channel()'."}
{"question": "How to use 'once_cell' crate?", "answer": "Provides lazy initialization for static variables, e.g., 'once_cell::sync::Lazy'."}
{"question": "What is 'thread::spawn' used for?", "answer": "Creates a new thread, executing the provided closure."}
{"question": "How to use 'Mutex<T>'?", "answer": "'Mutex<T>' allows safe shared mutable access across threads with 'lock()'."}
{"question": "What is 'async_std' crate?", "answer": "Provides asynchronous primitives for Rust, similar to 'tokio' or 'async-std'."}
{"question": "How to use 'try' in Rust?", "answer": "Used with 'Result' to propagate errors, e.g., 'fn foo() -> Result<_, _> { let x = try!(bar()); }'."}
{"question": "What is 'lifetime parameter in function?", "answer": "Specifies how long a reference is valid, e.g., 'fn longest<'a>(s1: &'a str, s2: &'a str) -> &'a str'."}
{"question": "How to use 'Box<dyn Trait>'?", "answer": "Creates a trait object for dynamic dispatch, e.g., 'let obj: Box<dyn Debug> = Box::new(5);'."}
{"question": "What is 'non-lexical lifetimes'?", "answer": "Rust's system to track variable lifetimes more precisely than lexical scope."}
{"question": "How to use 'thread::current()' function?", "answer": "Returns the current thread's handle, e.g., 'thread::current().id()'."}
{"question": "What is 'RwLockWriteGuard'?", "answer": "A guard returned by 'RwLock::write()', allowing exclusive write access."}
{"question": "How to use 'once_cell::sync::Lazy'?", "answer": "Initializes a static variable lazily, e.g., 'static X: Lazy<i32> = Lazy::new(|| 42);'."}
{"question": "What is 'Send' and 'Sync' traits?", "answer": "'Send' allows type to be sent between threads, 'Sync' allows shared access across threads."}
{"question": "How to use 'thread::sleep'?", "answer": "Pauses the current thread, e.g., 'thread::sleep(Duration::from_secs(1))'."}
{"question": "What is 'future' in Rust?", "answer": "An object representing asynchronous computation, used with 'async/await'."}
{"question": "How to use 'try_lock' on a Mutex?", "answer": "'try_lock()' attempts to acquire a lock without blocking, returning 'None' if unavailable."}
{"question": "What is 'channel' in Rust?", "answer": "A way to send and receive values between threads, e.g., 'let (tx, rx) = mpsc::channel();'."}
{"question": "How to use 'thread::scoped'?", "answer": "Creates a thread that returns a value, e.g., 'thread::scoped(|| { 42 })'."}
{"question": "What is 'thread-local storage'?", "answer": "A way to store data specific to a thread, using 'thread_local!' macro."}
{"question": "How to use 'await' in async functions?", "answer": "Waits for a future to resolve, e.g., 'let result = async_task.await;'."}
{"question": "What is 'crossbeam-channel'?", "answer": "A crate providing channels for thread communication, e.g., 'unbounded()' for unbounded channels."}
{"question": "How to use 'Arc<Mutex<T>>'?", "answer": "Combines 'Arc' for shared ownership and 'Mutex' for thread-safe mutability."}
{"question": "What is 'Rust's 'move' closure?", "answer": "A closure that takes ownership of its environment, e.g., 'thread::spawn(move || { ... })'."}
{"question": "How to use 'join_handle'?", "answer": "'join()' returns a 'JoinHandle', which can be used to wait for a thread's completion."}
{"question": "What is 'Rust's 'static' keyword?", "answer": "'static' indicates a reference has the same lifetime as the program, e.g., 'static STR: &str = \"hello\";'."}
{"question": "How to use 'try_join'?", "answer": "'try_join()' waits for multiple threads, returning the first error if any."}
{"question": "What is 'Rust's 'select!' macro?", "answer": "'select!' waits for multiple asynchronous operations, executing the first to complete."}
{"question": "How to use 'RwLockReadGuard'?", "answer": "A guard returned by 'RwLock::read()', allowing shared read access."}
{"question": "What is 'Rust's 'async-std' crate?", "answer": "Provides asynchronous I/O and concurrency utilities for Rust."}
{"question": "What is the syntax for declaring a variable in Rust?", "answer": "let x = 5;"}
{"question": "How to declare a mutable variable?", "answer": "let mut x = 5;"}
{"question": "What is the difference between 'let' and 'const'?", "answer": "'let' creates a variable, 'const' defines a compile-time constant."}
{"question": "What data type is used for 32-bit integers?", "answer": "i32"}
{"question": "How to create a string slice?", "answer": "let s = \"hello\";"}
{"question": "What is the purpose of the 'mut' keyword?", "answer": "To indicate a variable is mutable."}
{"question": "How to print to the console?", "answer": "println!(\"Hello, world!\");"}
{"question": "What is a 'match' expression used for?", "answer": "To compare a value against patterns."}
{"question": "How to define a function?", "answer": "fn add(a: i32, b: i32) -> i32 { a + b }"}
{"question": "What is the 'Option' enum used for?", "answer": "To represent optional values (Some or None)."}
{"question": "How to handle errors with 'Result'?", "answer": "Use match or ? operator to handle Ok/Err variants."}
{"question": "What is the 'Copy' trait?", "answer": "Enables values to be duplicated instead of moved."}
{"question": "How to create a vector?", "answer": "let v = vec![1, 2, 3];"}
{"question": "What is a 'struct'?", "answer": "A custom data type with named fields."}
{"question": "How to access struct fields?", "answer": "Use dot notation: my_struct.field"}
{"question": "What is the 'impl' block for?", "answer": "To define methods for a type."}
{"question": "How to define a constant?", "answer": "const MAX: u8 = 255;"}
{"question": "What is the 'use' keyword for?", "answer": "To bring modules into scope."}
{"question": "How to create a thread?", "answer": "std::thread::spawn(|| { /* code */ });"}
{"question": "What is the 'Box' type used for?", "answer": "For heap allocation of values."}
{"question": "How to handle panics?", "answer": "Use 'panic!' macro or 'catch_unwind' from std::panic."}
{"question": "What is the 'as' keyword for?", "answer": "For type casting: x as u32"}
{"question": "How to create a tuple?", "answer": "let t = (1, \"a\");"}
{"question": "What is the 'self' keyword in methods?", "answer": "Refers to the current instance of a type."}
{"question": "How to use a 'for' loop?", "answer": "for i in 0..5 { /* code */ }"}
{"question": "What is the 'if let' construct?", "answer": "To handle a single pattern match case."}
{"question": "How to define a trait?", "answer": "trait MyTrait { fn method(&self); }"}
{"question": "What is the 'lifetime' annotation?", "answer": "To specify how long a reference is valid."}
{"question": "How to use 'match' with enums?", "answer": "Match on variants: match e { Enum::Variant => ... }"}
{"question": "What is the 'pub' keyword?", "answer": "Makes a item public (visible outside module)."}
{"question": "How to create a hashmap?", "answer": "use std::collections::HashMap; let mut h = HashMap::new();"}
{"question": "What is the 'drop' trait?", "answer": "Allows custom cleanup when a value is dropped."}
{"question": "How to use 'as_ref' or 'as_mut'?", "answer": "Converts a Box to a reference: box.as_ref()"}
{"question": "What is the 'Rust' ownership system?", "answer": "Manages memory by ensuring unique ownership of values."}
{"question": "How to use 'iter()' on a vector?", "answer": "Iterates over elements: for &item in v.iter() { ... }"}
{"question": "What is a 'closure'?", "answer": "An anonymous function that can capture its environment."}
{"question": "How to use 'match' with 'Option'?", "answer": "Handle Some and None variants: match opt { Some(x) => ..., None => ... }"}
{"question": "What is the 'static' keyword?", "answer": "Declares a static variable with a fixed address."}
{"question": "How to use 'ref' in pattern matching?", "answer": "To borrow a value instead of moving it: match x { ref y => ... }"}
{"question": "What is the 'Result' type?", "answer": "Represents success (Ok) or failure (Err) outcomes."}
{"question": "How to use 'thread::join()'?", "answer": "Waits for a thread to finish: thread.join().unwrap()"}
{"question": "What is the 'Send' trait?", "answer": "Marks types safe to send between threads."}
{"question": "How to use 'Arc' for shared ownership?", "answer": "Use std::sync::Arc: let a = Arc::new(data);"}
{"question": "What is the 'Sync' trait?", "answer": "Marks types safe to share between threads."}
{"question": "How to use 'Mutex' for thread safety?", "answer": "std::sync::Mutex: let m = Mutex::new(0); let guard = m.lock();"}
{"question": "What is 'async/await' in Rust?", "answer": "Asynchronous programming syntax for non-blocking code."}
{"question": "How to create an async function?", "answer": "async fn my_func() { /* code */ }"}
{"question": "What is a 'channel' in concurrency?", "answer": "Communication between threads: std::sync::mpsc::channel()"}
{"question": "How to use 'match' with 'Result'?", "answer": "Handle Ok and Err: match res { Ok(v) => ..., Err(e) => ... }"}
{"question": "What is the 'Box::new()' function?", "answer": "Allocates a value on the heap."}
{"question": "How to use 'if let' with 'Option'?", "answer": "if let Some(x) = opt { ... } else { ... }"}
{"question": "What is the 'Rust' borrow checker?", "answer": "Enforces ownership and borrowing rules at compile time."}
{"question": "How to use 'ref mut' in patterns?", "answer": "Borrows a value mutably: match x { ref mut y => ... }"}
{"question": "What is the 'Rust' 'self' parameter?", "answer": "The first parameter of a method, representing the instance."}
{"question": "How to use 'thread::spawn' with arguments?", "answer": "Pass a closure: std::thread::spawn(move || { /* code */ });"}
{"question": "What is the 'Rust' 'lifetime' elision?", "answer": "Omits explicit lifetime annotations in common cases."}
{"question": "How to use 'Arc' with 'Mutex'?", "answer": "std::sync::Arc<std::sync::Mutex<T>> for shared mutability."}
{"question": "What is the 'Rust' 'trait object'?", "answer": "A dynamic type for trait-based polymorphism."}
{"question": "How to use 'match' with 'enum' variants?", "answer": "List all variants: match e { Enum::Variant => ... }"}
{"question": "What is the 'Rust' 'lifetime' parameter?", "answer": "Specifies how long a reference is valid in a function."}
{"question": "How to use 'thread::sleep'?", "answer": "std::thread::sleep(std::time::Duration::from_secs(1));"}
{"question": "What is the 'Rust' 'Box' type?", "answer": "A smart pointer for heap-allocated data."}
{"question": "How to use 'if let' with 'Result'?", "answer": "if let Ok(v) = res { ... } else { ... }"}
{"question": "What is the 'Rust' 'lifetime' bound?", "answer": "Ensures references are valid for a specified duration."}
{"question": "How to use 'channel' for thread communication?", "answer": "sender.send() and receiver.recv() for sending/receiving data."}
{"question": "What is the 'Rust' 'move' keyword?", "answer": "Forces a closure to take ownership of captured variables."}
{"question": "How to use 'match' with 'array' patterns?", "answer": "Pattern match array elements: match arr { [a, b, c] => ... }"}
{"question": "What is the 'Rust' 'lifetime' annotation syntax?", "answer": "'a: specifies a named lifetime."}
{"question": "How to use 'thread::Builder' for custom threads?", "answer": "thread::Builder::new().spawn(|| { /* code */ }).unwrap()"}
{"question": "What is the 'Rust' 'impl Trait' syntax?", "answer": "Returns a type that implements a trait without naming it."}
{"question": "How to use 'match' with 'tuple' patterns?", "answer": "Pattern match tuple elements: match t { (x, y) => ... }"}
{"question": "What is the 'Rust' 'Send' and 'Sync' traits?", "answer": "'Send' allows ownership transfer between threads, 'Sync' allows shared access."}
{"question": "What is the primary purpose of the 'let' keyword in Rust?", "answer": "Declares a variable. Example: ```rust\nlet x = 5;\n```"}
{"question": "How do you declare a constant in Rust?", "answer": "Using 'const'. Example: ```rust\nconst MAX_VALUE: u8 = 100;\n```"}
{"question": "What is the difference between 'mut' and 'immut' in Rust?", "answer": "'mut' allows modification, 'immut' (default) does not."}
{"question": "What data type is used for 64-bit integers in Rust?", "answer": "i64 or u64 for signed/unsigned 64-bit integers."}
{"question": "How do you create a struct with named fields in Rust?", "answer": "```rust\nstruct Point { x: i32, y: i32 }\n```"}
{"question": "What is the 'match' expression used for?", "answer": "Pattern matching. Example: ```rust\nmatch value { 1 => \"one\", _ => \"other\" }\n```"}
{"question": "What is a 'tuple' in Rust?", "answer": "A fixed-size collection of values. Example: ```rust\nlet pair = (1, \"two\");\n```"}
{"question": "How do you handle errors in Rust?", "answer": "Using 'Result' and 'Option' types, or 'panic!()' for unrecoverable errors."}
{"question": "What is the purpose of 'Rust's ownership system?", "answer": "Manages memory safety by enforcing unique ownership and borrowing rules."}
{"question": "How do you create a vector in Rust?", "answer": "```rust\nlet v = vec![1, 2, 3];\n``` or ```rust\nlet mut v = Vec::new();\n```"}
{"question": "What is a 'trait' in Rust?", "answer": "A way to define shared behavior. Example: ```rust\ntrait Animal { fn sound(&self); }\n```"}
{"question": "How do you borrow a reference in Rust?", "answer": "Using '&'. Example: ```rust\nfn print_value(x: &i32) { println!(\"{}\", x); }\n```"}
{"question": "What is the 'self' keyword used for in Rust?", "answer": "Refers to the current instance in method definitions."}
{"question": "How do you create a thread in Rust?", "answer": "```rust\nstd::thread::spawn(|| { /* code */ });\n```"}
{"question": "What is the 'Arc' type used for?", "answer": "Thread-safe reference counting. Example: ```rust\nArc::new(data)\n```"}
{"question": "What is the 'Mutex' type in Rust?", "answer": "Provides mutual exclusion for shared data. Example: ```rust\nlet m = Mutex::new(0);\n```"}
{"question": "How do you handle asynchronous code in Rust?", "answer": "Using 'async/await' with 'tokio' or 'async-std' runtime."}
{"question": "What is the 'Send' trait in Rust?", "answer": "Allows types to be safely sent between threads."}
{"question": "How do you create an empty vector in Rust?", "answer": "```rust\nlet v: Vec<i32> = Vec::new();\n```"}
{"question": "What is the 'lifetime' parameter in Rust?", "answer": "Specifies how long a reference is valid. Example: ```rust\nfn longest<'a>(s1: &'a str, s2: &'a str) -> &'a str\n```"}
{"question": "How do you create a slice in Rust?", "answer": "```rust\nlet s = &arr[1..3];\n```"}
{"question": "What is the 'Option' enum used for?", "answer": "Represents optional values. Example: ```rust\nSome(x) or None\n```"}
{"question": "How do you implement a trait for a type?", "answer": "```rust\nimpl MyTrait for MyType { /* methods */ }\n```"}
{"question": "What is the difference between 'Box' and 'Vec'?", "answer": "'Box' is a single allocation, 'Vec' is a dynamic array."}
{"question": "How do you use a 'while' loop in Rust?", "answer": "```rust\nwhile condition { /* loop body */ }\n```"}
{"question": "What is the 'Rc' type used for?", "answer": "Non-thread-safe reference counting. Use 'Arc' for threads."}
{"question": "How do you create a function in Rust?", "answer": "```rust\nfn add(a: i32, b: i32) -> i32 { a + b }\n```"}
{"question": "What is the 'panic!' macro used for?", "answer": "Causes a runtime panic. Example: ```rust\npanic!(\"error message\");\n```"}
{"question": "How do you handle pattern matching in Rust?", "answer": "Using 'match' with 'enum' or 'struct' patterns."}
{"question": "What is the 'Result' type in Rust?", "answer": "Represents success or error. Example: ```rust\nOk(value) or Err(error)\n```"}
{"question": "How do you use 'if let' in Rust?", "answer": "Matches a single pattern. Example: ```rust\nif let Some(x) = value { /* handle Some */ }\n```"}
{"question": "What is the 'use' keyword for?", "answer": "Brings modules into scope. Example: ```rust\nuse std::collections::HashMap;\n```"}
{"question": "How do you create a closure in Rust?", "answer": "```rust\nlet add = |a, b| a + b;\n```"}
{"question": "What is the 'impl' block used for?", "answer": "Defines methods for a type. Example: ```rust\nimpl MyStruct { fn method(&self) { /* ... */ } }\n```"}
{"question": "How do you create a string slice in Rust?", "answer": "```rust\nlet s = \"hello\";\n```"}
{"question": "What is the 'as' keyword used for?", "answer": "Type casting. Example: ```rust\nlet x: i32 = 3.14 as i32;\n```"}
{"question": "How do you create a static variable in Rust?", "answer": "```rust\nstatic COUNT: i32 = 0;\n```"}
{"question": "What is the 'drop' trait used for?", "answer": "Customizes cleanup behavior. Example: ```rust\nimpl Drop for MyType { fn drop(&mut self) { /* ... */ } }\n```"}
{"question": "How do you use 'match' with a 'struct'?", "answer": "Pattern match fields. Example: ```rust\nmatch point { Point { x, y } => /* ... */ }\n```"}
{"question": "What is the 'pub' keyword for?", "answer": "Makes items public. Example: ```rust\npub fn my_function() {}\n```"}
{"question": "How do you create a 'Vec' with initial capacity?", "answer": "```rust\nlet v = Vec::with_capacity(10);\n```"}
{"question": "What is the 'as_ref' method used for?", "answer": "Converts a value into a reference. Example: ```rust\nlet s = \"hello\".as_ref();\n```"}
{"question": "How do you create a 'HashMap' in Rust?", "answer": "```rust\nuse std::collections::HashMap;\nlet mut map = HashMap::new();\n```"}
{"question": "What is the 'lifetime' elision rule?", "answer": "Rust infers lifetimes in common cases. Example: ```rust\nfn longest(s1: &str, s2: &str) -> &str\n```"}
{"question": "How do you use 'try!' in Rust?", "answer": "Propagates errors. Example: ```rust\nlet result = try!(some_function());\n```"}
{"question": "What is the 'derive' attribute used for?", "answer": "Automatically implements traits. Example: ```rust\n#[derive(Debug)] struct Point;\n```"}
{"question": "How do you create a 'thread::join' in Rust?", "answer": "```rust\nlet handle = std::thread::spawn(...);\nhandle.join().unwrap();\n```"}
{"question": "What is the 'RefCell' type used for?", "answer": "Runtime borrow checking. Example: ```rust\nlet c = RefCell::new(0);\n```"}
{"question": "How do you use 'match' with 'enum'?", "answer": "```rust\nmatch color { Color::Red => \"red\", _ => \"other\" }\n```"}
{"question": "What is the 'lifetime' parameter in function signatures?", "answer": "Specifies reference validity. Example: ```rust\nfn print<'a>(s: &'a str) { /* ... */ }\n```"}
{"question": "How do you create a 'VecDeque' in Rust?", "answer": "```rust\nuse std::collections::VecDeque;\nlet mut dq = VecDeque::new();\n```"}
{"question": "What is the 'Option::unwrap' method?", "answer": "Returns the value or panics. Example: ```rust\nlet x = Some(5).unwrap();\n```"}
{"question": "How do you use 'if let' with 'Option'?", "answer": "```rust\nif let Some(x) = opt { /* handle Some */ }\n```"}
{"question": "What is the 'Result::ok' method?", "answer": "Extracts the 'Ok' value. Example: ```rust\nlet x = Ok(5).ok();\n```"}
{"question": "How do you create a 'RwLock' in Rust?", "answer": "```rust\nuse std::sync::RwLock;\nlet lock = RwLock::new(0);\n```"}
{"question": "What is the 'Send' trait's role in concurrency?", "answer": "Ensures types can be safely sent between threads."}
{"question": "How do you use 'async' functions in Rust?", "answer": "```rust\nasync fn my_async() { /* ... */ }\n```"}
{"question": "What is the 'await' keyword used for?", "answer": "Waits for an async task. Example: ```rust\nlet result = my_async().await;\n```"}
{"question": "How do you create a 'channel' in Rust?", "answer": "```rust\nuse std::sync::mpsc;\nlet (tx, rx) = mpsc::channel();\n```"}
{"question": "What is the 'MutexGuard' type?", "answer": "A guard that locks a Mutex. Example: ```rust\nlet guard = mutex.lock().unwrap();\n```"}
{"question": "How do you use 'Box' for heap allocation?", "answer": "```rust\nlet b = Box::new(5);\n```"}
{"question": "What is the 'lifetime' parameter in 'struct'?", "answer": "Specifies how long references live. Example: ```rust\nstruct Data<'a> { ref: &'a i32 }\n```"}
{"question": "How do you create a 'thread' with a closure?", "answer": "```rust\nstd::thread::spawn(move || { /* ... */ });\n```"}
{"question": "What is the 'Result::err' method?", "answer": "Extracts the 'Err' value. Example: ```rust\nlet e = Err(5).err();\n```"}
{"question": "How do you use 'match' with 'Result'?", "answer": "```rust\nmatch result { Ok(v) => /* handle Ok */, Err(e) => /* handle Err */ }\n```"}
{"question": "What is the 'Rc' type's limitation?", "answer": "Not thread-safe. Use 'Arc' for multi-threaded environments."}
{"question": "How do you create a 'Vec' with initial values?", "answer": "```rust\nlet v = vec![1, 2, 3];\n```"}
{"question": "What is the 'as_str' method used for?", "answer": "Converts a String to a &str. Example: ```rust\nlet s = String::from(\"hello\").as_str();\n```"}
{"question": "How do you use 'if let' with 'Result'?", "answer": "```rust\nif let Ok(x) = result { /* handle Ok */ }\n```"}
{"question": "What is the 'Option::is_none' method?", "answer": "Returns true if the Option is None. Example: ```rust\nlet o: Option<i32> = None;\nassert!(o.is_none());\n```"}
{"question": "How do you create a 'thread' with a function?", "answer": "```rust\nstd::thread::spawn(|| my_function());\n```"}
{"question": "What is the 'Send' trait's relationship with 'Sync'?", "answer": "'Send' allows moving between threads, 'Sync' allows shared access."}
{"question": "How do you use 'match' with 'tuple'?", "answer": "```rust\nmatch tuple { (x, y) => /* ... */ }\n```"}
{"question": "What is the 'RwLock' type's advantage over 'Mutex'?", "answer": "Allows multiple readers or one writer."}
{"question": "How do you create a 'Vec' with a specific length?", "answer": "```rust\nlet v = Vec::with_capacity(5);\n```"}
{"question": "What is the 'Option::as_ref' method?", "answer": "Converts Some(T) to Some(&T). Example: ```rust\nlet o = Some(5).as_ref();\n```"}
{"question": "How do you use 'async' in a function?", "answer": "```rust\nasync fn fetch_data() -> Result<String, Error> { /* ... */ }\n```"}
{"question": "What is the 'Result::is_ok' method?", "answer": "Returns true if the Result is Ok. Example: ```rust\nlet r = Ok(5).is_ok();\n```"}
{"question": "How do you create a 'channel' for communication?", "answer": "```rust\nuse std::sync::mpsc;\nlet (tx, rx) = mpsc::channel();\n```"}
{"question": "What is the 'Mutex' type's 'lock' method?", "answer": "Returns a guard. Example: ```rust\nlet mut guard = mutex.lock().unwrap();\n```"}
{"question": "How do you use 'match' with 'enum' variants?", "answer": "```rust\nmatch color { Color::Blue => \"blue\", _ => \"other\" }\n```"}
{"question": "What is the 'Rc::clone' method used for?", "answer": "Increments the reference count. Example: ```rust\nlet rc = Rc::new(5);\nlet clone = Rc::clone(&rc);\n```"}
{"question": "How do you create a 'Vec' with repeated elements?", "answer": "```rust\nlet v = vec![0; 10];\n```"}
{"question": "What is the 'Option::as_mut' method?", "answer": "Converts Some(T) to Some(&mut T). Example: ```rust\nlet mut o = Some(5);\nif let Some(x) = o.as_mut() { *x = 10; }\n```"}
{"question": "How do you use 'async' with 'await'?", "answer": "```rust\nasync fn main() {\n    let data = fetch_data().await;\n}\n```"}
{"question": "What is the 'Result::map' method?", "answer": "Transforms Ok values. Example: ```rust\nOk(5).map(|x| x * 2)\n```"}
{"question": "How do you create a 'thread' with a closure and move?", "answer": "```rust\nstd::thread::spawn(move || { /* ... */ });\n```"}
{"question": "What is the 'RwLockReadGuard' type?", "answer": "A guard for read-only access. Example: ```rust\nlet guard = rwlock.read().unwrap();\n```"}
{"question": "How do you use 'match' with 'array' patterns?", "answer": "```rust\nmatch arr { [x, y, z] => /* ... */ }\n```"}
{"question": "What is the 'Option::unwrap_or' method?", "answer": "Returns the value or a default. Example: ```rust\nSome(5).unwrap_or(0)\n```"}
{"question": "How do you create a 'Vec' with a range?", "answer": "```rust\nlet v: Vec<i32> = (0..5).collect();\n```"}
{"question": "What is the 'Result::and_then' method?", "answer": "Chains operations. Example: ```rust\nOk(5).and_then(|x| Ok(x * 2))\n```"}
{"question": "How do you create a 'thread' with a name?", "answer": "```rust\nstd::thread::Builder::new().name(\"my_thread\")\n```"}
{"question": "What is the 'MutexGuard' type?", "answer": "A guard that locks a Mutex. Example: ```rust\nlet guard = mutex.lock().unwrap();\n```"}
{"question": "How do you use 'if let' with 'Result'?", "answer": "```rust\nif let Err(e) = result { /* handle Err */ }\n```"}
{"question": "What is the 'Rc::strong_count' method?", "answer": "Returns the current reference count. Example: ```rust\nRc::strong_count(&rc)\n```"}
{"question": "How do you create a 'Vec' with a custom capacity?", "answer": "```rust\nlet v = Vec::with_capacity(10);\n```"}
{"question": "What is the 'Option::unwrap_or_default' method?", "answer": "Returns the value or default. Example: ```rust\nNone.unwrap_or_default()\n```"}
{"question": "What is the purpose of the 'mut' keyword in Rust?", "answer": "Declares a variable as mutable. Example: ```rust let mut x = 5; ```"}
{"question": "How do you declare a constant in Rust?", "answer": "Using 'const'. Example: ```rust const MAX_SPEED: u8 = 100; ```"}
{"question": "What is the default integer type in Rust?", "answer": "i32. Example: ```rust let x = 42; ```"}
{"question": "How to create a string slice?", "answer": "Using double quotes. Example: ```rust let s = \"hello\"; ```"}
{"question": "What is shadowing in Rust?", "answer": "Reusing a variable name with a new value. Example: ```rust let x = 5; let x = 6; ```"}
{"question": "How to define a struct with named fields?", "answer": "```rust struct Point { x: i32, y: i32 } ```"}
{"question": "What is a tuple in Rust?", "answer": "A collection of values with fixed types. Example: ```rust let p = (1, 2); ```"}
{"question": "How to access struct fields?", "answer": "Using dot notation. Example: ```rust let x = point.x; ```"}
{"question": "What is the 'match' keyword used for?", "answer": "Pattern matching. Example: ```rust match value { 1 => \"one\", _ => \"other\" } ```"}
{"question": "How to handle optional values?", "answer": "Using Option. Example: ```rust let x: Option<i32> = Some(5); ```"}
{"question": "What is the 'Result' type used for?", "answer": "Error handling. Example: ```rust fn read() -> Result<String, Error> ```"}
{"question": "How to create a new thread?", "answer": "Using std::thread::spawn. Example: ```rust std::thread::spawn(|| { ... }); ```"}
{"question": "What is the 'Send' trait?", "answer": "Marks types that can be safely sent between threads. Example: ```rust impl Send for MyType ```"}
{"question": "How to share data between threads?", "answer": "Use Arc<T> for thread-safe reference counting. Example: ```rust let data = Arc::new(5); ```"}
{"question": "What is a closure in Rust?", "answer": "An anonymous function. Example: ```rust |x| x + 1 ```"}
{"question": "How to use the 'as' keyword?", "answer": "For type casting. Example: ```rust let x: u8 = 5 as u8; ```"}
{"question": "What is the 'drop' trait?", "answer": "Allows custom cleanup when a value goes out of scope. Example: ```rust impl Drop for MyType ```"}
{"question": "How to handle panics?", "answer": "Use 'panic!()' or 'unwrap()'. Example: ```rust let x = some_value.unwrap(); ```"}
{"question": "What is the 'if let' syntax?", "answer": "Matches a single pattern. Example: ```rust if let Some(x) = value { ... } ```"}
{"question": "How to create a vector?", "answer": "Using vec! macro. Example: ```rust let v = vec![1, 2, 3]; ```"}
{"question": "What is the 'Result' type's 'ok()' method?", "answer": "Returns Some(T) if Ok, else None. Example: ```rust let x = result.ok(); ```"}
{"question": "How to use the 'match' guard?", "answer": "Add 'if' condition. Example: ```rust match x { y if y > 5 => ... } ```"}
{"question": "What is the 'derive' attribute?", "answer": "Automatically implements traits. Example: ```rust #[derive(Debug)] struct Point ```"}
{"question": "How to create a mutable reference?", "answer": "Using &mut. Example: ```rust fn modify(x: &mut i32) ```"}
{"question": "What is the 'where' clause in Rust?", "answer": "Specifies trait bounds. Example: ```rust fn foo<T: Debug + Display>(x: T) ```"}
{"question": "How to use the 'as' operator for casting?", "answer": "Converts between types. Example: ```rust let x = 5 as f64; ```"}
{"question": "What is the 'Box' type used for?", "answer": "Heap allocation. Example: ```rust let b = Box::new(5); ```"}
{"question": "How to implement a trait for a type?", "answer": "Using 'impl Trait for Type'. Example: ```rust impl Display for MyType ```"}
{"question": "What is the 'lifetime' parameter?", "answer": "Specifies how long a reference is valid. Example: ```rust fn longest<'a>(s1: &'a str, s2: &'a str) ```"}
{"question": "How to use the 'unwrap_or' method?", "answer": "Provides a default value. Example: ```rust let x = opt.unwrap_or(0); ```"}
{"question": "What is the 'RefCell' type?", "answer": "Allows interior mutability. Example: ```rust let c = RefCell::new(5); ```"}
{"question": "How to use the 'try!' macro?", "answer": "Propagates errors. Example: ```rust let x = try!(read_file()); ```"}
{"question": "What is the 'async' keyword?", "answer": "Declares an asynchronous function. Example: ```rust async fn my_func() ```"}
{"question": "How to create a channel for thread communication?", "answer": "Using std::sync::mpsc. Example: ```rust let (tx, rx) = mpsc::channel(); ```"}
{"question": "What is the 'Mutex' type?", "answer": "Enforces mutual exclusion. Example: ```rust let m = Mutex::new(5); ```"}
{"question": "How to use the 'join' method on a thread?", "answer": "Waits for completion. Example: ```rust thread.join().unwrap() ```"}
{"question": "What is the 'Rc' type?", "answer": "Reference-counted pointer. Example: ```rust let rc = Rc::new(5); ```"}
{"question": "How to use the 'match' with wildcards?", "answer": "_ matches any value. Example: ```rust match x { 1 => \"one\", _ => \"other\" } ```"}
{"question": "What is the 'Option' enum's 'None' variant?", "answer": "Represents absence of a value. Example: ```rust let x: Option<i32> = None; ```"}
{"question": "How to use the 'as_ref()' method on Option?", "answer": "Converts Some(T) to Some(&T). Example: ```rust let x = opt.as_ref(); ```"}
{"question": "What is the 'Result' enum's 'Err' variant?", "answer": "Represents an error. Example: ```rust Err(\"message\") ```"}
{"question": "How to use the 'map' method on Option?", "answer": "Transforms Some(T) to Some(U). Example: ```rust opt.map(|x| x * 2) ```"}
{"question": "What is the 'thread_local!' macro?", "answer": "Declares thread-local storage. Example: ```rust thread_local! { static X: RefCell<i32> = RefCell::new(0); } ```"}
{"question": "How to use the 'crossbeam' crate for concurrency?", "answer": "Provides scoped threads. Example: ```rust crossbeam::scope(|scope| { ... }); ```"}
{"question": "What is the 'Send' trait's role in concurrency?", "answer": "Ensures types can be safely sent between threads. Example: ```rust impl Send for MyType ```"}
{"question": "How to use the 'Arc' type for shared ownership?", "answer": "```rust let arc = Arc::new(5); ```"}
{"question": "What is the 'Sync' trait?", "answer": "Marks types that can be safely shared between threads. Example: ```rust impl Sync for MyType ```"}
{"question": "How to create a thread-safe vector?", "answer": "Use Arc<Mutex<Vec<T>>>. Example: ```rust Arc::new(Mutex::new(vec![])) ```"}
{"question": "What is the 'panic!' macro?", "answer": "Causes a panic. Example: ```rust panic!(\"error message\"); ```"}
{"question": "How to use the 'unwrap()' method on Result?", "answer": "Extracts value or panics. Example: ```rust let x = result.unwrap(); ```"}
{"question": "What is the 'lifetime' elision rule?", "answer": "Omits explicit lifetimes in common cases. Example: ```rust fn longest(s1: &str, s2: &str) -> &str ```"}
{"question": "How to use the 'try' method on Result?", "answer": "Propagates errors. Example: ```rust let x = result?; ```"}
{"question": "What is the 'Box<dyn Trait>' pattern?", "answer": "Used for trait objects. Example: ```rust let b: Box<dyn Debug> = Box::new(5); ```"}
{"question": "How to use the 'while let' loop?", "answer": "Matches patterns until a condition fails. Example: ```rust while let Some(x) = rx.recv() { ... } ```"}
{"question": "What is the 'move' closure keyword?", "answer": "Forces closure to take ownership of captured variables. Example: ```rust std::thread::spawn(move || { ... }); ```"}
{"question": "How to use the 'iter()' method on a vector?", "answer": "Creates an iterator. Example: ```rust for item in vec.iter() { ... } ```"}
{"question": "What is the 'Option' type's 'unwrap()' method?", "answer": "Extracts Some(T) or panics. Example: ```rust let x = opt.unwrap(); ```"}
{"question": "How to use the 'map' method on Result?", "answer": "Transforms Ok(T) to Ok(U). Example: ```rust result.map(|x| x * 2) ```"}
{"question": "What is the 'Rc<RefCell<T>>' pattern?", "answer": "Combines reference counting with interior mutability. Example: ```rust Rc::new(RefCell::new(5)) ```"}
{"question": "How to use the 'try_from' method?", "answer": "Converts from another type. Example: ```rust let x = i32::try_from(5u8); ```"}
{"question": "What is the 'lifetime' parameter in function signatures?", "answer": "Specifies reference validity. Example: ```rust fn print<'a>(s: &'a str) ```"}
{"question": "How to use the 'as_ref' method on a String?", "answer": "Converts to a string slice. Example: ```rust let s = String::from(\"hello\").as_ref(); ```"}
{"question": "What is the 'Result' type's 'err()' method?", "answer": "Returns Err(E) if Err, else None. Example: ```rust let e = result.err(); ```"}
{"question": "How to use the 'into_iter()' method?", "answer": "Consumes the collection. Example: ```rust for item in vec.into_iter() { ... } ```"}
{"question": "What is the 'thread::spawn' function?", "answer": "Creates a new thread. Example: ```rust thread::spawn(|| { ... }); ```"}
{"question": "How to use the 'borrow_mut()' method on RefCell?", "answer": "Gets a mutable reference. Example: ```rust let mut data = cell.borrow_mut(); ```"}
{"question": "What is the 'Arc<Mutex<T>>' pattern?", "answer": "Thread-safe shared ownership with mutual exclusion. Example: ```rust Arc::new(Mutex::new(5)) ```"}
{"question": "How to use the 'await' keyword in async functions?", "answer": "Waits for a future. Example: ```rust let x = async_func().await; ```"}
{"question": "What is the 'lifetime' parameter in struct definitions?", "answer": "Specifies reference validity. Example: ```rust struct Data<'a> { s: &'a str } ```"}
{"question": "How to use the 'as_mut' method on a String?", "answer": "Converts to a mutable slice. Example: ```rust let s = String::from(\"hello\").as_mut(); ```"}
{"question": "What is the 'Option' type's 'and_then()' method?", "answer": "Chains operations. Example: ```rust opt.and_then(|x| Some(x + 1)) ```"}
{"question": "How to use the 'map_err()' method on Result?", "answer": "Transforms error. Example: ```rust result.map_err(|e| e.to_string()) ```"}
{"question": "What is the 'thread::current()' function?", "answer": "Returns the current thread's ID. Example: ```rust let id = thread::current().id(); ```"}
{"question": "How to use the 'clone()' method on Arc?", "answer": "Increments reference count. Example: ```rust let arc2 = arc.clone(); ```"}
{"question": "What is the 'lifetime' parameter in trait implementations?", "answer": "Specifies reference validity. Example: ```rust impl<'a> MyTrait for &'a str ```"}
{"question": "How to use the 'into()' method for type conversion?", "answer": "Converts to another type. Example: ```rust let s: String = \"hello\".into(); ```"}
{"question": "What is the 'RefCell' type's 'borrow()' method?", "answer": "Gets an immutable reference. Example: ```rust let data = cell.borrow(); ```"}
{"question": "How to use the 'unwrap_or_default()' method?", "answer": "Provides default if None. Example: ```rust let x = opt.unwrap_or_default(); ```"}
{"question": "What is the 'Result' type's 'expect()' method?", "answer": "Extracts value or panics with message. Example: ```rust let x = result.expect(\"error\"); ```"}
{"question": "How to use the 'try_into()' method?", "answer": "Converts to another type with error. Example: ```rust let x: i32 = 5u8.try_into().unwrap(); ```"}
{"question": "What is the 'thread::spawn' closure's 'move' keyword?", "answer": "Transfers ownership of captured variables. Example: ```rust thread::spawn(move || { ... }); ```"}
{"question": "How to use the 'as_slice()' method on a String?", "answer": "Converts to a string slice. Example: ```rust let s = String::from(\"hello\").as_slice(); ```"}
{"question": "What is the 'Option' type's 'filter()' method?", "answer": "Returns Some if predicate matches. Example: ```rust opt.filter(|&x| x > 0) ```"}
{"question": "How to use the 'map_or()' method on Option?", "answer": "Transforms or provides default. Example: ```rust opt.map_or(0, |x| x * 2) ```"}
{"question": "What is the 'Result' type's 'map_or()' method?", "answer": "Transforms or provides default. Example: ```rust result.map_or(0, |x| x * 2) ```"}
{"question": "How to use the 'into_boxed_slice()' method?", "answer": "Converts a slice to a Box. Example: ```rust let b = vec![1,2,3].into_boxed_slice(); ```"}
{"question": "What is the 'thread::available_parallelism()' function?", "answer": "Returns the number of logical cores. Example: ```rust let cores = thread::available_parallelism().unwrap(); ```"}
{"question": "How to use the 'as_mut()' method on a String?", "answer": "Converts to a mutable slice. Example: ```rust let s = String::from(\"hello\").as_mut(); ```"}
{"question": "What is the difference between 'let' and 'const' in Rust?", "answer": "'let' declares a variable, which is immutable by default. 'const' defines a compile-time constant. Example:\n\n```rust\nlet x = 5;\nconst Y: i32 = 10;\n```"}
{"question": "How do you declare a mutable variable?", "answer": "Use 'let mut' followed by the variable name. Example:\n\n```rust\nlet mut x = 5;\nx = 6;\n```"}
{"question": "What are Rust's basic data types?", "answer": "Primitive types include i8, u8, i16, u16, i32, u32, i64, u64, isize, usize, f32, f64, bool, char, and str."}
{"question": "How to define a function in Rust?", "answer": "Use 'fn' keyword. Example:\n\n```rust\nfn add(a: i32, b: i32) -> i32 {\n    a + b\n}\n```"}
{"question": "What is Rust's ownership system?", "answer": "Rust enforces unique ownership of values. When a variable goes out of scope, its memory is freed. Example:\n\n```rust\nlet s1 = String::from(\"hello\");\nlet s2 = s1; // s1 is moved to s2\n```"}
{"question": "What is borrowing in Rust?", "answer": "Borrowing allows temporary access to a value without transferring ownership. Use & for immutable and &mut for mutable references."}
{"question": "What is a slice in Rust?", "answer": "A slice is a reference to a portion of a collection. Example:\n\n```rust\nlet s = \"hello\";\nlet part = &s[0..2]; // \"he\"\n```"}
{"question": "How to use modules in Rust?", "answer": "Use 'mod' to define a module. Example:\n\n```rust\nmod math {\n    pub fn add(a: i32, b: i32) -> i32 { a + b }\n}\n```"}
{"question": "What is the 'match' expression?", "answer": "A control flow operator that compares a value against patterns. Example:\n\n```rust\nmatch x {\n    1 => println!(\"one\"),\n    _ => println!(\"other\"),\n}\n```"}
{"question": "How to handle errors with 'Result'?", "answer": "'Result<T, E>' represents success (Ok) or failure (Err). Example:\n\n```rust\nfn divide(a: i32, b: i32) -> Result<i32, String> {\n    if b == 0 { Err(\"division by zero\".to_string()) } else { Ok(a / b) }\n}\n```"}
{"question": "What is the 'Option' enum?", "answer": "'Option<T>' represents a value that may be absent. It has variants 'Some' and 'None'. Example:\n\n```rust\nlet x: Option<i32> = Some(5);\n```"}
{"question": "How to use 'if let' for Option?", "answer": "'if let Some(x) = value' checks for 'Some' and binds the inner value. Example:\n\n```rust\nif let Some(x) = x {\n    println!(\"Found: {}\", x);\n}\n```"}
{"question": "What is a 'struct' in Rust?", "answer": "A struct is a custom data type. Example:\n\n```rust\nstruct Point {\n    x: i32,\n    y: i32,\n}\n```"}
{"question": "How to create a tuple struct?", "answer": "Use 'struct' followed by a tuple-like syntax. Example:\n\n```rust\nstruct Color(i32, i32, i32);\n```"}
{"question": "What is a 'trait' in Rust?", "answer": "A trait defines shared behavior. Example:\n\n```rust\ntrait Animal {\n    fn speak(&self);\n}\n```"}
{"question": "How to implement a trait for a type?", "answer": "Use 'impl Trait for Type'. Example:\n\n```rust\nimpl Animal for Dog {\n    fn speak(&self) { println!(\"Woof!\"); }\n}\n```"}
{"question": "What is a 'lifetime' in Rust?", "answer": "Lifetimes ensure references are valid for the required duration. Example:\n\n```rust\nfn longest<'a>(s1: &'a str, s2: &'a str) -> &'a str {\n    if s1.len() > s2.len() { s1 } else { s2 }\n}\n```"}
{"question": "How to use 'self' in methods?", "answer": "'self' is the first parameter in methods. Example:\n\n```rust\nimpl Point {\n    fn new(x: i32, y: i32) -> Self { Self { x, y } }\n}\n```"}
{"question": "What is the 'use' keyword for?", "answer": "'use' brings items into scope. Example:\n\n```rust\nuse std::collections::HashMap;\n```"}
{"question": "How to make a function public?", "answer": "Use 'pub' before the function. Example:\n\n```rust\npub fn greet() { println!(\"Hello!\"); }\n```"}
{"question": "What is the 'Box' type?", "answer": "'Box<T>' is a smart pointer for heap allocation. Example:\n\n```rust\nlet b = Box::new(5);\n```"}
{"question": "How to clone a value?", "answer": "Use the 'clone()' method. Example:\n\n```rust\nlet s1 = String::from(\"hello\");\nlet s2 = s1.clone();\n```"}
{"question": "What is 'Rc<T>' used for?", "answer": "'Rc<T>' provides shared ownership via reference counting. Example:\n\n```rust\nuse std::rc::Rc;\nlet rc = Rc::new(5);\n```"}
{"question": "What is 'Arc<T>'?", "answer": "'Arc<T>' is a thread-safe 'Rc<T>'. Example:\n\n```rust\nuse std::sync::Arc;\nlet arc = Arc::new(5);\n```"}
{"question": "How to use 'RefCell<T>'?", "answer": "'RefCell<T>' allows interior mutability. Example:\n\n```rust\nuse std::cell::RefCell;\nlet rc = RefCell::new(5);\n```"}
{"question": "What is the 'as' keyword?", "answer": "'as' is used for type casting. Example:\n\n```rust\nlet x: i32 = 5.0 as i32;\n```"}
{"question": "How to use 'match' with guards?", "answer": "Add 'if' conditions to match arms. Example:\n\n```rust\nmatch x {\n    1 | 2 if x > 0 => println!(\"small\"),\n    _ => println!(\"other\"),\n}\n```"}
{"question": "What is the 'drop' trait?", "answer": "'drop' is called when a value goes out of scope. Example:\n\n```rust\nimpl Drop for MyType {\n    fn drop(&mut self) { println!(\"Dropping!\"); }\n}\n```"}
{"question": "How to use 'where' in generics?", "answer": "'where' clarifies trait bounds. Example:\n\n```rust\nfn foo<T: Clone + Debug>(x: T) {\n    // ...\n}\n```"}
{"question": "What is a 'macro'?", "answer": "A macro is a code generation tool. Example:\n\n```rust\nmacro_rules! say_hello {\n    () => { println!(\"Hello!\"); }\n}\n```"}
{"question": "How to create a macro?", "answer": "Use 'macro_rules!' or procedural macros. Example:\n\n```rust\nmacro_rules! vec {\n    ( $( $x:expr ),* ) => { Vec::new() };\n}\n```"}
{"question": "What is the 'derive' attribute?", "answer": "'derive' automatically implements traits. Example:\n\n```rust\n#[derive(Debug)]\nstruct Point { x: i32, y: i32 }\n```"}
{"question": "What is a 'trait object'?", "answer": "A trait object is a dynamic type. Example:\n\n```rust\nlet obj: &dyn Animal = &Dog;\n```"}
{"question": "How to use 'impl Trait'?", "answer": "'impl Trait' returns a concrete type that implements the trait. Example:\n\n```rust\nfn get_number() -> impl Iterator<Item = i32> { (0..5).into_iter() }\n```"}
{"question": "What is the 'static' keyword?", "answer": "'static' denotes a 'static lifetime. Example:\n\n```rust\nfn static_ref<'a>(s: &'a str) -> &'a str { s }\n```"}
{"question": "How to use 'const fn'?", "answer": "'const fn' defines a function that can be evaluated at compile time. Example:\n\n```rust\nconst fn add(a: i32, b: i32) -> i32 { a + b }\n```"}
{"question": "What is the 'assert!' macro?", "answer": "'assert!' checks a condition at runtime. Example:\n\n```rust\nassert!(1 + 1 == 2, \"Math is broken\");\n```"}
{"question": "What is a 'tuple' in Rust?", "answer": "A tuple is a heterogeneous collection. Example:\n\n```rust\nlet t = (1, \"hello\");\n```"}
{"question": "How to create an array?", "answer": "Use [T; N]. Example:\n\n```rust\nlet a = [1, 2, 3];\n```"}
{"question": "What is a 'slice'?", "answer": "A slice is a reference to a contiguous sequence of elements. Example:\n\n```rust\nlet a = [1, 2, 3];\nlet s = &a[0..2];\n```"}
{"question": "How to use 'for' loops?", "answer": "Iterate over ranges or collections. Example:\n\n```rust\nfor i in 0..3 {\n    println!(\"{}\", i);\n}\n```"}
{"question": "What is the 'match' exhaustiveness check?", "answer": "Rust ensures all possible values are covered. Use '_' as a wildcard. Example:\n\n```rust\nmatch x {\n    1 => \"one\",\n    _ => \"other\",\n}\n```"}
{"question": "How to use 'if let' with 'Option'?", "answer": "'if let Some(x) = opt' handles 'Some' cases. Example:\n\n```rust\nif let Some(x) = opt {\n    println!(\"Found: {}\", x);\n}\n```"}
{"question": "What is the 'Result' type?", "answer": "'Result<T, E>' represents success (Ok) or error (Err). Example:\n\n```rust\nlet res: Result<i32, &str> = Ok(5);\n```"}
{"question": "How to use 'unwrap()' on 'Option'?", "answer": "'unwrap()' returns the value or panics. Example:\n\n```rust\nlet x = Some(5).unwrap();\n```"}
{"question": "What is 'Send' trait?", "answer": "'Send' indicates a type can be safely sent between threads. Example:\n\n```rust\nimpl Send for MyType {}\n```"}
{"question": "What is 'Sync' trait?", "answer": "'Sync' indicates a type can be safely shared between threads. Example:\n\n```rust\nimpl Sync for MyType {}\n```"}
{"question": "How to create a thread?", "answer": "Use 'std::thread::spawn'. Example:\n\n```rust\nstd::thread::spawn(|| {\n    println!(\"In thread\");\n});\n```"}
{"question": "What is a 'Mutex'?", "answer": "'Mutex<T>' provides mutual exclusion. Example:\n\n```rust\nuse std::sync::{Mutex, Arc};\nlet m = Arc::new(Mutex::new(5));\n```"}
{"question": "How to use channels for communication?", "answer": "Use 'std::sync::mpsc::channel'. Example:\n\n```rust\nlet (tx, rx) = mpsc::channel();\n```"}
{"question": "What is 'join()' for threads?", "answer": "'join()' waits for a thread to finish. Example:\n\n```rust\nthread.join().unwrap();\n```"}
{"question": "How to use 'async' functions?", "answer": "'async' defines a function that returns a future. Example:\n\n```rust\nasync fn fetch() -> String { \"data\".to_string() }\n```"}
{"question": "What is 'await' in Rust?", "answer": "'await' suspends execution until a future resolves. Example:\n\n```rust\nlet data = fetch().await;\n```"}
{"question": "What is 'tokio' in Rust?", "answer": "'tokio' is an async runtime. Example:\n\n```rust\n#[tokio::main]\nasync fn main() { /* ... */ }\n```"}
{"question": "How to share data between threads?", "answer": "Use 'Arc<Mutex<T>>' for thread-safe shared ownership. Example:\n\n```rust\nlet data = Arc::new(Mutex::new(0));\n```"}
{"question": "What is the 'Copy' trait?", "answer": "'Copy' allows values to be duplicated. Example:\n\n```rust\n#[derive(Copy, Clone)]\nstruct Point { x: i32, y: i32 }\n```"}
{"question": "How to use 'Clone' trait?", "answer": "'Clone' provides a copy method. Example:\n\n```rust\nlet s1 = String::from(\"hello\");\nlet s2 = s1.clone();\n```"}
{"question": "What is 'lifetime elision'?", "answer": "Rust infers lifetimes automatically in common cases. Example:\n\n```rust\nfn longest(s1: &str, s2: &str) -> &str { /* ... */ }\n```"}
{"question": "How to use 'where' for trait bounds?", "answer": "'where' clarifies complex trait bounds. Example:\n\n```rust\nfn foo<T>(x: T) where T: Clone + Debug { /* ... */ }\n```"}
{"question": "What is 'panic!' in Rust?", "answer": "'panic!' causes a runtime panic. Example:\n\n```rust\npanic!(\"Something went wrong\");\n```"}
{"question": "How to handle panics with 'catch_unwind'?", "answer": "'catch_unwind' captures panics. Example:\n\n```rust\nuse std::panic;\nlet result = panic::catch_unwind(|| { panic!(\"error\"); });\n```"}
{"question": "What is 'Box<dyn Trait>'?", "answer": "'Box<dyn Trait>' is a trait object. Example:\n\n```rust\nlet obj: Box<dyn Animal> = Box::new(Dog);\n```"}
{"question": "How to use 'as_ref()' on 'Option'?", "answer": "'as_ref()' converts 'Option<T>' to 'Option<&T>'. Example:\n\n```rust\nlet opt = Some(5);\nlet ref_opt = opt.as_ref();\n```"}
{"question": "What is 'as_mut()' for 'Option'?", "answer": "'as_mut()' converts 'Option<T>' to 'Option<&mut T>'. Example:\n\n```rust\nlet mut opt = Some(5);\nlet mut_ref = opt.as_mut();\n```"}
{"question": "How to use 'if let' with 'Result'?", "answer": "'if let Ok(x) = res' handles success. Example:\n\n```rust\nif let Ok(x) = res { /* ... */ }\n```"}
{"question": "What is 'match' with 'ref' binding?", "answer": "'ref' creates a reference. Example:\n\n```rust\nmatch x {\n    Some(ref s) => println!(\"{}\", s),\n    _ => {}\n}\n```"}
{"question": "How to use 'match' with 'mut' binding?", "answer": "'mut' allows mutation. Example:\n\n```rust\nmatch x {\n    Some(mut s) => s.push(1),\n    _ => {}\n}\n```"}
{"question": "What is the 'default' trait?", "answer": "'default' provides a default value. Example:\n\n```rust\n#[derive(Default)]\nstruct Point { x: i32, y: i32 }\n```"}
{"question": "How to use 'derive' for 'Debug'?", "answer": "'derive(Debug)' enables printing with {:?}. Example:\n\n```rust\n#[derive(Debug)]\nstruct Point { x: i32, y: i32 }\n```"}
{"question": "What is 'Rust's 'pub' visibility?", "answer": "'pub' makes items accessible outside the module. Example:\n\n```rust\npub fn public_func() { /* ... */ }\n```"}
{"question": "How to use 'use' for re-exporting?", "answer": "'use' can re-export with 'pub use'. Example:\n\n```rust\npub use std::collections::HashMap;\n```"}
{"question": "What is 'Rust's 'match' exhaustiveness?", "answer": "Rust ensures all possible patterns are covered. Use '_' as a fallback. Example:\n\n```rust\nmatch x { 1 => \"one\", _ => \"other\" }\n```"}
{"question": "How to use 'match' with 'ref mut'?", "answer": "'ref mut' binds a mutable reference. Example:\n\n```rust\nmatch x {\n    Some(ref mut s) => s.push(1),\n    _ => {}\n}\n```"}
{"question": "What is 'Rust's 'enum' with data?", "answer": "Enums can hold data. Example:\n\n```rust\nenum Result<T, E> { Ok(T), Err(E) }\n```"}
{"question": "How to use 'match' with '..=' for ranges?", "answer": "'..=' includes the end. Example:\n\n```rust\nmatch x { 1..=5 => \"in range\" }\n```"}
{"question": "What is 'Rust's 'asynchronous' programming?", "answer": "Uses 'async' and 'await' for non-blocking I/O. Example:\n\n```rust\nasync fn fetch_data() { /* ... */ }\n```"}
{"question": "How to use 'tokio::spawn'?", "answer": "'tokio::spawn' creates an async task. Example:\n\n```rust\ntokio::spawn(async { /* ... */ });\n```"}
{"question": "What is 'Rust's 'channel' for?", "answer": "Channels enable communication between threads. Example:\n\n```rust\nlet (tx, rx) = mpsc::channel();\n```"}
{"question": "How to use 'MutexGuard'?", "answer": "'MutexGuard' is a lock guard. Example:\n\n```rust\nlet guard = mutex.lock().unwrap();\n```"}
{"question": "What is 'Rust's 'Send' trait?", "answer": "'Send' allows types to be sent between threads. Example:\n\n```rust\nimpl Send for MyType {}\n```"}
{"question": "How to use 'Arc' for shared ownership?", "answer": "'Arc<T>' provides thread-safe reference counting. Example:\n\n```rust\nlet arc = Arc::new(5);\n```"}
{"question": "What is 'Rust's 'lifetime' parameter?", "answer": "Lifetimes ensure references are valid. Example:\n\n```rust\nfn longest<'a>(s1: &'a str, s2: &'a str) -> &'a str { /* ... */ }\n```"}
{"question": "How to use 'Box' for heap allocation?", "answer": "'Box<T>' allocates on the heap. Example:\n\n```rust\nlet boxed = Box::new(5);\n```"}
{"question": "What is 'Rust's 'trait object' syntax?", "answer": "Use 'dyn Trait' for dynamic dispatch. Example:\n\n```rust\nlet obj: &dyn Animal = &Dog;\n```"}
{"question": "How to use 'if let' with 'Result'?", "answer": "'if let Ok(x) = res' handles success. Example:\n\n```rust\nif let Ok(x) = res { /* ... */ }\n```"}
{"question": "What is 'Rust's 'asynchronous' runtime?", "answer": "Rust uses 'async-std' or 'tokio' for async runtime. Example:\n\n```rust\n#[tokio::main]\nasync fn main() { /* ... */ }\n```"}
{"question": "How to use 'join' on a future?", "answer": "'join' waits for multiple futures. Example:\n\n```rust\nlet (a, b) = futures::join!(future1, future2);\n```"}
{"question": "What is 'Rust's 'future' type?", "answer": "'Future' is a trait for asynchronous computations. Example:\n\n```rust\nasync fn fetch() -> String { /* ... */ }\n```"}
{"question": "How to use 'await' in async functions?", "answer": "'await' suspends execution. Example:\n\n```rust\nlet data = fetch().await;\n```"}
{"question": "What is 'Rust's 'channel' for concurrency?", "answer": "Channels allow thread communication. Example:\n\n```rust\nlet (tx, rx) = mpsc::channel();\n```"}
{"question": "How to use 'Mutex' for thread safety?", "answer": "'Mutex<T>' ensures exclusive access. Example:\n\n```rust\nuse std::sync::Mutex;\nlet mutex = Mutex::new(5);\n```"}
{"question": "What is 'Rust's 'Arc' for?", "answer": "'Arc<T>' enables shared ownership across threads. Example:\n\n```rust\nuse std::sync::Arc;\nlet arc = Arc::new(5);\n```"}
{"question": "How to use 'thread::spawn'?", "answer": "'thread::spawn' creates a new thread. Example:\n\n```rust\nstd::thread::spawn(|| { /* ... */ });\n```"}
{"question": "What is 'Rust's 'lifetime' elision?", "answer": "Rust infers lifetimes in common cases. Example:\n\n```rust\nfn longest(s1: &str, s2: &str) -> &str { /* ... */ }\n```"}
{"question": "How to use 'match' with 'ref' in patterns?", "answer": "'ref' creates a reference. Example:\n\n```rust\nmatch x { Some(ref s) => println!(\"{}\", s) }\n```"}
{"question": "What is 'Rust's 'const' evaluation?", "answer": "'const' is evaluated at compile time. Example:\n\n```rust\nconst PI: f64 = 3.14;\n```"}
{"question": "How to use 'Box::new'?", "answer": "'Box::new' allocates on the heap. Example:\n\n```rust\nlet b = Box::new(5);\n```"}
{"question": "What is 'Rust's 'clone' method?", "answer": "'clone()' creates a deep copy. Example:\n\n```rust\nlet s1 = String::from(\"hello\");\nlet s2 = s1.clone();\n```"}
{"question": "How to use 'use' for renaming?", "answer": "'use' can rename items. Example:\n\n```rust\nuse std::collections::HashMap as HMap;\n```"}
{"question": "What is 'Rust's 'pub use' for?", "answer": "'pub use' re-exports items. Example:\n\n```rust\npub use std::collections::HashMap;\n```"}
{"question": "How to use 'match' with 'ref mut' in patterns?", "answer": "'ref mut' binds a mutable reference. Example:\n\n```rust\nmatch x { Some(ref mut s) => s.push(1) }\n```"}
{"question": "What is 'Rust's 'asynchronous' function?", "answer": "'async fn' defines a function that returns a future. Example:\n\n```rust\nasync fn fetch() -> String { /* ... */ }\n```"}
{"question": "How to use 'tokio::task'?", "answer": "'tokio::task::spawn' creates async tasks. Example:\n\n```rust\ntokio::task::spawn(async { /* ... */ });\n```"}
{"question": "What is 'Rust's 'channel' sender?", "answer": "'Sender<T>' sends values. Example:\n\n```rust\nlet (tx, rx) = mpsc::channel();\ntx.send(5).unwrap();\n```"}
{"question": "How to use 'channel' receiver?", "answer": "'Receiver<T>' receives values. Example:\n\n```rust\nlet (tx, rx) = mpsc::channel();\nlet value = rx.recv().unwrap();\n```"}
{"question": "What is the difference between 'let' and 'const' in Rust?", "answer": "'let' declares a variable (mutable or immutable), while 'const' defines a compile-time constant. Constants are implicitly immutable and must have a type annotation."}
{"question": "How do you declare a mutable variable in Rust?", "answer": "Use 'let mut variable_name = value;' e.g., 'let mut x = 5;'."}
{"question": "What are the basic data types in Rust?", "answer": "Primitive types include i8, u8, i16, u16, i32, u32, i64, u64, isize, usize, f32, f64, bool, char, and strings (String, &str)."}
{"question": "How do you create a function in Rust?", "answer": "Use 'fn function_name(parameters) -> return_type { ... }'. Example: 'fn add(a: i32, b: i32) -> i32 { a + b }'."}
{"question": "What is a struct in Rust?", "answer": "A struct is a custom data type that groups related values. Example: 'struct Point { x: i32, y: i32 }'."}
{"question": "How do you define an enum in Rust?", "answer": "Use 'enum EnumName { Variant1, Variant2 }'. Example: 'enum Color { Red, Green, Blue }'."}
{"question": "What is pattern matching in Rust?", "answer": "'match' allows matching values against patterns. Example: 'match value { 1 => \"one\", 2 => \"two\", _ => \"other\" }'."}
{"question": "How do you use modules in Rust?", "answer": "Organize code with 'mod module_name;' and 'use' to import items. Example: 'mod math; use math::add;'."}
{"question": "What is variable shadowing in Rust?", "answer": "Re-declaring a variable with 'let' to change its type or value. Example: 'let x = 5; let x = x + 1;'."}
{"question": "How do you handle strings in Rust?", "answer": "Use 'String' for owned strings or '&str' for string slices. Example: 'let s = String::from(\"hello\"); let s2 = \"world\";'."}
{"question": "What is the purpose of 'Option' in Rust?", "answer": "'Option' represents a value that may be absent. It has variants 'Some(T)' and 'None'."}
{"question": "How do you use 'Result' in Rust?", "answer": "'Result' handles success or error. Use 'Ok(T)' for success and 'Err(E)' for error. Example: 'fn divide(a: f64, b: f64) -> Result<f64, String>'."}
{"question": "What is a closure in Rust?", "answer": "A function literal that can capture its environment. Example: 'let add = |a, b| a + b;'."}
{"question": "How do you use iterators in Rust?", "answer": "Iterators provide 'map', 'filter', and 'fold' methods. Example: '(1..5).map(|x| x * 2).collect::<Vec<_>>()'."}
{"question": "What is the 'where' clause in traits?", "answer": "Specifies trait bounds for generic types. Example: 'fn process<T: Display + Clone>(item: T) where T: Debug'."}
{"question": "How do you write a macro in Rust?", "answer": "Use 'macro_rules!' or the new macro system. Example: 'macro_rules! my_macro { ( $x:expr ) => { $x } }'."}
{"question": "What is the 'Box' type used for?", "answer": "'Box<T>' provides heap allocation. Example: 'let b = Box::new(5);'."}
{"question": "How do you implement a trait for a type?", "answer": "Use 'impl Trait for Type { ... }'. Example: 'impl Display for Point { fn fmt(&self, f: &mut Formatter) -> Result'."}
{"question": "What is the 'Send' trait in Rust?", "answer": "'Send' indicates a type can be safely sent between threads. Most types are 'Send' by default."}
{"question": "How do you create a thread in Rust?", "answer": "Use 'std::thread::spawn' with a closure. Example: 'std::thread::spawn(|| { println!(\"Hello\"); })'."}
{"question": "What is a 'Mutex' in Rust concurrency?", "answer": "A 'Mutex<T>' allows safe shared mutable access across threads. Use 'lock()' to acquire the guard."}
{"question": "How do you use channels for thread communication?", "answer": "Use 'std::sync::mpsc::channel()'. Send with 'sender.send()' and receive with 'receiver.recv()'."}
{"question": "What is the 'Sync' trait in Rust?", "answer": "'Sync' indicates a type can be safely shared between threads. Types like 'Arc<T>' are 'Sync'."}
{"question": "How do you share data between threads safely?", "answer": "Use 'Arc<T>' for shared ownership and 'Mutex<T>' for mutable access. Example: 'Arc::new(Mutex::new(0))'."}
{"question": "What is the 'RwLock' type in Rust?", "answer": "'RwLock<T>' allows multiple readers or a single writer. Use 'read()' or 'write()' to acquire locks."}
{"question": "What is 'async' and 'await' in Rust?", "answer": "'async' defines an asynchronous function, and 'await' suspends execution until a future resolves."}
{"question": "How do you use 'tokio' for async programming?", "answer": "Add 'tokio' as a dependency and use 'tokio::main' for entry points. Example: 'tokio::spawn(async { ... })'."}
{"question": "What is the 'match' expression used for?", "answer": "'match' compares a value against patterns and executes code based on the matching arm."}
{"question": "How do you use 'if let' for pattern matching?", "answer": "'if let' checks a single pattern. Example: 'if let Some(x) = value { ... }'."}
{"question": "What is the 'Option::map' method?", "answer": "'map' applies a function to the 'Some' value. Example: 'Some(5).map(|x| x * 2)' returns 'Some(10)'."}
{"question": "How do you use 'Result::and_then'?", "answer": "'and_then' chains operations on 'Ok' values. Example: 'Ok(5).and_then(|x| Ok(x + 1))'."}
{"question": "What is 'impl Trait' in function signatures?", "answer": "'impl Trait' returns a type that implements the specified trait. Example: 'fn get_value() -> impl Display'."}
{"question": "How do you define a generic function?", "answer": "Use type parameters in angle brackets. Example: 'fn max<T: PartialOrd>(a: T, b: T) -> T'."}
{"question": "What is the 'Drop' trait in Rust?", "answer": "'Drop' allows custom cleanup when a value goes out of scope. Implement 'drop(&mut self)'."}
{"question": "How do you use 'default' in structs?", "answer": "Define a 'Default' trait implementation. Example: 'impl Default for Point { fn default() -> Self { Point { x: 0, y: 0 } } }'."}
{"question": "What is the 'lifetime' parameter in Rust?", "answer": "Lifetimes ensure references are valid for the required scope. Use 'fn function<'a>(x: &'a i32) -> &'a i32'."}
{"question": "How do you use 'self' in trait methods?", "answer": "'self' is the first parameter. Example: 'fn display(&self) { ... }' for instance methods."}
{"question": "What is the 'Box<dyn Trait>' type?", "answer": "'Box<dyn Trait>' is a trait object for dynamic dispatch. Example: 'let b: Box<dyn Display> = Box::new(5);'."}
{"question": "How do you handle errors with 'Result'?", "answer": "Use 'Ok' for success and 'Err' for errors. Example: 'let result = Ok(42).and_then(|x| Ok(x + 1))'."}
{"question": "What is the 'panic!' macro used for?", "answer": "'panic!' triggers a runtime panic. Example: 'panic!(\"Something went wrong!\")'."}
{"question": "How do you use 'assert_eq!' for testing?", "answer": "'assert_eq!(a, b)' checks equality and panics if not equal. Example: 'assert_eq!(add(2, 3), 5)'."}
{"question": "What is the 'pub' keyword in Rust?", "answer": "'pub' makes items public. Example: 'pub fn public_function()'."}
{"question": "How do you use 'use' to import modules?", "answer": "'use' brings items into scope. Example: 'use std::collections::HashMap;'."}
{"question": "What is the 'Vec' type in Rust?", "answer": "'Vec<T>' is a growable array. Example: 'let v = vec![1, 2, 3];'."}
{"question": "How do you create a slice in Rust?", "answer": "Use '&[T]' to reference a portion of an array. Example: 'let slice = &arr[1..3];'."}
{"question": "What is the 'String' type in Rust?", "answer": "'String' is an owned, growable UTF-8 string. Example: 'let s = String::from(\"hello\");'."}
{"question": "How do you use 'match' with enums?", "answer": "'match' deconstructs enum variants. Example: 'match color { Color::Red => \"red\", _ => \"other\" }'."}
{"question": "What is the 'lifetime' elision in Rust?", "answer": "Rust infers lifetimes in function parameters. Example: 'fn longest(a: &str, b: &str) -> &str'."}
{"question": "How do you use 'thread::join' in Rust?", "answer": "'thread::join()' waits for a thread to finish. Example: 'handle.join().unwrap()'."}
{"question": "What is the 'Arc' type in Rust?", "answer": "'Arc<T>' provides thread-safe shared ownership. Example: 'Arc::new(5)'."}
{"question": "How do you use 'once_cell' for lazy initialization?", "answer": "'once_cell' provides 'OnceCell' for single initialization. Example: 'static INIT: OnceCell<i32> = OnceCell::new();'."}
{"question": "What is the 'async_std' crate used for?", "answer": "'async_std' provides an async runtime. Example: 'async_std::task::spawn(async { ... })'."}
{"question": "How do you use 'futures::executor' in Rust?", "answer": "'futures::executor' runs futures. Example: 'futures::executor::block_on(async { ... })'."}
{"question": "What is the 'thread_local!' macro?", "answer": "'thread_local!' creates a thread-local variable. Example: 'thread_local! { static COUNTER: RefCell<i32> = RefCell::new(0); }'."}
{"question": "How do you use 'crossbeam' for concurrency?", "answer": "'crossbeam' provides scoped threads and channels. Example: 'crossbeam::scope(|scope| { ... })'."}
{"question": "What is the 'RefCell' type in Rust?", "answer": "'RefCell<T>' allows interior mutability. Use 'borrow()' or 'borrow_mut()' for references."}
{"question": "How do you implement a custom 'Display' trait?", "answer": "Implement 'fmt(&self, f: &mut Formatter) -> Result'. Example: 'impl fmt::Display for Point { ... }'."}
{"question": "What is the 'Iterator' trait in Rust?", "answer": "'Iterator' provides 'next()' method. Example: 'let mut iter = (0..5).into_iter();'."}
{"question": "How do you use 'map' on an iterator?", "answer": "'map' transforms elements. Example: '(1..5).map(|x| x * 2).collect()'."}
{"question": "What is the 'filter' method on iterators?", "answer": "'filter' keeps elements that satisfy a predicate. Example: '(1..5).filter(|&x| x % 2 == 0).collect()'."}
{"question": "How do you use 'fold' on an iterator?", "answer": "'fold' accumulates values. Example: '(1..5).fold(0, |acc, x| acc + x)'."}
{"question": "What is the 'Result' type in Rust?", "answer": "'Result<T, E>' represents success or error. Use 'Ok' for success and 'Err' for error."}
{"question": "How do you use 'unwrap' on 'Option'?", "answer": "'unwrap()' returns the value or panics. Example: 'Some(5).unwrap()' returns 5."}
{"question": "What is the 'panic!' function in Rust?", "answer": "'panic!' causes a runtime panic. Example: 'panic!(\"Error message\")'."}
{"question": "How do you use 'assert_eq!' in tests?", "answer": "'assert_eq!(a, b)' checks equality. Example: 'assert_eq!(add(2, 3), 5)'."}
{"question": "What is the 'static' keyword in Rust?", "answer": "'static' indicates a reference with a fixed lifetime. Example: 'static MSG: &str = \"Hello\";'."}
{"question": "How do you use 'match' with 'Option'?", "answer": "'match' handles 'Some' and 'None'. Example: 'match opt { Some(x) => x, None => 0 }'."}
{"question": "What is the 'Result::unwrap_or' method?", "answer": "'unwrap_or' returns the value or a default. Example: 'Ok(5).unwrap_or(0)' returns 5."}
{"question": "How do you use 'Result::expect'?", "answer": "'expect()' returns the value or panics with a message. Example: 'Ok(5).expect(\"Failed\")'."}
{"question": "What is the 'Box::new' function?", "answer": "'Box::new(value)' allocates on the heap. Example: 'let b = Box::new(5);'."}
{"question": "How do you use 'RwLock' for shared access?", "answer": "'RwLock' allows multiple readers. Use 'read()' for shared access and 'write()' for exclusive access."}
{"question": "What is the 'Send' trait in Rust?", "answer": "'Send' allows types to be sent between threads. Most types are 'Send' by default."}
{"question": "How do you use 'Mutex' for thread safety?", "answer": "'Mutex<T>' ensures exclusive access. Use 'lock()' to get a guard. Example: 'let m = Mutex::new(0); let mut data = m.lock().unwrap();'."}
{"question": "What is the 'Sync' trait in Rust?", "answer": "'Sync' allows types to be shared between threads. Types like 'Arc<T>' are 'Sync'."}
{"question": "How do you use 'async_std::task::spawn'?", "answer": "'async_std::task::spawn' creates a new task. Example: 'async_std::task::spawn(async { ... })'."}
{"question": "What is the 'tokio::spawn' function?", "answer": "'tokio::spawn' runs an async function in a task. Example: 'tokio::spawn(async { ... })'."}
{"question": "How do you use 'tokio::runtime' in Rust?", "answer": "'tokio::runtime' creates a runtime for async tasks. Example: 'let rt = tokio::runtime::Runtime::new().unwrap();'."}
{"question": "What is the 'futures::executor::block_on' function?", "answer": "'block_on' runs a future to completion. Example: 'futures::executor::block_on(async { ... })'."}
{"question": "How do you use 'thread::spawn' with a closure?", "answer": "'thread::spawn' takes a closure. Example: 'std::thread::spawn(|| { ... })'."}
{"question": "What is the 'thread::join' method?", "answer": "'join()' waits for a thread to finish. Example: 'handle.join().unwrap()'."}
{"question": "How do you use 'mpsc' channels?", "answer": "'mpsc' stands for 'multiple producer, single consumer'. Use 'channel()' to create and 'send()'/'recv()' to communicate."}
{"question": "What is the 'channel' function in Rust?", "answer": "'std::sync::mpsc::channel()' creates a channel for thread communication. Example: 'let (sender, receiver) = channel();'."}
{"question": "How do you use 'crossbeam::scope' for scoped threads?", "answer": "'crossbeam::scope' spawns threads that can borrow from the parent. Example: 'crossbeam::scope(|scope| { ... })'."}
{"question": "What is the 'RefCell' type for?", "answer": "'RefCell<T>' allows runtime borrow checking. Use 'borrow()' or 'borrow_mut()' for references."}
{"question": "How do you implement 'Display' for a custom type?", "answer": "Implement 'fmt(&self, f: &mut Formatter) -> Result'. Example: 'impl fmt::Display for Point { ... }'."}
{"question": "What is the 'lifetime' parameter in function signatures?", "answer": "Lifetimes ensure references are valid. Example: 'fn longest<'a>(a: &'a str, b: &'a str) -> &'a str'."}
{"question": "How do you use 'if let' with 'Option'?", "answer": "'if let Some(x) = opt { ... }' handles 'Some' cases. Example: 'if let Some(x) = Some(5) { println!(\"x = {}\", x); }'."}
{"question": "What is the 'Result::ok()' method?", "answer": "'ok()' converts 'Result' to 'Option'. Example: 'Ok(5).ok()' returns 'Some(5)'."}
{"question": "How do you use 'Result::err()' on a 'Result'?", "answer": "'err()' returns 'None' if 'Ok', else 'Some(E)'. Example: 'Err(5).err()' returns 'Some(5)'."}
{"question": "What is the default visibility in Rust?", "answer": "Default visibility is 'private'; items are visible only within their module unless marked with 'pub'."}
{"question": "How do you declare a mutable variable in Rust?", "answer": "Use 'let mut variable_name = value;' e.g., 'let mut x = 5;'."}
{"question": "What is the purpose of the 'match' expression?", "answer": "To compare a value against patterns and execute code based on the matching pattern."}
{"question": "How to create a thread in Rust?", "answer": "Use 'std::thread::spawn(|| { /* code */ });' with a closure."}
{"question": "What is a 'Vec' in Rust?", "answer": "A dynamic array type that can grow or shrink in size."}
{"question": "What does the 'Send' trait indicate?", "answer": "That a type is safe to transfer between threads."}
{"question": "How to handle panics in Rust?", "answer": "Use 'panic!' macro; handle with 'catch_unwind' or 'unwrap()' for recovery."}
{"question": "What is the 'Option' enum used for?", "answer": "To represent values that may be absent (Some(T) or None)."}
{"question": "How to use a 'Mutex' for thread safety?", "answer": "Wrap data in 'Mutex<T>', then call 'lock()' to access it."}
{"question": "What is the difference between 'let' and 'const'?", "answer": "'let' declares variables (immutable by default), 'const' defines compile-time constants."}
{"question": "How to create a struct in Rust?", "answer": "Use 'struct StructName { field: Type };' e.g., 'struct Point { x: i32, y: i32 }'."}
{"question": "What is 'borrow checker' in Rust?", "answer": "The compiler's system that enforces ownership and borrowing rules at compile time."}
{"question": "How to use 'if let' for pattern matching?", "answer": "'if let Pattern = expression { /* code */ }' to handle a single case."}
{"question": "What is 'lifetime' in Rust?", "answer": "A way to specify how long references are valid, ensuring memory safety."}
{"question": "How to create a tuple in Rust?", "answer": "Use parentheses with comma-separated values: '(value1, value2)'."}
{"question": "What is 'cargo' used for?", "answer": "The Rust package manager and build system for dependencies and projects."}
{"question": "How to implement a trait for a struct?", "answer": "Use 'impl Trait for Struct { /* method implementations */ }'."}
{"question": "What is 'Arc' in Rust?", "answer": "A thread-safe reference-counted pointer for shared ownership."}
{"question": "How to use 'Result' type?", "answer": "'Result<T, E>' represents success (Ok(T)) or error (Err(E))."}
{"question": "What is 'Box<T>' used for?", "answer": "To allocate data on the heap and own it, useful for dynamic dispatch."}
{"question": "How to use 'match' with enums?", "answer": "Pattern match each variant: 'match value { Enum::Variant => /* code */ }'."}
{"question": "What is 'lifetime elision'?", "answer": "A set of rules that allows the compiler to infer lifetimes automatically."}
{"question": "How to create a channel for thread communication?", "answer": "Use 'std::sync::mpsc::channel()' to create a sender and receiver."}
{"question": "What is 'Rust's ownership system?", "answer": "A set of rules that ensures memory safety without a garbage collector."}
{"question": "How to use 'async' and 'await'?", "answer": "Define async functions with 'async fn' and await futures using 'await'."}
{"question": "What is 'trait object' in Rust?", "answer": "A type that represents a trait, allowing dynamic dispatch via 'Box<dyn Trait>'."}
{"question": "How to handle errors with 'Result'?", "answer": "Use 'match' or 'unwrap()' to handle Ok or Err variants."}
{"question": "What is 'Rust's 'pub' keyword?", "answer": "Marks items as public, making them visible outside their module."}
{"question": "How to use 'iterators' in Rust?", "answer": "Call '.iter()' on collections and chain methods like '.map()' or '.filter()'."}
{"question": "What is 'Rust's 'move' keyword in closures?", "answer": "Forces the closure to take ownership of captured variables."}
{"question": "How to use 'RefCell' for interior mutability?", "answer": "Wrap data in 'RefCell<T>', then call '.borrow()' or '.borrow_mut()'."}
{"question": "What is 'Rust's 'static' keyword?", "answer": "Specifies a reference that lives for the entire program duration."}
{"question": "How to create a function in Rust?", "answer": "Use 'fn function_name(parameters) -> return_type { /* code */ }'."}
{"question": "What is 'Rust's 'derive' attribute?", "answer": "Automatically implements common traits like 'Debug', 'Clone', or 'PartialEq'."}
{"question": "How to use 'thread::join()'?", "answer": "Wait for a thread to finish by calling '.join()' on its handle."}
{"question": "What is 'Rust's 'lifetime parameter syntax?", "answer": "'<'a> specifies a lifetime, e.g., 'fn example<'a>(x: &'a i32) -> &'a i32'."}
{"question": "How to use 'match' with 'Option'?", "answer": "Pattern match Some(T) and None: 'match opt { Some(v) => v, None => 0 }'."}
{"question": "What is 'Rust's 'const' vs 'static'?", "answer": "'const' is a compile-time constant, 'static' is a runtime constant with a known address."}
{"question": "How to use 'crossbeam' for concurrency?", "answer": "Provides synchronization primitives like 'crossbeam::channel' for thread communication."}
{"question": "What is 'Rust's 'Send' and 'Sync' traits?", "answer": "'Send' allows safe transfer between threads, 'Sync' allows safe sharing between threads."}
{"question": "How to use 'thread::spawn' with arguments?", "answer": "Pass a closure that captures variables, e.g., 'thread::spawn(move || { /* code */ })'."}
{"question": "What is 'Rust's 'panic!' macro?", "answer": "Causes a runtime panic, typically used for unrecoverable errors."}
{"question": "How to use 'Vec::new()' and 'push'?", "answer": "'let mut v = Vec::new(); v.push(1);' creates and adds elements to a vector."}
{"question": "What is 'Rust's 'match' exhaustiveness check?", "answer": "The compiler ensures all possible enum variants are handled in a match."}
{"question": "How to use 'Arc<Mutex<T>>' for shared state?", "answer": "Combine 'Arc' (shared ownership) and 'Mutex' (mutual exclusion) for thread-safe data."}
{"question": "What is 'Rust's 'impl' block?", "answer": "Used to define methods for a type, e.g., 'impl Struct { fn method(&self) { } }'."}
{"question": "How to use 'Result' with 'expect'?", "answer": "'result.expect(\"message\")' panics with the message if the result is Err."}
{"question": "What is 'Rust's 'pub use' for?", "answer": "Re-exports items from other modules under a new name."}
{"question": "How to use 'thread::scope' for scoped threads?", "answer": "'std::thread::scope(|s| { s.spawn(|| { /* code */ }); })' for scoped thread management."}
{"question": "What is 'Rust's 'lifetime bounds'?", "answer": "Constraints on generic types, e.g., 'where T: 'a' ensures T's lifetime is at least 'a'."}
{"question": "How to use 'Option::unwrap_or'?", "answer": "'opt.unwrap_or(default)' returns the value or the default if None."}
{"question": "What is 'Rust's 'use' keyword?", "answer": "Imports items from other modules into the current scope."}
{"question": "How to use 'thread::sleep'?", "answer": "'std::thread::sleep(std::time::Duration::from_secs(1));' pauses execution for 1 second."}
{"question": "What is 'Rust's 'default' keyword?", "answer": "Specifies a default value for a struct field, e.g., 'field: Type = Default::default()'."}
{"question": "How to use 'Result::ok'?", "answer": "'result.ok()' converts Ok(T) to Some(T), Err(E) to None."}
{"question": "What is 'Rust's 'as' keyword?", "answer": "Used for type casting, e.g., 'x as u8' converts 'x' to a u8."}
{"question": "How to use 'thread::available_parallelism'?", "answer": "'std::thread::available_parallelism().unwrap()' returns the number of logical cores."}
{"question": "What is 'Rust's 'Box<dyn Trait>'?", "answer": "A trait object that allows dynamic dispatch for a trait implementation."}
{"question": "How to use 'Option::as_ref'?", "answer": "'opt.as_ref()' converts Some(T) to Some(&T), None remains None."}
{"question": "What is 'Rust's 'lifetime 'static?", "answer": "'static indicates a reference that lives for the entire program duration."}
{"question": "How to use 'Result::err'?", "answer": "'result.err()' converts Err(E) to Some(E), Ok(T) to None."}
{"question": "What is 'Rust's 'pub struct'?", "answer": "A struct declared with 'pub' is accessible outside its module."}
{"question": "How to use 'thread::Builder'?", "answer": "'std::thread::Builder::new().spawn(|| { /* code */ })' for custom thread configuration."}
{"question": "What is 'Rust's 'use std::cmp::Ordering;?", "answer": "Imports the 'Ordering' enum (Less, Equal, Greater) for comparisons."}
{"question": "How to use 'Option::is_some'?", "answer": "'opt.is_some()' returns true if the value is Some(T), false otherwise."}
{"question": "What is 'Rust's 'thread_local' macro?", "answer": "Declares a thread-local variable that is unique per thread."}
{"question": "How to use 'Result::and_then'?", "answer": "'result.and_then(|x| Ok(x + 1))' chains operations on Ok values."}
{"question": "What is 'Rust's 'lifetime 'a?", "answer": "'a is a placeholder for a specific lifetime, used in function signatures."}
{"question": "How to use 'Option::map'?", "answer": "'opt.map(|x| x + 1)' applies a function to Some(T), returns None if empty."}
{"question": "What is 'Rust's 'thread::current'?", "answer": "'std::thread::current()' returns the current thread's ID."}
{"question": "How to use 'Result::map'?", "answer": "'result.map(|x| x + 1)' transforms Ok(T) values, leaves Err(E) unchanged."}
{"question": "What is 'Rust's 'pub fn'?", "answer": "A function declared with 'pub' is accessible outside its module."}
{"question": "How to use 'thread::yield_now'?", "answer": "'std::thread::yield_now()' hints the scheduler to switch threads."}
{"question": "What is 'Rust's 'Box<T>'?", "answer": "A pointer to a heap-allocated value of type T, for dynamic allocation."}
{"question": "How to use 'Option::filter'?", "answer": "'opt.filter(|x| *x > 0)' keeps Some(T) if the predicate is true."}
{"question": "What is 'Rust's 'thread::join_handle'?", "answer": "A handle to a thread that can be waited on with '.join()'."}
{"question": "How to use 'Result::and'?", "answer": "'result.and(OtherResult)' returns the second result if the first is Ok."}
{"question": "What is 'Rust's 'pub mod'?", "answer": "A module declared with 'pub mod' is accessible outside its parent module."}
{"question": "How to use 'thread::scoped'?", "answer": "'std::thread::scoped(|s| { s.spawn(|| { /* code */ }); })' for scoped threads."}
{"question": "What is 'Rust's 'lifetime 'b?", "answer": "'b is a named lifetime parameter used to annotate references."}
{"question": "How to use 'Option::unwrap'?", "answer": "'opt.unwrap()' returns T, panics if None."}
{"question": "What is 'Rust's 'thread::Builder'?", "answer": "Allows configuring thread attributes before spawning, like name or stack size."}
{"question": "How to use 'Result::or'?", "answer": "'result.or(other)' returns the first Ok, or the second Result if Err."}
{"question": "What is 'Rust's 'pub fn'?", "answer": "A function declared with 'pub' is accessible outside its module."}
{"question": "How to use 'thread::spawn' with move closures?", "answer": "'thread::spawn(move || { /* code */ })' transfers ownership of variables to the thread."}
{"question": "What is 'Rust's 'Box<dyn Trait>'?", "answer": "A trait object that allows dynamic dispatch for a trait implementation."}
{"question": "How to use 'Option::unwrap_or_default'?", "answer": "'opt.unwrap_or_default()' returns T or the default value if None."}
{"question": "What is 'Rust's 'thread::available_parallelism'?", "answer": "'std::thread::available_parallelism()' returns the number of logical cores."}
{"question": "How to use 'Result::unwrap'?", "answer": "'result.unwrap()' returns T or panics if Err."}
{"question": "What is 'Rust's 'pub use'?", "answer": "Re-exports items from other modules under a new name."}
{"question": "How to use 'thread::sleep'?", "answer": "'std::thread::sleep(Duration::from_secs(1))' pauses the current thread for 1 second."}
{"question": "What is the syntax for declaring a variable in Rust?", "answer": "let x = 5;"}
{"question": "How do you declare a mutable variable?", "answer": "let mut x = 5;"}
{"question": "What is the difference between 'let' and 'const'?", "answer": "'const' is a compile-time constant, while 'let' is a variable. 'const' requires a type annotation."}
{"question": "What is the purpose of the 'mut' keyword?", "answer": "It allows the variable to be modified after declaration."}
{"question": "How do you print to the console?", "answer": "println!(\"Hello, world!\");"}
{"question": "What is the entry point of a Rust program?", "answer": "fn main() { ... }"}
{"question": "How to define a function?", "answer": "fn add(a: i32, b: i32) -> i32 { a + b }"}
{"question": "What is a 'match' expression used for?", "answer": "Pattern matching on values, often with enums."}
{"question": "How to create a vector?", "answer": "let v = vec![1, 2, 3];"}
{"question": "What is the 'Option' type?", "answer": "Represents a value that may be absent (Some(T) or None)."}
{"question": "How to handle a 'Result' type?", "answer": "Using 'match' or 'if let' to handle Ok(T) or Err(E)."}
{"question": "What is the 'use' keyword for?", "answer": "To bring modules, functions, or types into scope."}
{"question": "How to define a struct?", "answer": "struct Point { x: i32, y: i32 }"}
{"question": "What is a 'trait'?", "answer": "A blueprint for methods that types can implement."}
{"question": "How to create a new thread?", "answer": "use std::thread; thread::spawn(|| { ... });"}
{"question": "What is the 'Arc' type?", "answer": "Atomic Reference Counted pointer for shared ownership across threads."}
{"question": "How to share data between threads?", "answer": "Use 'Arc<Mutex<T>>' for thread-safe mutable sharing."}
{"question": "What is a 'lifetime' in Rust?", "answer": "A way to tell the compiler how long references are valid."}
{"question": "How to specify a lifetime parameter?", "answer": "fn foo<'a>(x: &'a i32) -> &'a i32 { x }"}
{"question": "What is the 'Box' type?", "answer": "A smart pointer for allocating data on the heap."}
{"question": "How to use 'if let'?", "answer": "if let Some(x) = value { ... }"}
{"question": "What is the 'Result' type?", "answer": "Represents success (Ok(T)) or failure (Err(E))."}
{"question": "How to create an empty vector?", "answer": "let v: Vec<i32> = Vec::new();"}
{"question": "What is the 'as' keyword used for?", "answer": "Type casting, e.g., 5 as f64."}
{"question": "How to use a closure?", "answer": "let add = |a: i32, b: i32| a + b;"}
{"question": "What is the 'drop' trait?", "answer": "Allows custom cleanup logic when a value goes out of scope."}
{"question": "How to create a tuple?", "answer": "let t = (1, \"a\");"}
{"question": "What is the 'pub' keyword?", "answer": "Makes a function, struct, or module public."}
{"question": "How to use 'match' with enums?", "answer": "match value { Enum::Variant => ... }"}
{"question": "What is the 'self' keyword in methods?", "answer": "Refers to the instance of the struct."}
{"question": "How to create a slice?", "answer": "let s = &arr[1..3];"}
{"question": "What is the 'as_ref' method?", "answer": "Converts a Box<T> to a &T."}
{"question": "How to use 'while let'?", "answer": "while let Some(x) = iter.next() { ... }"}
{"question": "What is the 'panic!' macro?", "answer": "Causes the program to crash with a message."}
{"question": "How to use 'unwrap_or'?", "answer": "value.unwrap_or(default) returns value or default if None."}
{"question": "What is the 'Rust' ownership system?", "answer": "Guards against data races by ensuring unique ownership of data."}
{"question": "How to use 'thread::join'?", "answer": "let handle = thread::spawn(...); handle.join().unwrap();"}
{"question": "What is the 'Send' trait?", "answer": "Marks types that can be safely sent between threads."}
{"question": "How to use 'async fn'?", "answer": "async fn main() { ... } for asynchronous functions."}
{"question": "What is a 'channel' in concurrency?", "answer": "A way to send and receive data between threads."}
{"question": "How to create a channel?", "answer": "use std::sync::mpsc; let (tx, rx) = mpsc::channel();"}
{"question": "What is the 'Mutex' type?", "answer": "A mutual exclusion lock for thread-safe data access."}
{"question": "How to lock a Mutex?", "answer": "let data = mutex.lock().unwrap();"}
{"question": "What is the 'RwLock' type?", "answer": "A read-write lock that allows multiple readers or one writer."}
{"question": "How to use 'tokio' for async?", "answer": "Add 'tokio' to Cargo.toml and use async/await syntax."}
{"question": "What is the 'lifetime elision' rule?", "answer": "Rust infers lifetimes in common cases like function parameters."}
{"question": "How to use 'self' in a trait method?", "answer": "fn method(&self) { ... }"}
{"question": "What is the 'derive' attribute?", "answer": "Automatically implements traits like Debug, Clone."}
{"question": "How to use 'match' with a range?", "answer": "match x { 1..=5 => ... }"}
{"question": "What is the 'Option::unwrap' method?", "answer": "Returns the value inside Some(T) or panics if None."}
{"question": "How to use 'thread::spawn' with a closure?", "answer": "thread::spawn(move || { ... })"}
{"question": "What is the 'Send' and 'Sync' traits?", "answer": "'Send' allows ownership transfer between threads, 'Sync' allows shared access."}
{"question": "How to use 'async await'?", "answer": "let result = async_function().await;"}
{"question": "What is the 'Box::new' function?", "answer": "Allocates a value on the heap and returns a Box<T>."}
{"question": "How to use 'if let' with a pattern?", "answer": "if let Pattern = value { ... }"}
{"question": "What is the 'Result::ok' method?", "answer": "Returns Some(T) if the Result is Ok, else None."}
{"question": "How to use 'thread::sleep'?", "answer": "use std::thread; use std::time::Duration; thread::sleep(Duration::from_secs(1));"}
{"question": "What is the 'Rust' borrow checker?", "answer": "Enforces rules for references to prevent dangling pointers."}
{"question": "How to use 'match' with a struct?", "answer": "match struct_instance { Struct { field } => ... }"}
{"question": "What is the 'Rust' 'pub use'?", "answer": "Re-exports a name from another module."}
{"question": "How to use 'Result::err'?", "answer": "Returns Err(E) if the Result is Err, else None."}
{"question": "What is the 'Rust' 'as' operator?", "answer": "Converts a value from one type to another."}
{"question": "How to use 'thread::current'?", "answer": "thread::current().id() gets the current thread ID."}
{"question": "What is the 'Rust' 'static' keyword?", "answer": "Specifies that a reference has a 'static lifetime."}
{"question": "How to use 'Option::map'?", "answer": "value.map(|x| x * 2) applies a function to Some(T)."}
{"question": "What is the 'Rust' 'enum'?", "answer": "A type that can be one of several variants."}
{"question": "How to use 'Result::map'?", "answer": "result.map(|x| x + 1) transforms Ok(T) values."}
{"question": "What is the 'Rust' 'lifetime' annotation?", "answer": "fn foo<'a>(x: &'a i32) -> &'a i32 { x }"}
{"question": "How to use 'thread::spawn' with arguments?", "answer": "thread::spawn(move || { ... }) with move closure."}
{"question": "What is the 'Rust' 'Box' type?", "answer": "A smart pointer for heap allocation."}
{"question": "How to use 'Option::unwrap'?", "answer": "value.unwrap() returns T or panics."}
{"question": "What is the 'Rust' 'pub struct'?", "answer": "A struct with public fields and visibility."}
{"question": "How to use 'Result::expect'?", "answer": "result.expect(\"message\") returns T or panics with message."}
{"question": "What is the 'Rust' 'trait' system?", "answer": "Enables shared behavior across types."}
{"question": "How to use 'Mutex::lock'?", "answer": "let guard = mutex.lock().unwrap();"}
{"question": "What is the 'Rust' 'lifetime' parameter?", "answer": "Specifies how long a reference is valid."}
{"question": "What is the syntax for declaring a variable in Rust?", "answer": "```rust\nlet x = 5;\n```"}
{"question": "How to declare a mutable variable?", "answer": "```rust\nlet mut x = 5;\n```"}
{"question": "What is the default type for integer literals?", "answer": "i32"}
{"question": "What is the difference between 'let' and 'const'?", "answer": "'const' is a compile-time constant, 'let' is a runtime variable."}
{"question": "How to create a function?", "answer": "```rust\nfn add(a: i32, b: i32) -> i32 { a + b }\n```"}
{"question": "What is the purpose of 'match' in Rust?", "answer": "For pattern matching against values."}
{"question": "How to handle errors using 'Result'?", "answer": "Use 'Ok' for success and 'Err' for failure."}
{"question": "What is the 'Option' type used for?", "answer": "To represent optional values (Some or None)."}
{"question": "How to create a struct?", "answer": "```rust\nstruct Point { x: i32, y: i32 }\n```"}
{"question": "What is the 'self' keyword in methods?", "answer": "Refers to the instance of the struct or enum."}
{"question": "How to implement a trait?", "answer": "```rust\nimpl Trait for Type { ... }\n```"}
{"question": "What is a 'closure'?", "answer": "An anonymous function that can capture its environment."}
{"question": "How to use 'if let' for Option?", "answer": "```rust\nif let Some(x) = opt { ... }\n```"}
{"question": "What is the 'use' keyword for?", "answer": "To bring modules, types, or functions into scope."}
{"question": "How to create a vector?", "answer": "```rust\nvec![1, 2, 3]\n```"}
{"question": "What is the difference between 'Vec' and 'VecDeque'?", "answer": "'Vec' is a dynamic array, 'VecDeque' is a double-ended queue."}
{"question": "How to iterate over a vector?", "answer": "Using 'for' loops or the 'iter()' method."}
{"question": "What is the 'Box' type used for?", "answer": "Heap allocation of values."}
{"question": "How to use 'Rc' for reference counting?", "answer": "```rust\nlet rc = Rc::new(...);\n```"}
{"question": "What is 'Arc' used for?", "answer": "Thread-safe reference counting."}
{"question": "How to create a new thread?", "answer": "```rust\nstd::thread::spawn(|| { ... });\n```"}
{"question": "What is the 'join' method for?", "answer": "To wait for a thread's completion."}
{"question": "How to share data between threads?", "answer": "Use 'Arc<Mutex<T>>' for safe sharing."}
{"question": "What is a 'Mutex' in Rust?", "answer": "A mutual exclusion lock for thread synchronization."}
{"question": "How to use 'channel' for thread communication?", "answer": "```rust\nlet (tx, rx) = mpsc::channel();\n```"}
{"question": "What is the 'mpsc' module?", "answer": "Provides multiple producer, single consumer channels."}
{"question": "How to send data through a channel?", "answer": "```rust\ntx.send(data).unwrap();\n```"}
{"question": "How to receive data from a channel?", "answer": "```rust\nrx.recv().unwrap();\n```"}
{"question": "What is the 'async' keyword used for?", "answer": "To define asynchronous functions."}
{"question": "How to await a future?", "answer": "Using the 'await!' macro."}
{"question": "What is 'tokio' in Rust?", "answer": "An asynchronous runtime for Rust."}
{"question": "How to use 'Future' trait?", "answer": "Implement the 'poll' method."}
{"question": "What is the 'Send' trait?", "answer": "Marks a type as safe to send between threads."}
{"question": "How to make a type 'Send'?", "answer": "Implement the 'Send' trait or derive it."}
{"question": "What is the 'Sync' trait?", "answer": "Marks a type as safe to share between threads."}
{"question": "How to use 'thread::local'?", "answer": "For thread-local storage with 'thread_local!()' macro."}
{"question": "What is a 'lifetime' in Rust?", "answer": "Specifies how long a reference is valid."}
{"question": "How to specify a lifetime in a function?", "answer": "```rust\nfn foo<'a>(x: &'a i32) -> &'a i32 { ... }\n```"}
{"question": "What is the 'drop' trait?", "answer": "Allows custom cleanup when a value goes out of scope."}
{"question": "How to implement 'drop'?", "answer": "```rust\nimpl Drop for Type { fn drop(&mut self) { ... } }\n```"}
{"question": "What is the 'as' keyword for?", "answer": "For type casting."}
{"question": "How to use 'as' for casting?", "answer": "```rust\nlet x: i32 = 5 as i32;\n```"}
{"question": "What is the 'panic!' macro used for?", "answer": "To trigger a runtime panic."}
{"question": "How to handle panics with 'catch_unwind'?", "answer": "```rust\nstd::panic::catch_unwind(|| { ... });\n```"}
{"question": "What is the 'dbg!' macro?", "answer": "For debugging with source location information."}
{"question": "How to use 'dbg!'?", "answer": "```rust\ndbg!(x);\n```"}
{"question": "What is the 'const' keyword for?", "answer": "To define compile-time constants."}
{"question": "How to define a constant?", "answer": "```rust\nconst MAX: i32 = 100;\n```"}
{"question": "What is the 'static' keyword for?", "answer": "To indicate a 'static lifetime."}
{"question": "How to use 'static' in a function?", "answer": "```rust\nfn example() -> &'static str { \"hello\" }\n```"}
{"question": "What is 'match' arm syntax?", "answer": "```rust\nmatch x { 1 => \"one\", _ => \"other\" }\n```"}
{"question": "How to create an enum with data?", "answer": "```rust\nenum Result<T> { Ok(T), Err(String) }\n```"}
{"question": "What is 'Option::map' used for?", "answer": "To transform Some values while preserving None."}
{"question": "How to use 'Result::and_then'?", "answer": "To chain operations that return Result."}
{"question": "What is 'pub' for in Rust?", "answer": "To make items public (visible outside the module)."}
{"question": "How to use 'as' for type conversion?", "answer": "```rust\nlet x = 5_i32 as u32;\n```"}
{"question": "What is 'Rc' for?", "answer": "Single-threaded reference counting."}
{"question": "How to use 'Box' for heap allocation?", "answer": "```rust\nlet boxed = Box::new(5);\n```"}
{"question": "What is 'VecDeque' used for?", "answer": "A double-ended queue with efficient push/pop at both ends."}
{"question": "How to use 'HashMap'?", "answer": "```rust\nuse std::collections::HashMap;\nlet mut map = HashMap::new();\n```"}
{"question": "What is 'BTreeMap' used for?", "answer": "A sorted map with ordered keys."}
{"question": "How to handle 'None' in 'Option'?", "answer": "Use 'match' or 'if let' to handle Some and None cases."}
{"question": "What is 'thread::yield_now'?", "answer": "Yields the current thread to the scheduler."}
{"question": "How to use 'thread::Builder'?", "answer": "```rust\nstd::thread::Builder::new().spawn(|| { ... }).unwrap();\n```"}
{"question": "What is 'thread::ThreadId'?", "answer": "Identifies a thread."}
{"question": "How to use 'thread::park'?", "answer": "Pauses the current thread until 'unpark' is called."}
{"question": "What is 'thread::unpark'?", "answer": "Resumes a parked thread."}
{"question": "What is 'crossbeam' crate used for?", "answer": "Provides synchronization primitives like channels."}
{"question": "How to use 'async/await'?", "answer": "```rust\nasync fn main() { let x = await!(future);\n```"}
{"question": "What is 'Future' trait?", "answer": "Represents a value that may become available later."}
{"question": "How to use 'Mutex::lock'?", "answer": "```rust\nlet data = mutex.lock().unwrap();\n```"}
{"question": "What is 'RefCell' for?", "answer": "Runtime borrow checking for interior mutability."}
{"question": "How to use 'RefCell'?", "answer": "```rust\nlet cell = RefCell::new(5);\nlet data = cell.borrow_mut();\n```"}
{"question": "What is 'Rust' ownership system?", "answer": "Manages memory via strict rules for references."}
{"question": "How to move ownership?", "answer": "When a value is assigned to a new variable, ownership transfers."}
{"question": "What is 'borrowing' in Rust?", "answer": "Using references to access data without transferring ownership."}
{"question": "How to use 'lifetime' annotations?", "answer": "To ensure references are valid for the required scope."}
{"question": "What is 'trait object'?", "answer": "A dynamic type that implements a trait."}
{"question": "What is the syntax for declaring a variable in Rust?", "answer": "let x = 5;"}
{"question": "How do you declare a mutable variable?", "answer": "let mut x = 5;"}
{"question": "What is the default data type for integers in Rust?", "answer": "i32"}
{"question": "How to create a constant?", "answer": "const PI: f64 = 3.14159;"}
{"question": "What is the purpose of 'match' in Rust?", "answer": "To handle multiple possible values of an expression with pattern matching."}
{"question": "How to define a function?", "answer": "fn add(a: i32, b: i32) -> i32 { a + b }"}
{"question": "What is a 'tuple'?", "answer": "A collection of values with fixed size and mixed types, e.g., (1, \"a\")"}
{"question": "How to create a vector?", "answer": "let v = vec![1, 2, 3];"}
{"question": "What is the difference between 'Vec' and 'array'?", "answer": "Vec is dynamic, arrays have fixed size."}
{"question": "How to handle errors in Rust?", "answer": "Using the 'Result' and 'Option' types."}
{"question": "What is 'ownership' in Rust?", "answer": "A system that manages memory by tracking which variable owns a resource."}
{"question": "How to borrow a reference?", "answer": "&x or &mut x for immutable or mutable borrowing."}
{"question": "What is a 'lifetime' in Rust?", "answer": "A way to specify how long references are valid."}
{"question": "How to implement a trait?", "answer": "impl Trait for Type { ... }"}
{"question": "What is the 'Box' type used for?", "answer": "To allocate data on the heap."}
{"question": "How to create a struct?", "answer": "struct Point { x: i32, y: i32 }"}
{"question": "What is the 'Option' enum?", "answer": "Represents a value that may be present (Some) or absent (None)."}
{"question": "How to use a 'match' expression with enums?", "answer": "match value { Enum::Variant => ... }"}
{"question": "What is the 'Result' type?", "answer": "A generic type for handling success (Ok) or error (Err) cases."}
{"question": "How to write a loop?", "answer": "loop { ... } or for i in 0..5 { ... }"}
{"question": "What is the 'pub' keyword used for?", "answer": "To make items public in a module."}
{"question": "How to create a thread?", "answer": "std::thread::spawn(|| { ... });"}
{"question": "What is 'Arc' in Rust?", "answer": "A thread-safe reference-counted pointer."}
{"question": "How to use 'Mutex' for thread safety?", "answer": "let m = Mutex::new(5); let mut data = m.lock().unwrap();"}
{"question": "What is 'Rust's 'async' keyword?", "answer": "Marks a function as asynchronous, enabling non-blocking I/O."}
{"question": "How to await a future?", "answer": "await!(future) or async/await syntax with 'await'."}
{"question": "What is the 'Send' trait?", "answer": "Indicates a type can be safely sent between threads."}
{"question": "How to use 'channel' for thread communication?", "answer": "let (tx, rx) = mpsc::channel(); tx.send(data);"}
{"question": "What is 'lifetime elision'?", "answer": "A set of rules to infer lifetimes automatically in function signatures."}
{"question": "How to define a custom trait?", "answer": "trait MyTrait { fn method(&self); }"}
{"question": "What is 'pattern matching'?", "answer": "A way to destructure and match values against patterns."}
{"question": "How to use 'if let' for Option?", "answer": "if let Some(x) = value { ... } else { ... }"}
{"question": "What is 'borrow checker'?", "answer": "A Rust compiler component that enforces ownership rules."}
{"question": "How to create a slice?", "answer": "&arr[1..3] to get a view of an array."}
{"question": "What is 'trait object'?", "answer": "A dynamic type that allows for polymorphism via traits."}
{"question": "How to use 'Box::new'?", "answer": "let b = Box::new(5); to allocate on the heap."}
{"question": "What is 'lifetime parameter'?", "answer": "A generic parameter specifying reference validity, e.g., 'a."}
{"question": "How to implement a trait for a type?", "answer": "impl Trait for Type { ... }"}
{"question": "What is 'panic!' macro?", "answer": "Causes the current thread to panic and unwind."}
{"question": "How to use 'try!' macro?", "answer": "propagates errors from a Result type."}
{"question": "What is 'Rust's 'Box' type?", "answer": "A smart pointer for heap allocation."}
{"question": "How to use 'RefCell' for interior mutability?", "answer": "let c = RefCell::new(5); c.borrow_mut().set(6);"}
{"question": "What is 'Rust's 'enum'?", "answer": "A type that can have multiple variants, e.g., enum Color { Red, Green, Blue }"}
{"question": "How to use 'match' with enums?", "answer": "match color { Color::Red => ... }"}
{"question": "What is 'Rust's 'struct'?", "answer": "A custom data type with named fields."}
{"question": "How to use 'impl Trait' in function return types?", "answer": "fn get_value() -> impl Trait { ... }"}
{"question": "What is 'Rust's 'use' keyword?", "answer": "Imports items into scope, e.g., use std::collections::HashMap."}
{"question": "How to create a closure?", "answer": "|x| x + 1 or fn add(x: i32) -> i32 { x + 1 }"}
{"question": "What is 'Rust's 'match' arm?", "answer": "A pattern and expression in a match statement."}
{"question": "How to use 'Option::unwrap'?", "answer": "Returns the value inside Some, panics if None."}
{"question": "What is 'Rust's 'Result' type?", "answer": "A generic type for success (Ok) or error (Err) outcomes."}
{"question": "How to use 'Rust's 'as' keyword?", "answer": "For type casting, e.g., 5 as u8."}
{"question": "What is 'Rust's 'static' keyword?", "answer": "Specifies a reference with a fixed lifetime."}
{"question": "How to use 'Rust's 'where' clause?", "answer": "Adds constraints to generic functions, e.g., T: Trait where T: Clone"}
{"question": "What is 'Rust's 'derive' attribute?", "answer": "Automatically implements traits for a struct, e.g., #[derive(Debug)]"}
{"question": "How to use 'Rust's 'asynchronous' functions?", "answer": "fn async_function() async -> Result<()> { ... }"}
{"question": "What is 'Rust's 'future'?", "answer": "A value that represents a computation that may complete later."}
{"question": "How to use 'Rust's 'join' for threads?", "answer": "let handle = std::thread::spawn(...); handle.join().unwrap()"}
{"question": "What is 'Rust's 'thread-local' storage?", "answer": "A way to store data specific to a thread using thread_local! macro."}
{"question": "How to use 'Rust's 'crossbeam' crate?", "answer": "For advanced concurrency patterns like scoped threads."}
{"question": "What is 'Rust's 'channel' for?", "answer": "To send and receive data between threads."}
{"question": "How to use 'Rust's 'once_cell' crate?", "answer": "For lazy initialization of static variables."}
{"question": "What is 'Rust's 'thread' module?", "answer": "Provides APIs for creating and managing threads."}
{"question": "How to use 'Rust's 'tokio' runtime?", "answer": "For asynchronous programming with async/await."}
{"question": "What is 'Rust's 'async-std' crate?", "answer": "A standard library for asynchronous programming."}
{"question": "How to use 'Rust's 'rayon' crate?", "answer": "For parallel iterators and data processing."}
{"question": "What is 'Rust's 'scoped' threads?", "answer": "Threads that borrow data from their parent, using crossbeam::scope."}
{"question": "How to use 'Rust's 'atomic' types?", "answer": "For thread-safe operations without locks, e.g., AtomicUsize."}
{"question": "What is 'Rust's 'Send' trait?", "answer": "Marks types that can be safely sent between threads."}
{"question": "How to use 'Rust's 'Sync' trait?", "answer": "Marks types that can be safely shared between threads."}
{"question": "What is 'Rust's 'MutexGuard'?", "answer": "A guard returned by Mutex::lock() that ensures exclusive access."}
{"question": "How to use 'Rust's 'RwLock'?", "answer": "Allows multiple readers or one writer, via read() or write()."}
{"question": "What is 'Rust's 'OnceLock'?", "answer": "A thread-safe, single-assignment container."}
{"question": "How to use 'Rust's 'lazy_static' macro?", "answer": "For initializing static variables lazily with a block."}
{"question": "What is 'Rust's 'thread::yield_now'?", "answer": "Yields the current thread's time slice to the scheduler."}
{"question": "How to use 'Rust's 'thread::sleep'?", "answer": "thread::sleep(Duration::from_secs(1));"}
{"question": "What is 'Rust's 'thread_local' macro?", "answer": "Declares a thread-local variable with a unique instance per thread."}
{"question": "How to use 'Rust's 'crossbeam_channel'?", "answer": "For cross-thread communication with channels, e.g., mpsc::channel()."}
{"question": "What is 'Rust's 'scoped' function?", "answer": "A function that creates a thread with a closure that can borrow from the parent."}
{"question": "How to use 'Rust's 'thread::spawn'?", "answer": "Spawns a new thread, e.g., thread::spawn(|| { ... });"}
{"question": "What is 'Rust's 'thread::available_parallelism'?", "answer": "Returns the number of logical cores available for parallelism."}
{"question": "How to use 'Rust's 'thread::Builder'?", "answer": "Customizes thread properties before spawning, e.g., thread::Builder::new().spawn(...)."}
{"question": "What is the difference between let and const in Rust?", "answer": "`let` declares variables (mutable by default), while `const` defines immutable constants. Constants require a type annotation and are evaluated at compile-time."}
{"question": "How do you create a mutable variable in Rust?", "answer": "Use `let mut variable_name = value;` to declare a mutable variable."}
{"question": "What is the purpose of the 'match' expression?", "answer": "It allows pattern matching on values, enabling control flow based on different possible cases."}
{"question": "How to handle errors in Rust without panicking?", "answer": "Use `Result` type and the `?` operator to propagate errors, or `match`/`if let` to handle them explicitly."}
{"question": "What is a 'Box' in Rust?", "answer": "A smart pointer for heap allocation. Example: `let b = Box::new(5);`"}
{"question": "How to define a function in Rust?", "answer": "`fn function_name(parameters) -> return_type { body }` e.g., `fn add(a: i32, b: i32) -> i32 { a + b }`"}
{"question": "What is the 'Option' type used for?", "answer": "To represent optional values (Some(T) or None)."}
{"question": "How to implement a trait for a type?", "answer": "`impl Trait for Type { ... }` e.g., `impl Display for Point { ... }`"}
{"question": "What is the 'Rust' ownership system?", "answer": "A set of rules that govern how memory is managed, ensuring safety without a garbage collector."}
{"question": "How to create a thread in Rust?", "answer": "`std::thread::spawn(|| { ... });`"}
{"question": "What is the 'self' keyword in Rust?", "answer": "Refers to the current instance in method definitions. Example: `fn greet(self) { ... }`"}
{"question": "How to use a struct in Rust?", "answer": "`struct Point { x: i32, y: i32 }` then `let p = Point { x: 1, y: 2 };`"}
{"question": "What is the 'Result' type in Rust?", "answer": "Represents either success (`Ok(T)`) or failure (`Err(E)`)."}
{"question": "How to borrow a reference in Rust?", "answer": "Use `&` for immutable borrowing or `&mut` for mutable borrowing."}
{"question": "What is a 'lifetime' in Rust?", "answer": "A way to tell the compiler how long references are valid. Declared with `'a`."}
{"question": "How to use the 'if let' pattern?", "answer": "Simplifies checking for a single pattern in a `Option` or `Result`. Example: `if let Some(x) = value { ... }`"}
{"question": "What is the 'pub' keyword used for?", "answer": "Exports a function, struct, or module for use in other crates."}
{"question": "How to create a vector in Rust?", "answer": "`let v = vec![1, 2, 3];` or `Vec::new()` with type annotation."}
{"question": "What is the 'as' keyword for in Rust?", "answer": "Used for type casting. Example: `let x: i32 = 5.0 as i32;`"}
{"question": "How to implement a trait object?", "answer": "Use `dyn Trait` for dynamic dispatch. Example: `fn print_value(value: &dyn Display) { ... }`"}
{"question": "What is the 'use' keyword for?", "answer": "Brings items into scope. Example: `use std::collections::HashMap;`"}
{"question": "How to create an array in Rust?", "answer": "`let a = [1, 2, 3];` or `let a = [0; 5];` for a 5-element array of zeros."}
{"question": "What is the 'cargo' tool used for?", "answer": "Rust's package manager and build system for managing dependencies and building projects."}
{"question": "How to handle panics in Rust?", "answer": "Use `panic!()` macro, but prefer `Result` or `Option` for recoverable errors."}
{"question": "What is the 'impl' block for?", "answer": "To define methods and associated functions for a type."}
{"question": "How to use the 'for' loop in Rust?", "answer": "`for i in 0..5 { ... }` for ranges, or `for item in collection { ... }` for iterators."}
{"question": "What is the 'as_ref' method?", "answer": "Converts a `Box<T>` to a `&T`. Example: `let s = Box::new(\"hello\"); let s_ref = s.as_ref();`"}
{"question": "How to use the 'match' expression with enums?", "answer": "`match value { Enum::Variant => ... }` to handle different enum variants."}
{"question": "What is the 'Rust' borrow checker?", "answer": "A compiler component that enforces borrowing rules to prevent data races."}
{"question": "How to create a tuple in Rust?", "answer": "`let t = (1, \"two\");` with optional type annotations."}
{"question": "What is the 'Rust' module system?", "answer": "Organizes code into hierarchies using `mod` blocks and `use` statements."}
{"question": "How to use the 'unwrap' method?", "answer": "Extracts the value from `Option` or `Result`, panicking if None/Err. Example: `value.unwrap()`"}
{"question": "What is the 'Rust' 'drop' trait?", "answer": "Allows custom cleanup logic when a value goes out of scope."}
{"question": "How to use the 'while let' loop?", "answer": "Continuously checks a pattern. Example: `while let Some(x) = iter.next() { ... }`"}
{"question": "What is the 'Rust' 'Box' type?", "answer": "A smart pointer that allocates data on the heap. Example: `Box::new(5)`"}
{"question": "How to define a constant in Rust?", "answer": "`const NAME: Type = value;` e.g., `const MAX: u8 = 255;`"}
{"question": "What is the 'Rust' 'ref' keyword in patterns?", "answer": "Matches a reference instead of moving the value. Example: `match &x { ref y => ... }`"}
{"question": "How to use the 'match' expression with guards?", "answer": "Add `if` conditions to patterns. Example: `match x { 1 | 2 if x > 0 => ... }`"}
{"question": "What is the 'Rust' 'enum' type?", "answer": "A type that can have multiple named variants. Example: `enum Color { Red, Green, Blue }`"}
{"question": "How to create a slice in Rust?", "answer": "`let s = &array[1..3];` to get a view of a portion of an array."}
{"question": "What is the 'Rust' 'lifetime' annotation?", "answer": "Specifies how long a reference is valid. Example: `fn longest<'a>(s1: &'a str, s2: &'a str) -> &'a str`"}
{"question": "How to use the 'Result' type for error handling?", "answer": "Return `Ok(T)` on success or `Err(E)` on failure. Use `?` to propagate errors."}
{"question": "What is the 'Rust' 'static' keyword?", "answer": "Indicates a reference with a lifetime that is valid for the entire program."}
{"question": "How to use the 'as' keyword for type conversion?", "answer": "Converts between types. Example: `let x = 5 as u8;`"}
{"question": "What is the 'Rust' 'panic!' macro?", "answer": "Causes a runtime panic. Example: `panic!(\"error message\");`"}
{"question": "How to create a closure in Rust?", "answer": "`let add = |a, b| a + b;` or with explicit types: `|a: i32, b: i32| -> i32 { ... }`"}
{"question": "What is the 'Rust' 'match' arm?", "answer": "A pattern and expression in a `match` block. Example: `Pattern => Expression`"}
{"question": "How to use the 'if let' expression?", "answer": "Simplifies checking for a single pattern. Example: `if let Some(x) = value { ... }`"}
{"question": "What is the 'Rust' 'Box' smart pointer?", "answer": "Provides heap allocation. Example: `let b = Box::new(5);`"}
{"question": "How to use the 'while' loop in Rust?", "answer": "`while condition { ... }` for looping while a condition is true."}
{"question": "What is the 'Rust' 'Option' enum?", "answer": "Represents a value that may be absent. `Some(T)` or `None`."}
{"question": "How to create a struct with named fields?", "answer": "`struct Point { x: i32, y: i32 }` then `Point { x: 1, y: 2 }`"}
{"question": "What is the 'Rust' 'pub' keyword?", "answer": "Makes a function, struct, or module accessible from other crates."}
{"question": "How to use the 'for' loop with iterators?", "answer": "`for item in iterator { ... }` to iterate over elements."}
{"question": "What is the 'Rust' 'as_ref' method?", "answer": "Returns a reference to the inner value. Example: `let s = Box::new(\"hello\"); s.as_ref()`"}
{"question": "How to handle multiple errors in Rust?", "answer": "Use `Result` with a custom error type or `anyhow::Result` for dynamic errors."}
{"question": "What is the 'Rust' 'lifetime' elision?", "answer": "Compiler's rules to infer lifetimes automatically in function signatures."}
{"question": "How to use the 'match' expression with wildcards?", "answer": "`_` matches any value. Example: `match x { 1 => \"one\", _ => \"other\" }`"}
{"question": "What is the 'Rust' 'Box' type used for?", "answer": "Heap allocation. Example: `Box::new(5)`"}
{"question": "How to create a tuple struct?", "answer": "`struct Point(i32, i32);` then `Point(1, 2)`"}
{"question": "What is the 'Rust' 'use' statement?", "answer": "Imports items into scope. Example: `use std::collections::HashMap;`"}
{"question": "How to use the 'as' keyword for type casting?", "answer": "Converts between types. Example: `let x = 5 as u8;`"}
{"question": "What is the 'Rust' 'pub' struct?", "answer": "A struct with public fields. Example: `pub struct Point { x: i32, y: i32 }`"}
{"question": "How to implement a trait for multiple types?", "answer": "Use `impl Trait for Type` for each type, or `impl<T: Trait> Trait for T` for generics."}
{"question": "What is the 'Rust' 'lifetime' parameter?", "answer": "Specifies the scope of a reference. Example: `fn foo<'a>(x: &'a str) -> &'a str`"}
{"question": "How to use the 'if let' expression for Option?", "answer": "`if let Some(x) = value { ... }` to handle the Some case."}
{"question": "What is the 'Rust' 'Result' type?", "answer": "Represents success (`Ok`) or failure (`Err`)."}
{"question": "How to create a vector with initial values?", "answer": "`vec![1, 2, 3]` or `Vec::with_capacity(5)` for pre-allocated size."}
{"question": "What is the 'Rust' 'pub' function?", "answer": "A function accessible from other crates. Example: `pub fn add(a: i32, b: i32) -> i32`"}
{"question": "How to use the 'match' expression with multiple patterns?", "answer": "`match x { 1 | 2 => ... }` to match any of the listed patterns."}
{"question": "What is the 'Rust' 'Box' smart pointer?", "answer": "Allocates data on the heap. Example: `Box::new(5)`"}
{"question": "How to create a slice from an array?", "answer": "`let slice = &array[1..3];` to get a reference to a subarray."}
{"question": "What is the 'Rust' 'as_ref' method?", "answer": "Returns a reference to the inner value. Example: `let s = Box::new(\"hello\"); s.as_ref()`"}
{"question": "How to handle errors with the 'Result' type?", "answer": "Use `match` or `?` to handle `Ok` or `Err` variants."}
{"question": "What is the 'Rust' 'pub' module?", "answer": "A module accessible from other crates. Example: `pub mod my_module`"}
{"question": "How to implement a trait for a generic type?", "answer": "`impl<T> Trait for T { ... }` for blanket implementations."}
{"question": "What is the 'Rust' 'lifetime' elision?", "answer": "Compiler infers lifetimes in function parameters and return values."}
{"question": "How to use the 'while let' loop?", "answer": "`while let Some(x) = value { ... }` to loop while a pattern matches."}
{"question": "What is the 'Rust' 'Option' type?", "answer": "Represents optional values. `Some(T)` or `None`."}
{"question": "How to create a struct with fields?", "answer": "`struct Point { x: i32, y: i32 }` then `Point { x: 1, y: 2 }`"}
{"question": "What is the 'Rust' 'pub' keyword?", "answer": "Exports items for use in other modules or crates."}
{"question": "How to use the 'match' expression with a default case?", "answer": "`_ => ...` to handle any unmatched pattern."}
{"question": "What is the 'Rust' 'Box' type?", "answer": "A smart pointer for heap-allocated data. Example: `Box::new(5)`"}
{"question": "How to create a tuple with multiple elements?", "answer": "`let t = (1, \"two\", 3.0);`"}
{"question": "What is the 'Rust' 'use' keyword?", "answer": "Imports items into scope. Example: `use std::vec::Vec;`"}
{"question": "How to handle panics in tests?", "answer": "Use `#[should_panic]` attribute to expect a panic in a test."}
{"question": "What is the 'Rust' 'pub' struct field?", "answer": "A field accessible from other crates. Example: `pub x: i32`"}
{"question": "How to create a vector with a specific capacity?", "answer": "`Vec::with_capacity(10)` to allocate space for 10 elements."}
{"question": "What is the 'Rust' 'as' operator?", "answer": "Converts between types. Example: `let x = 5 as u8;`"}
{"question": "How to use the 'if let' expression for Result?", "answer": "`if let Ok(x) = result { ... }` to handle the Ok case."}
{"question": "What is the 'Rust' 'lifetime' annotation?", "answer": "Specifies reference validity. Example: `fn longest<'a>(s1: &'a str, s2: &'a str) -> &'a str`"}
{"question": "How to implement a trait for a type?", "answer": "`impl Trait for Type { ... }` e.g., `impl Display for Point { ... }`"}
{"question": "What is the 'Rust' 'Box' smart pointer?", "answer": "Allocates data on the heap. Example: `Box::new(5)`"}
{"question": "How to create a slice from a vector?", "answer": "`let slice = &vec[1..3];` to get a reference to a subvector."}
{"question": "What is the 'Rust' 'pub' function?", "answer": "A function accessible from other crates. Example: `pub fn add(a: i32, b: i32) -> i32`"}
{"question": "How to use the 'match' expression with guards?", "answer": "Add `if` conditions to patterns. Example: `match x { 1 | 2 if x > 0 => ... }`"}
{"question": "What is the 'Rust' 'Option' enum?", "answer": "Represents optional values. `Some(T)` or `None`."}
{"question": "How to create a struct with named fields?", "answer": "`struct Point { x: i32, y: i32 }` then `Point { x: 1, y: 2 }`"}
{"question": "What is the 'Rust' 'pub' module?", "answer": "A module accessible from other crates. Example: `pub mod my_module`"}
{"question": "How to implement a trait for a generic type?", "answer": "`impl<T> Trait for T { ... }` for blanket implementations."}
{"question": "What is the 'Rust' 'lifetime' elision?", "answer": "Compiler infers lifetimes in function parameters and return values."}
{"question": "How to use the 'while let' loop?", "answer": "`while let Some(x) = value { ... }` to loop while a pattern matches."}
{"question": "What is the 'Rust' 'Result' type?", "answer": "Represents success (`Ok`) or failure (`Err`)."}
{"question": "What is the default visibility in Rust?", "answer": "Private."}
{"question": "How to declare a mutable variable?", "answer": "let mut x = 5;"}
{"question": "What is a 'match' expression used for?", "answer": "Pattern matching against values."}
{"question": "What is the purpose of 'Box' in Rust?", "answer": "Heap allocation for values."}
{"question": "How to create a vector?", "answer": "vec![1, 2, 3]"}
{"question": "What is the 'Option' enum?", "answer": "Represents a value that may be absent."}
{"question": "How to define a function?", "answer": "fn add(a: i32, b: i32) -> i32 { a + b }"}
{"question": "What is 'Rust's ownership system?", "answer": "Ensures memory safety without a garbage collector."}
{"question": "How to use a struct?", "answer": "struct Point { x: i32, y: i32 }"}
{"question": "What is a 'trait' in Rust?", "answer": "A collection of method signatures."}
{"question": "How to handle panics?", "answer": "Using 'panic!()' or 'unwrap()'."}
{"question": "What is 'lifetime' in Rust?", "answer": "A way to specify how long references are valid."}
{"question": "How to create a thread?", "answer": "use std::thread; thread::spawn(|| { ... });"}
{"question": "What is 'Arc' used for?", "answer": "Shared ownership across threads."}
{"question": "How to use a slice?", "answer": "&[i32] to reference a portion of a collection."}
{"question": "What is 'Cow' in Rust?", "answer": "A clone-on-write smart pointer."}
{"question": "How to implement a trait?", "answer": "impl Trait for Type { ... }"}
{"question": "What is 'Rust's 'pub' keyword?", "answer": "Makes items visible outside the module."}
{"question": "How to use 'if let'?", "answer": "Matches a single pattern and binds variables."}
{"question": "What is 'Rust's 'use' keyword?", "answer": "Brings items into scope."}
{"question": "How to create a tuple?", "answer": "(1, \"a\")"}
{"question": "What is 'Rust's 'self' keyword?", "answer": "Refers to the current instance in methods."}
{"question": "How to use 'match' with enums?", "answer": "Matches variants and extracts data."}
{"question": "What is 'Rust's 'as' operator?", "answer": "Used for type casting."}
{"question": "How to create a static variable?", "answer": "static X: i32 = 5;"}
{"question": "What is 'Rust's 'const' keyword?", "answer": "Defines a compile-time constant."}
{"question": "How to use 'Vec' for dynamic arrays?", "answer": "Vec<i32> or vec![...]."}
{"question": "What is 'Rust's 'pub use'?", "answer": "Re-exports items from another module."}
{"question": "How to handle errors with 'Result'?", "answer": "Matches Ok and Err variants."}
{"question": "What is 'Rust's 'drop' trait?", "answer": "Allows custom cleanup for types."}
{"question": "How to create a closure?", "answer": "|x| x + 1"}
{"question": "What is 'Rust's 'lifetime elision'?", "answer": "Compiler infers lifetimes automatically."}
{"question": "How to use 'RefCell' for interior mutability?", "answer": "RefCell<T> allows mutable borrowing at runtime."}
{"question": "What is 'Rust's 'async' keyword?", "answer": "Declares an asynchronous function."}
{"question": "How to use 'tokio' for async runtime?", "answer": "Use tokio::main attribute."}
{"question": "What is 'Rust's 'Send' trait?", "answer": "Marks types safe for cross-thread transfer."}
{"question": "How to use 'Mutex' for thread-safe data?", "answer": "Mutex<T> provides exclusive access."}
{"question": "What is 'Rust's 'lifetime parameter?", "answer": "Specifies how long a reference is valid."}
{"question": "How to use 'Rust's 'match' with guards?", "answer": "match x { y if condition => ... }"}
{"question": "What is 'Rust's 'derive' attribute?", "answer": "Automatically implements traits like Debug."}
{"question": "How to use 'Rust's 'lifetime bounds?", "answer": "fn foo<'a>(x: &'a i32) -> &'a i32 { ... }"}
{"question": "What is 'Rust's 'static' keyword?", "answer": "Indicates a reference with no lifetime restrictions."}
{"question": "How to use 'Rust's 'thread::join()?", "answer": "Waits for a thread to finish execution."}
{"question": "What is 'Rust's 'channel' for concurrency?", "answer": "Transmits data between threads."}
{"question": "How to use 'Rust's 'once_cell' crate?", "answer": "For lazy static initialization."}
{"question": "What is 'Rust's 'unsafe' block?", "answer": "Allows bypassing safety checks."}
{"question": "How to use 'Rust's 'RwLock'?", "answer": "Provides shared and exclusive access to data."}
{"question": "What is 'Rust's 'lifetime annotations?", "answer": "Explicitly specify reference lifetimes."}
{"question": "How to use 'Rust's 'thread_local!() macro?", "answer": "Declares a thread-local variable."}
{"question": "What is 'Rust's 'crossbeam' crate?", "answer": "Provides concurrency utilities like scoped threads."}
{"question": "How to use 'Rust's 'async/await'?", "answer": "Waits for a future to complete."}
{"question": "What is 'Rust's 'move' keyword in closures?", "answer": "Moves captured variables into the closure."}
{"question": "How to use 'Rust's 'Arc<Mutex<T>>'?", "answer": "Shared, thread-safe mutable data."}
{"question": "What is 'Rust's 'lifetime elision rules?", "answer": "Rules to infer lifetimes in function parameters."}
{"question": "How to use 'Rust's 'thread::spawn()?", "answer": "Creates a new thread with a closure."}
{"question": "What is 'Rust's 'const fn'?", "answer": "A function that can be evaluated at compile time."}
{"question": "How to use 'Rust's 'match' with 'ref'?", "answer": "Binds a reference to a value in a pattern."}
{"question": "What is 'Rust's 'lifetime bounds in traits?", "answer": "Specifies that a type must have a certain lifetime."}
{"question": "How to use 'Rust's 'once_cell::sync::Lazy'?", "answer": "For lazy initialization in a thread-safe way."}
{"question": "What is 'Rust's 'Send' and 'Sync' traits?", "answer": "Send allows moving across threads, Sync allows shared access."}
{"question": "How to use 'Rust's 'channel' for communication?", "answer": "Sender and Receiver types for message passing."}
{"question": "What is 'Rust's 'thread::scope()?", "answer": "Allows creating threads with a lifetime bound."}
{"question": "How to use 'Rust's 'async fn'?", "answer": "Defines an asynchronous function."}
{"question": "What is 'Rust's 'pin' keyword?", "answer": "Prevents a value from being moved."}
{"question": "How to use 'Rust's 'Box<dyn Trait>'?", "answer": "Dynamically sized type allocation."}
{"question": "What is 'Rust's 'lifetime parameters in structs?", "answer": "Specifies how long references in a struct live."}
{"question": "How to use 'Rust's 'std::sync::OnceLock'?", "answer": "Thread-safe lazy initialization."}
{"question": "What is 'Rust's 'async_std' crate?", "answer": "Alternative async runtime to Tokio."}
{"question": "How to use 'Rust's 'crossbeam::channel'?", "answer": "Provides cross-thread channels."}
{"question": "What is 'Rust's 'thread::available_parallelism()?", "answer": "Returns the number of available CPU cores."}
{"question": "How to use 'Rust's 'std::future::Future'?", "answer": "A trait for asynchronous computations."}
{"question": "What is 'Rust's 'std::task::Poll'?", "answer": "Indicates if a future is ready or pending."}
{"question": "How to use 'Rust's 'std::sync::MutexGuard'?", "answer": "A guard that holds a mutex lock."}
{"question": "What is 'Rust's 'std::rc::Rc'?", "answer": "Reference-counted pointer for single-threaded use."}
{"question": "How to use 'Rust's 'std::cell::Cell'?", "answer": "Allows interior mutability with copy types."}
{"question": "What is 'Rust's 'std::cell::RefCell'?", "answer": "Allows interior mutability with runtime checks."}
{"question": "How to use 'Rust's 'std::sync::Once'?", "answer": "Ensures a block of code runs once."}
{"question": "What is 'Rust's 'std::sync::Barrier'?", "answer": "Synchronizes multiple threads at a point."}
{"question": "How to use 'Rust's 'std::sync::Condvar'?", "answer": "Waits for a condition to be true."}
{"question": "What is 'Rust's 'std::sync::atomic'?", "answer": "Provides atomic types for concurrency."}
{"question": "How to use 'Rust's 'std::thread::yield_now()?", "answer": "Yields the current thread's time slice."}
{"question": "What is the difference between 'let' and 'const' in Rust?", "answer": "'let' declares a variable, which can be mutable. 'const' defines a compile-time constant, which must have an explicit type and is immutable by default.\n\n```rust\nlet x = 5;\nconst Y: i32 = 10;\n```"}
{"question": "How do you create a mutable variable in Rust?", "answer": "Use 'let mut' followed by the variable name and value.\n\n```rust\nlet mut count = 0;\ncount += 1;\n```"}
{"question": "What is the purpose of the 'match' expression in Rust?", "answer": "It enables pattern matching against a value, ensuring exhaustive checks and handling multiple cases.\n\n```rust\nmatch value {\n    1 => println!(\"One\"),\n    _ => println!(\"Other\"),\n}\n```"}
{"question": "How do you define a function in Rust?", "answer": "Use 'fn' followed by the function name, parameters, and body.\n\n```rust\nfn add(a: i32, b: i32) -> i32 {\n    a + b\n}\n```"}
{"question": "What is the 'Option' enum used for?", "answer": "To represent values that may be absent, with 'Some(T)' for present values and 'None' for absence.\n\n```rust\nlet x: Option<i32> = Some(5);\n```"}
{"question": "How do you handle errors in Rust?", "answer": "Use 'Result<T, E>' for success/failure, and 'match' or 'if let' to handle outcomes.\n\n```rust\nlet result: Result<i32, &str> = Ok(42);\nmatch result {\n    Ok(v) => println!(\"Value: {}\", v),\n    Err(e) => println!(\"Error: {}\", e),\n}\n```"}
{"question": "What is a 'struct' in Rust?", "answer": "A custom data type that groups related values. Define with 'struct' and access fields via '.'.\n\n```rust\nstruct Point { x: i32, y: i32 }\nlet p = Point { x: 1, y: 2 };\n```"}
{"question": "How does Rust handle memory management?", "answer": "Rust uses ownership and borrowing with a strict compile-time system to manage memory without a garbage collector.\n\n```rust\nlet s = String::from(\"hello\");\nlet s2 = s;\n// 's' is no longer valid here\n```"}
{"question": "What is the 'Box' type used for?", "answer": "To allocate values on the heap. It provides a pointer to the heap-allocated data.\n\n```rust\nlet b = Box::new(5);\n```"}
{"question": "How do you implement a trait for a type in Rust?", "answer": "Use 'impl Trait for Type' with the method definitions.\n\n```rust\ntrait MyTrait {\n    fn method(&self);\n}\n\nimpl MyTrait for i32 {\n    fn method(&self) { println!(\"{}\", self); }\n}\n```"}
{"question": "What is a 'lifetime' in Rust?", "answer": "A concept to ensure references are valid for the correct duration. Lifetimes are annotated with apostrophes.\n\n```rust\nfn longest<'a>(s1: &'a str, s2: &'a str) -> &'a str {\n    if s1.len() > s2.len() { s1 } else { s2 }\n}\n```"}
{"question": "How do you create a thread in Rust?", "answer": "Use 'std::thread::spawn' with a closure.\n\n```rust\nstd::thread::spawn(|| {\n    println!(\"Hello from thread!\");\n});\n```"}
{"question": "What is the 'RwLock' type used for?", "answer": "A synchronization primitive allowing multiple readers or one writer at a time.\n\n```rust\nuse std::sync::{Arc, RwLock};\nlet data = Arc::new(RwLock::new(0));\n```"}
{"question": "How do you declare a constant in Rust?", "answer": "Use 'const' with a type annotation and initializer.\n\n```rust\nconst PI: f64 = 3.14159;\n```"}
{"question": "What is the 'Vec' type in Rust?", "answer": "A dynamic array. It owns its data and can grow or shrink.\n\n```rust\nlet v = vec![1, 2, 3];\n```"}
{"question": "How do you use 'if let' for pattern matching?", "answer": "To handle a single case of a 'Result' or 'Option' without exhaustive matching.\n\n```rust\nif let Some(x) = value {\n    println!(\"Found: {}\", x);\n}\n```"}
{"question": "What is the 'Drop' trait in Rust?", "answer": "Allows custom cleanup when a value goes out of scope. Implement 'drop' method.\n\n```rust\nstruct MyStruct;\nimpl Drop for MyStruct {\n    fn drop(&mut self) { println!(\"Dropping!\"); }\n}\n```"}
{"question": "How do you create a slice in Rust?", "answer": "Use '[]' with a range. Slices reference a portion of a collection.\n\n```rust\nlet arr = [1, 2, 3, 4];\nlet slice = &arr[1..3]; // [2, 3]\n```"}
{"question": "What is the 'as' keyword used for in Rust?", "answer": "For type casting between primitive types.\n\n```rust\nlet x: i32 = 5;\nlet y: f64 = x as f64;\n```"}
{"question": "How do you handle panics in Rust?", "answer": "Use 'panic!' to crash the program. 'unwrap()' or 'expect()' will panic on 'None' or 'Err'.\n\n```rust\nlet x = Some(5);\nx.unwrap(); // Safe\nx.or(Err(\"error\"))?; // Propagates panic\n```"}
{"question": "What is the 'use' keyword for?", "answer": "To bring modules, types, or functions into scope.\n\n```rust\nuse std::collections::HashMap;\n```"}
{"question": "How do you implement a trait for multiple types?", "answer": "Use 'impl Trait for Type' for each type, or use a generic implementation with 'where' clauses.\n\n```rust\nimpl<T: std::fmt::Display> MyTrait for T {}\n```"}
{"question": "What is the 'Arc' type in Rust?", "answer": "A thread-safe reference-counted pointer. Use with 'Mutex' for shared ownership across threads.\n\n```rust\nuse std::sync::Arc;\nlet data = Arc::new(5);\n```"}
{"question": "How do you define a function with a default parameter?", "answer": "Rust does not support default parameters directly. Use 'Option' or 'match' to simulate them.\n\n```rust\nfn greet(name: Option<&str>) {\n    let name = name.unwrap_or(\"Guest\");\n    println!(\"Hello, {}!\", name);\n}\n```"}
{"question": "What is the 'match' expression's 'wildcard' pattern?", "answer": "The '_' pattern matches any value, used for unhandled cases.\n\n```rust\nmatch x {\n    1 => \"one\",\n    _ => \"other\",\n}\n```"}
{"question": "How do you create a tuple in Rust?", "answer": "Use parentheses with comma-separated values. Access via index or destructuring.\n\n```rust\nlet t = (1, \"two\");\nlet (a, b) = t;\n```"}
{"question": "What is the 'self' keyword in Rust?", "answer": "Refers to the current instance in method definitions. Used as the first parameter in 'impl' blocks.\n\n```rust\nimpl MyStruct {\n    fn new() -> Self { Self {} }\n}\n```"}
{"question": "How do you handle multiple errors in Rust?", "answer": "Use 'Result<T, E>' with 'map_err' or 'and_then' to chain error handling.\n\n```rust\nlet result = some_operation().map_err(|e| e.to_string());\n```"}
{"question": "What is the 'RefCell' type used for?", "answer": "Allows for interior mutability. It enforces borrowing rules at runtime.\n\n```rust\nuse std::cell::RefCell;\nlet data = RefCell::new(5);\nlet mut data = data.borrow_mut();\n```"}
{"question": "How do you create a static variable in Rust?", "answer": "Use 'static' with a type. It has a known lifetime and is stored in read-only memory.\n\n```rust\nstatic COUNT: i32 = 42;\n```"}
{"question": "What is the 'enum' type in Rust?", "answer": "A type that can have multiple variants. Used for representing a fixed set of possibilities.\n\n```rust\nenum Color { Red, Green, Blue }\n```"}
{"question": "How do you use 'while let' for pattern matching?", "answer": "Loops while a pattern matches. Useful for iterating over 'Option' values.\n\n```rust\nwhile let Some(x) = iter.next() {\n    println!(\"{}\", x);\n}\n```"}
{"question": "What is the 'lifetime' elision rule in Rust?", "answer": "Rust automatically infers lifetimes in function signatures when the input and output lifetimes match.\n\n```rust\nfn first_word(s: &str) -> &str { ... }\n```"}
{"question": "How do you create a vector with repeated values?", "answer": "Use 'vec![value; count]'.\n\n```rust\nlet v = vec![0; 5]; // [0, 0, 0, 0, 0]\n```"}
{"question": "What is the 'as_ref' method in Rust?", "answer": "Converts a 'Box<T>' to a '&T'. Useful for borrowing without consuming the value.\n\n```rust\nlet b = Box::new(5);\nlet r = b.as_ref();\n```"}
{"question": "How do you use 'match' with enums?", "answer": "Each variant can be matched explicitly.\n\n```rust\nenum Message { Quit, Move {x: i32, y: i32} }\n\nmatch msg {\n    Message::Quit => panic!(\"Quit\"),\n    Message::Move {x, y} => println!(\"Move to ({}, {})\", x, y),\n}\n```"}
{"question": "What is the 'Send' trait in Rust?", "answer": "Marks a type as safe to send between threads. Required for thread-safe data sharing.\n\n```rust\nimpl Send for MyType {}\n```"}
{"question": "How do you create a new String in Rust?", "answer": "Use 'String::new()' or 'String::from(\"text\")'.\n\n```rust\nlet s = String::from(\"hello\");\n```"}
{"question": "What is the 'Sync' trait in Rust?", "answer": "Marks a type as safe to share between threads. Required for thread-safe data access.\n\n```rust\nimpl Sync for MyType {}\n```"}
{"question": "How do you use 'if let' with 'Option'?", "answer": "Checks if 'Some' and binds the value, ignoring 'None'.\n\n```rust\nif let Some(x) = opt {\n    println!(\"Found: {}\", x);\n}\n```"}
{"question": "What is the 'as_ref' method for 'Option'?", "answer": "Returns a reference to the 'Some' value without consuming the 'Option'.\n\n```rust\nlet opt = Some(5);\nif let Some(x) = opt.as_ref() {\n    println!(\"{}\", x);\n}\n```"}
{"question": "How do you create a slice from a vector?", "answer": "Use 'vec[start..end]' syntax. Slices are references to a portion of the vector.\n\n```rust\nlet v = vec![1, 2, 3];\nlet slice = &v[1..3]; // [2, 3]\n```"}
{"question": "What is the 'panic!' macro used for?", "answer": "Causes the current thread to panic and unwind. Used for unrecoverable errors.\n\n```rust\npanic!(\"Something went wrong!\");\n```"}
{"question": "How do you use 'match' with 'Result'?", "answer": "Handles 'Ok' and 'Err' variants explicitly.\n\n```rust\nmatch result {\n    Ok(value) => println!(\"Success: {}\", value),\n    Err(e) => println!(\"Error: {}\", e),\n}\n```"}
{"question": "What is the 'Box' type's purpose?", "answer": "Allocates data on the heap. Useful for owning data and passing it around.\n\n```rust\nlet b = Box::new(5);\n```"}
{"question": "How do you create a new thread with a closure?", "answer": "Use 'std::thread::spawn' and pass a closure.\n\n```rust\nstd::thread::spawn(|| {\n    println!(\"Thread\");\n}).join().unwrap();\n```"}
{"question": "What is the 'as_mut' method for 'Box'?", "answer": "Converts a 'Box<T>' to a '&mut T'.\n\n```rust\nlet mut b = Box::new(5);\nlet r = b.as_mut();\n```"}
{"question": "How do you implement a method for a struct?", "answer": "Use 'impl StructName' and define methods with 'fn'.\n\n```rust\nstruct Point { x: i32, y: i32 }\n\nimpl Point {\n    fn distance(&self) -> i32 { self.x.pow(2) + self.y.pow(2) }\n}\n```"}
{"question": "What is the 'Option' type's 'None' variant?", "answer": "Represents the absence of a value. Used with 'Some(T)' for presence.\n\n```rust\nlet x: Option<i32> = None;\n```"}
{"question": "How do you use 'while let' for iteration?", "answer": "Loops while a pattern matches, useful for draining iterators.\n\n```rust\nwhile let Some(x) = iter.next() {\n    println!(\"{}\", x);\n}\n```"}
{"question": "What is the 'RwLock' type's 'read' method?", "answer": "Acquires a read lock, allowing multiple readers.\n\n```rust\nlet data = RwLock::new(0);\nlet data = data.read().unwrap();\n```"}
{"question": "How do you create a new 'Vec' with initial capacity?", "answer": "Use 'Vec::with_capacity(capacity)'.\n\n```rust\nlet v = Vec::with_capacity(10);\n```"}
{"question": "What is the 'as_str' method for 'String'?", "answer": "Converts a 'String' to a '&str'.\n\n```rust\nlet s = String::from(\"hello\");\nlet slice = s.as_str();\n```"}
{"question": "How do you use 'match' with 'Result' and 'Option'?", "answer": "Both are enums. 'match' can handle their variants.\n\n```rust\nmatch result {\n    Ok(x) => println!(\"{}\", x),\n    Err(e) => println!(\"{}\", e),\n}\n```"}
{"question": "What is the 'RwLock' type's 'write' method?", "answer": "Acquires a write lock, allowing exclusive access.\n\n```rust\nlet data = RwLock::new(0);\nlet mut data = data.write().unwrap();\n```"}
{"question": "How do you handle multiple threads in Rust?", "answer": "Use 'std::thread::spawn' and 'Arc<Mutex<T>>' for shared state.\n\n```rust\nuse std::sync::{Arc, Mutex};\nlet data = Arc::new(Mutex::new(0));\n```"}
{"question": "What is the 'as_ref' method for 'Result'?", "answer": "Returns a reference to the 'Ok' value or 'Err' value without consuming the 'Result'.\n\n```rust\nlet res: Result<i32, &str> = Ok(5);\nif let Ok(x) = res.as_ref() {\n    println!(\"{}\", x);\n}\n```"}
{"question": "How do you create a new 'String' from a 'Vec<u8>'?", "answer": "Use 'String::from_utf8(vec)'.\n\n```rust\nlet vec = vec![b'h', b'e', b'l', b'l', b'o'];\nlet s = String::from_utf8(vec).unwrap();\n```"}
{"question": "What is the 'as_mut' method for 'Result'?", "answer": "Converts a 'Result<T, E>' to a '&mut T' or '&mut E'.\n\n```rust\nlet mut res = Ok(5);\nif let Ok(x) = res.as_mut() {\n    *x += 1;\n}\n```"}
{"question": "How do you use 'if let' with 'Result'?", "answer": "Checks if 'Ok' and binds the value, ignoring 'Err'.\n\n```rust\nif let Ok(x) = result {\n    println!(\"{}\", x);\n}\n```"}
{"question": "What is the 'as_mut' method for 'Option'?", "answer": "Converts an 'Option<T>' to a '&mut T' if 'Some'.\n\n```rust\nlet mut opt = Some(5);\nif let Some(x) = opt.as_mut() {\n    *x += 1;\n}\n```"}
{"question": "How do you create a new 'Vec' with a specific type?", "answer": "Use 'Vec::new()' and specify the type with 'Box' or 'Vec<T>'.\n\n```rust\nlet v: Vec<i32> = Vec::new();\n```"}
{"question": "What is the 'as_ref' method for 'Vec'?", "answer": "Converts a 'Vec<T>' to a '&[T]' slice.\n\n```rust\nlet v = vec![1, 2, 3];\nlet slice = v.as_ref();\n```"}
{"question": "How do you implement a trait for a type?", "answer": "Use 'impl Trait for Type' with the method definitions.\n\n```rust\ntrait MyTrait {\n    fn method(&self);\n}\n\nimpl MyTrait for i32 {\n    fn method(&self) { println!(\"{}\", self); }\n}\n```"}
{"question": "What is the 'as_mut' method for 'Box'?", "answer": "Converts a 'Box<T>' to a '&mut T'.\n\n```rust\nlet mut b = Box::new(5);\nlet r = b.as_mut();\n```"}
{"question": "How do you create a new 'String' from a 'str'?", "answer": "Use 'String::from(\"text\")'.\n\n```rust\nlet s = String::from(\"hello\");\n```"}
{"question": "What is the 'as_ref' method for 'Box'?", "answer": "Converts a 'Box<T>' to a '&T'.\n\n```rust\nlet b = Box::new(5);\nlet r = b.as_ref();\n```"}
{"question": "How do you handle 'Result' errors with 'map'?", "answer": "Use 'map' to transform 'Ok' values, 'map_err' for 'Err' values.\n\n```rust\nlet res = Ok(5).map(|x| x * 2).map_err(|e| e.to_string());\n```"}
{"question": "What is the 'as_str' method for 'String'?", "answer": "Converts a 'String' to a '&str'.\n\n```rust\nlet s = String::from(\"hello\");\nlet slice = s.as_str();\n```"}
{"question": "How do you create a new 'String' from a 'char'?", "answer": "Use 'String::from(\"char\")' or 'push' methods.\n\n```rust\nlet s = String::from('a');\n```"}
{"question": "What is the 'as_mut' method for 'Result'?", "answer": "Converts a 'Result<T, E>' to a '&mut T' or '&mut E'.\n\n```rust\nlet mut res = Ok(5);\nif let Ok(x) = res.as_mut() {\n    *x += 1;\n}\n```"}
{"question": "How do you use 'match' with 'Option' and 'Result'?", "answer": "Both are enums. 'match' can handle their variants.\n\n```rust\nmatch opt {\n    Some(x) => println!(\"{}\", x),\n    None => println!(\"No value\"),\n}\n```"}
{"question": "What is the 'as_ref' method for 'Result'?", "answer": "Returns a reference to the 'Ok' or 'Err' value without consuming the 'Result'.\n\n```rust\nlet res: Result<i32, &str> = Ok(5);\nif let Ok(x) = res.as_ref() {\n    println!(\"{}\", x);\n}\n```"}
{"question": "How do you create a new 'Vec' with initial values?", "answer": "Use 'vec![value1, value2, ...]'.\n\n```rust\nlet v = vec![1, 2, 3];\n```"}
{"question": "What is the 'as_mut' method for 'Vec'?", "answer": "Converts a 'Vec<T>' to a '&mut [T]' slice.\n\n```rust\nlet mut v = vec![1, 2, 3];\nlet slice = v.as_mut();\n```"}
{"question": "How do you create a new 'String' from a 'Vec<u8>'?", "answer": "Use 'String::from_utf8(vec)'.\n\n```rust\nlet vec = vec![b'h', b'e', b'l', b'l', b'o'];\nlet s = String::from_utf8(vec).unwrap();\n```"}
{"question": "What is the 'as_str' method for 'String'?", "answer": "Converts a 'String' to a '&str'.\n\n```rust\nlet s = String::from(\"hello\");\nlet slice = s.as_str();\n```"}
{"question": "How do you create a new 'String' from a 'char'?", "answer": "Use 'String::from(\"char\")' or 'push' methods.\n\n```rust\nlet s = String::from('a');\n```"}
{"question": "What is the 'as_mut' method for 'Option'?", "answer": "Converts an 'Option<T>' to a '&mut T' if 'Some'.\n\n```rust\nlet mut opt = Some(5);\nif let Some(x) = opt.as_mut() {\n    *x += 1;\n}\n```"}
{"question": "How do you create a new 'String' from a 'str'?", "answer": "Use 'String::from(\"text\")'.\n\n```rust\nlet s = String::from(\"hello\");\n```"}
{"question": "What is the 'as_ref' method for 'Vec'?", "answer": "Converts a 'Vec<T>' to a '&[T]' slice.\n\n```rust\nlet v = vec![1, 2, 3];\nlet slice = v.as_ref();\n```"}
{"question": "How do you create a new 'String' from a 'String'?", "answer": "Use 'to_string()' or 'clone()'.\n\n```rust\nlet s = \"hello\".to_string();\n```"}
{"question": "What is the 'as_ref' method for 'Result'?", "answer": "Returns a reference to the 'Ok' or 'Err' value without consuming the 'Result'.\n\n```rust\nlet res: Result<i32, &str> = Ok(5);\nif let Ok(x) = res.as_ref() {\n    println!(\"{}\", x);\n}\n```"}
{"question": "How do you create a new 'String' from a 'StringSlice'?", "answer": "Use 'to_string()' or 'String::from()'.\n\n```rust\nlet s = \"hello\".to_string();\n```"}
{"question": "What is the 'as_mut' method for 'Box'?", "answer": "Converts a 'Box<T>' to a '&mut T'.\n\n```rust\nlet mut b = Box::new(5);\nlet r = b.as_mut();\n```"}
{"question": "How do you create a new 'String' from a 'char'?", "answer": "Use 'String::from(\"char\")' or 'push' methods.\n\n```rust\nlet s = String::from('a');\n```"}
{"question": "What is the 'as_ref' method for 'Box'?", "answer": "Converts a 'Box<T>' to a '&T'.\n\n```rust\nlet b = Box::new(5);\nlet r = b.as_ref();\n```"}
{"question": "How do you create a new 'String' from a 'str'?", "answer": "Use 'String::from(\"text\")'.\n\n```rust\nlet s = String::from(\"hello\");\n```"}
{"question": "What is the 'as_mut' method for 'Result'?", "answer": "Converts a 'Result<T, E>' to a '&mut T' or '&mut E'.\n\n```rust\nlet mut res = Ok(5);\nif let Ok(x) = res.as_mut() {\n    *x += 1;\n}\n```"}
{"question": "How do you create a new 'String' from a 'String'?", "answer": "Use 'to_string()' or 'clone()'.\n\n```rust\nlet s = \"hello\".to_string();\n```"}
{"question": "What is the 'as_ref' method for 'Option'?", "answer": "Returns a reference to the 'Some' value without consuming the 'Option'.\n\n```rust\nlet opt = Some(5);\nif let Some(x) = opt.as_ref() {\n    println!(\"{}\", x);\n}\n```"}
{"question": "How do you create a new 'Vec' with a specific type?", "answer": "Use 'Vec::new()' and specify the type with 'Box' or 'Vec<T>'.\n\n```rust\nlet v: Vec<i32> = Vec::new();\n```"}
{"question": "What is the 'as_mut' method for 'Vec'?", "answer": "Converts a 'Vec<T>' to a '&mut [T]' slice.\n\n```rust\nlet mut v = vec![1, 2, 3];\nlet slice = v.as_mut();\n```"}
{"question": "How do you create a new 'String' from a 'StringSlice'?", "answer": "Use 'to_string()' or 'String::from()'.\n\n```rust\nlet s = \"hello\".to_string();\n```"}
{"question": "What is the 'as_ref' method for 'String'?", "answer": "Converts a 'String' to a '&str'.\n\n```rust\nlet s = String::from(\"hello\");\nlet slice = s.as_ref();\n```"}
{"question": "How do you create a new 'String' from a 'char'?", "answer": "Use 'String::from(\"char\")' or 'push' methods.\n\n```rust\nlet s = String::from('a');\n```"}
{"question": "What is the 'as_mut' method for 'String'?", "answer": "Converts a 'String' to a '&mut str'.\n\n```rust\nlet mut s = String::from(\"hello\");\nlet slice = s.as_mut();\n```"}
{"question": "What is the syntax for declaring a variable in Rust?", "answer": "let x = 5;"}
{"question": "How do you create a mutable variable?", "answer": "let mut x = 5;"}
{"question": "What is the difference between 'let' and 'const'?", "answer": "'let' declares a variable, 'const' defines a compile-time constant."}
{"question": "How to comment a single line?", "answer": "// This is a comment"}
{"question": "How to comment multiple lines?", "answer": "/* This is a multi-line comment */"}
{"question": "What are Rust's primitive data types?", "answer": "i8, u8, i16, u16, i32, u32, i64, u64, isize, usize, f32, f64, bool, char, str"}
{"question": "How to define a function?", "answer": "fn my_function() { ... }"}
{"question": "What is the 'match' expression used for?", "answer": "Pattern matching on values."}
{"question": "How to create a vector?", "answer": "let v = vec![1, 2, 3];"}
{"question": "What is the purpose of 'pub'?", "answer": "Makes a item public (visible outside the module)."}
{"question": "How to handle errors with Result?", "answer": "Use match or ? operator to handle Ok/Err variants."}
{"question": "What is a tuple?", "answer": "A collection of values with fixed size and types."}
{"question": "How to define a struct?", "answer": "struct Point { x: i32, y: i32 }"}
{"question": "What is the 'self' keyword in methods?", "answer": "Refers to the instance of the type the method is called on."}
{"question": "How to implement a trait?", "answer": "impl Trait for Type { ... }"}
{"question": "What is the 'Option' type?", "answer": "Represents a value that may be present (Some) or absent (None)."}
{"question": "How to use the 'as' keyword?", "answer": "For type casting, e.g., 5 as u8"}
{"question": "What is the 'use' statement for?", "answer": "Brings items into scope, e.g., use std::collections::HashMap;"}
{"question": "How to create a new thread?", "answer": "use std::thread; thread::spawn(|| { ... });"}
{"question": "What is 'Arc' used for?", "answer": "Thread-safe reference counting."}
{"question": "How to share data between threads?", "answer": "Use 'Arc<T>' for shared ownership and 'Mutex<T>' for synchronization."}
{"question": "What is the 'Send' trait?", "answer": "Marks types that can be safely sent between threads."}
{"question": "How to use async functions?", "answer": "async fn my_async() { ... }"}
{"question": "What is 'tokio' in Rust?", "answer": "A runtime for writing asynchronous applications."}
{"question": "How to handle panics?", "answer": "Use 'panic!' macro or 'unwrap()' to trigger a panic."}
{"question": "What is the 'Result' type?", "answer": "An enum representing success (Ok) or failure (Err)."}
{"question": "How to use the 'if let' pattern?", "answer": "Simplifies checking for a single pattern in an Option/Result."}
{"question": "What is the 'drop' trait?", "answer": "Allows custom cleanup logic when a value goes out of scope."}
{"question": "How to create a slice?", "answer": "&array[0..2] or &string[0..3]"}
{"question": "What is the 'lifetime' parameter?", "answer": "Specifies how long references are valid."}
{"question": "How to use the 'derive' attribute?", "answer": "Adds implementations for traits like Debug, Clone, Eq."}
{"question": "What is 'Rc<T>'?", "answer": "A reference-counted pointer for single-threaded sharing."}
{"question": "How to handle multiple errors with ? operator?", "answer": "Requires the types to be compatible via From trait."}
{"question": "What is the 'match' arm syntax?", "answer": "Pattern => expression"}
{"question": "How to use the 'for' loop?", "answer": "for i in 0..5 { ... }"}
{"question": "What is the 'const' keyword for?", "answer": "Declares a compile-time constant."}
{"question": "How to use the 'as' operator for casting?", "answer": "5 as u32"}
{"question": "What is the 'panic!' macro?", "answer": "Causes a runtime panic and unwinds the stack."}
{"question": "How to use the 'if' condition?", "answer": "if x > 5 { ... } else { ... }"}
{"question": "What is the 'loop' keyword?", "answer": "Creates an infinite loop."}
{"question": "How to use the 'while' loop?", "answer": "while x < 5 { ... }"}
{"question": "What is the 'enum' type?", "answer": "A type that can be one of several variants."}
{"question": "How to use the 'match' with enums?", "answer": "match value { Variant1 => ..., Variant2 => ... }"}
{"question": "What is the 'Box<T>' type?", "answer": "Allocates data on the heap."}
{"question": "How to use the 'ref' keyword in patterns?", "answer": "Matches a reference without moving the value."}
{"question": "What is the 'Rust' ownership system?", "answer": "Ensures memory safety by tracking data ownership."}
{"question": "How to use the 'move' keyword in closures?", "answer": "Forces the closure to take ownership of captured variables."}
{"question": "What is the 'lifetime' elision rule?", "answer": "Rust infers lifetimes in common patterns."}
{"question": "How to use the 'as_ref' method?", "answer": "Converts a Box<T> to a &T."}
{"question": "What is the 'thread::join()' method?", "answer": "Waits for a thread to finish execution."}
{"question": "How to use the 'Mutex<T>' type?", "answer": "For thread-safe data access, e.g., let m = Mutex::new(5);"}
{"question": "What is the 'Send' trait?", "answer": "Indicates a type can be safely sent between threads."}
{"question": "How to use the 'async/await' syntax?", "answer": "await future in an async function."}
{"question": "What is the 'Future' trait?", "answer": "Represents a value that may not be available yet."}
{"question": "How to use the 'channel' API?", "answer": "use std::sync::mpsc; let (tx, rx) = mpsc::channel();"}
{"question": "What is the 'crossbeam' crate?", "answer": "Provides concurrency utilities like scoped threads."}
{"question": "How to use the 'rayon' crate?", "answer": "For parallel iterators and data processing."}
{"question": "What is the 'once_cell' crate?", "answer": "Provides lazy initialization for static variables."}
{"question": "How to use the 'lazy_static' macro?", "answer": "Declares static variables with lazy evaluation."}
{"question": "What is the 'thread_local!' macro?", "answer": "Creates a static variable with thread-local storage."}
{"question": "How to use the 'scoped' threads?", "answer": "use std::thread; thread::scope(|s| { s.spawn(|| { ... }); });"}
{"question": "What is the 'thread::spawn' function?", "answer": "Creates a new thread and returns a JoinHandle."}
{"question": "How to use the 'thread::sleep' function?", "answer": "thread::sleep(Duration::from_secs(1));"}
{"question": "What is the 'thread::available_parallelism' function?", "answer": "Returns the number of logical cores available."}
{"question": "How to use the 'thread::Builder' API?", "answer": "Customizes thread attributes before spawning."}
{"question": "What is the 'thread::LocalKey' type?", "answer": "Stores thread-local data with a key."}
{"question": "How to use the 'thread::Local' trait?", "answer": "For thread-local storage with a custom type."}
{"question": "What is the 'thread::panicking' function?", "answer": "Returns true if the current thread is panicking."}
{"question": "How to use the 'thread::unpark' method?", "answer": "Wakes up a thread that's parked."}
{"question": "What is the 'thread::yield_now' function?", "answer": "Yields the current thread's time slice."}
{"question": "How to use the 'thread::Builder::name' method?", "answer": "Sets a name for the thread."}
{"question": "What is the 'thread::Builder::stack_size' method?", "answer": "Configures the thread's stack size."}
{"question": "How to use the 'thread::Builder::spawn' method?", "answer": "Spawns a new thread with custom settings."}
{"question": "What is the 'thread::Builder::spawn' method?", "answer": "Spawns a new thread with custom settings."}
{"question": "What is the primary purpose of the 'let' keyword in Rust?", "answer": "Declares a variable."}
{"question": "How do you declare a constant in Rust?", "answer": "Using 'const' keyword."}
{"question": "What is the difference between a String and a str?", "answer": "String is heap-allocated, str is a string slice."}
{"question": "What is the role of the 'mut' keyword?", "answer": "Allows variable to be mutable."}
{"question": "How to create a new thread in Rust?", "answer": "Use std::thread::spawn(|| { ... });"}
{"question": "What is the 'match' expression used for?", "answer": "Pattern matching against values."}
{"question": "What is the 'Option' enum used for?", "answer": "Represents optional values (Some/T None)."}
{"question": "What is a 'struct' in Rust?", "answer": "User-defined data type with named fields."}
{"question": "How to define a function in Rust?", "answer": "Using 'fn' keyword."}
{"question": "What is the 'Rust' ownership system?", "answer": "Manages memory via strict rules for variable ownership."}
{"question": "What is a 'trait' in Rust?", "answer": "Defines shared behavior for types."}
{"question": "How to handle errors in Rust?", "answer": "Using 'Result' and 'Option' types."}
{"question": "What is the 'Box' type used for?", "answer": "Heap allocation for values."}
{"question": "What is the 'lifetime' parameter in Rust?", "answer": "Specifies how long references are valid."}
{"question": "What is the 'RwLock' type?", "answer": "Allows multiple readers or one writer."}
{"question": "How to create a new vector in Rust?", "answer": "Using vec![...], or Vec::new()."}
{"question": "What is the 'as' keyword used for?", "answer": "Type casting or renaming imports."}
{"question": "What is the 'use' keyword for?", "answer": "Brings modules into scope."}
{"question": "What is the 'pub' keyword?", "answer": "Makes items public (visible outside module)."}
{"question": "What is the 'self' keyword in Rust?", "answer": "Refers to the current type in methods."}
{"question": "What is the 'impl' block?", "answer": "Contains method implementations for a type."}
{"question": "What is the 'drop' trait?", "answer": "Allows custom cleanup code for types."}
{"question": "What is the 'lifetime elision' rule?", "answer": "Infer lifetimes automatically in function signatures."}
{"question": "What is the 'static' keyword?", "answer": "Indicates a reference with no lifetime constraints."}
{"question": "What is the 'Rust' borrow checker?", "answer": "Enforces borrowing rules at compile time."}
{"question": "What is the 'move' keyword in closures?", "answer": "Forces closure to take ownership of captured variables."}
{"question": "What is the 'trait object'?", "answer": "A trait can be used as a type (e.g., Box<dyn Trait>)."}
{"question": "How to create a new array in Rust?", "answer": "Using [value; length], or Array::new()."}
{"question": "What is the 'Rust' module system?", "answer": "Organizes code into namespaces."}
{"question": "What is the 'derive' attribute?", "answer": "Automatically implements common traits for a type."}
{"question": "What is the 'panic!' macro?", "answer": "Causes a runtime panic."}
{"question": "What is the 'assert_eq!' macro?", "answer": "Checks if two values are equal, panics otherwise."}
{"question": "What is the 'Rust' 'if let' syntax?", "answer": "Matches a single pattern and binds variables."}
{"question": "What is the 'Rust' 'for' loop used for?", "answer": "Iterates over collections or ranges."}
{"question": "What is the 'Rust' 'match' arm?", "answer": "A pattern and corresponding code block."}
{"question": "What is the 'Rust' 'enum' type?", "answer": "Defines a type with multiple variants."}
{"question": "What is the 'Rust' 'lifetime' annotation?", "answer": "Specifies reference validity (e.g., 'a)."}
{"question": "What is the 'Rust' 'as_ref' method?", "answer": "Converts a type to a reference."}
{"question": "What is the 'Rust' 'as_mut' method?", "answer": "Converts a type to a mutable reference."}
{"question": "What is the 'Rust' 'Box::new' function?", "answer": "Allocates a value on the heap."}
{"question": "What is the 'Rust' 'Vec' type?", "answer": "Dynamic array with heap allocation."}
{"question": "What is the 'Rust' 'match' expression's 'default' arm?", "answer": "Matches any value not covered by other arms."}
{"question": "What is the 'Rust' 'Option::unwrap' method?", "answer": "Returns the value inside Some, panics otherwise."}
{"question": "What is the 'Rust' 'Result::ok' method?", "answer": "Extracts the Ok value, if present."}
{"question": "What is the 'Rust' 'RwLock' vs 'Mutex'?", "answer": "RwLock allows multiple readers, Mutex allows one writer."}
{"question": "What is the 'Rust' 'Arc' type?", "answer": "Atomic reference-counted pointer for shared ownership."}
{"question": "What is the 'Rust' 'thread::spawn' function?", "answer": "Creates a new thread."}
{"question": "What is the 'Rust' 'channel' type?", "answer": "Used for communication between threads."}
{"question": "What is the 'Rust' 'async' keyword?", "answer": "Defines an asynchronous function."}
{"question": "What is the 'Rust' 'await' keyword?", "answer": "Waits for an asynchronous task to complete."}
{"question": "What is the 'Rust' 'Send' trait?", "answer": "Indicates a type can be safely sent between threads."}
{"question": "What is the 'Rust' 'Sync' trait?", "answer": "Indicates a type can be safely shared between threads."}
{"question": "What is the 'Rust' 'crossbeam' crate used for?", "answer": "Provides concurrency utilities like scoped threads."}
{"question": "What is the 'Rust' 'once_cell' crate?", "answer": "Provides lazy initialization for statics."}
{"question": "What is the 'Rust' 'thread_local!' macro?", "answer": "Declares a thread-local variable."}
{"question": "What is the 'Rust' 'crossbeam-channel' crate?", "answer": "Provides channels for thread communication."}
{"question": "What is the 'Rust' 'tokio' crate?", "answer": "Asynchronous runtime for non-blocking I/O."}
{"question": "What is the 'Rust' 'async-std' crate?", "answer": "Provides asynchronous utilities for std."}
{"question": "What is the 'Rust' 'join' method for threads?", "answer": "Waits for a thread to complete."}
{"question": "What is the 'Rust' 'scoped' thread?", "answer": "A thread that borrows data from its parent."}
{"question": "What is the 'Rust' 'RwLockReadGuard'?", "answer": "A guard for read-only access to RwLock."}
{"question": "What is the 'Rust' 'RwLockWriteGuard'?", "answer": "A guard for write access to RwLock."}
{"question": "What is the 'Rust' 'MutexGuard'?", "answer": "A guard for exclusive access to Mutex."}
{"question": "What is the 'Rust' 'Arc<Mutex<T>>' pattern?", "answer": "Shared ownership with exclusive access."}
{"question": "What is the 'Rust' 'thread::available_parallelism' function?", "answer": "Returns the number of available CPU cores."}
{"question": "What is the 'Rust' 'thread::yield_now' function?", "answer": "Yields the current thread to the scheduler."}
{"question": "What is the 'Rust' 'thread::sleep' function?", "answer": "Suspends the thread for a duration."}
{"question": "What is the 'Rust' 'crossbeam::scope' function?", "answer": "Creates a scoped thread."}
{"question": "What is the 'Rust' 'once_cell::sync::Lazy' type?", "answer": "Thread-safe lazy initialization."}
{"question": "What is the 'Rust' 'std::sync::mpsc' module?", "answer": "Provides multiple-producer, single-consumer channels."}
{"question": "What is the 'Rust' 'std::sync::atomic' module?", "answer": "Provides atomic types for concurrency."}
{"question": "What is the 'Rust' 'std::sync::Barrier' type?", "answer": "Synchronizes multiple threads at a point."}
{"question": "What is the 'Rust' 'std::thread::LocalKey' type?", "answer": "Thread-local storage key."}
{"question": "What is the 'Rust' 'std::sync::Once' type?", "answer": "Ensures a block of code runs once."}
{"question": "What is the 'Rust' 'std::sync::Mutex' type?", "answer": "Provides mutual exclusion for shared data."}
{"question": "What is the 'Rust' 'std::sync::RwLock' type?", "answer": "Provides read-write locking for shared data."}
{"question": "What is the 'Rust' 'std::sync::Condvar' type?", "answer": "Allows threads to wait for a condition."}
{"question": "What is the 'Rust' 'std::sync::mpsc::Sender' type?", "answer": "Sends values to a channel."}
{"question": "What is the 'Rust' 'std::sync::mpsc::Receiver' type?", "answer": "Receives values from a channel."}
{"question": "What is the 'Rust' 'std::sync::OnceLock' type?", "answer": "Lazy initialization that's safe for statics."}
{"question": "What is the 'Rust' 'std::sync::atomic::AtomicUsize' type?", "answer": "Atomic counter for shared data."}
{"question": "What is the 'Rust' 'std::sync::atomic::Ordering' enum?", "answer": "Specifies memory ordering for atomic operations."}
{"question": "What is the 'Rust' 'std::sync::MutexGuard' type?", "answer": "Guard for exclusive access to a Mutex."}
{"question": "What is the 'Rust' 'std::sync::RwLockReadGuard' type?", "answer": "Guard for read-only access to an RwLock."}
{"question": "What is the 'Rust' 'std::sync::RwLockWriteGuard' type?", "answer": "Guard for write access to an RwLock."}
{"question": "What is the 'Rust' 'std::thread::Builder' type?", "answer": "Configures and creates threads."}
{"question": "What is the 'Rust' 'std::thread::current' function?", "answer": "Returns the current thread's handle."}
{"question": "What is the difference between let and const in Rust?", "answer": "`let` declares a variable, while `const` defines a compile-time constant. Variables can be reassigned unless marked `final`, but constants are immutable and must have a type specified."}
{"question": "How do you create a mutable variable in Rust?", "answer": "Use `let mut variable_name = value;` to declare a mutable variable."}
{"question": "What is the purpose of the `match` expression in Rust?", "answer": "`match` is used for pattern matching, allowing you to compare a value against multiple patterns and execute code based on the matching pattern."}
{"question": "How do you handle panics in Rust?", "answer": "Use `panic!()` to trigger a panic, and `catch_unwind()` with `std::panic::catch_unwind()` to handle it."}
{"question": "What is a Rust slice?", "answer": "A slice is a reference to a contiguous sequence of elements in a collection, like `&[T]` for a slice of a vector."}
{"question": "How do you implement a trait for a type in Rust?", "answer": "Use `impl Trait for Type { ... }` to implement a trait for a specific type."}
{"question": "What is the `Option` type used for?", "answer": "`Option` represents an optional value, either `Some(T)` or `None`, to handle absence of a value safely."}
{"question": "How do you create a thread in Rust?", "answer": "Use `std::thread::spawn(|| { ... });` to create a new thread."}
{"question": "What is the `Box` type in Rust?", "answer": "`Box<T>` is a smart pointer that allocates data on the heap, useful for owning data and managing memory."}
{"question": "How do you borrow a reference in Rust?", "answer": "Use `&` for immutable borrowing or `&mut` for mutable borrowing, ensuring no data races."}
{"question": "What is the `RwLock` type used for?", "answer": "`RwLock<T>` allows multiple readers or a single writer, providing fine-grained concurrency control."}
{"question": "How do you define a struct in Rust?", "answer": "Use `struct StructName { field: Type }` to define a struct with fields."}
{"question": "What is the `?` operator in Rust?", "answer": "The `?` operator propagates errors from a function that returns a `Result` or `Option` type."}
{"question": "How do you use the `while let` loop in Rust?", "answer": "`while let` pattern matches a value and loops as long as the pattern matches, e.g., `while let Some(x) = rx.recv() { ... }`."}
{"question": "What is the `Arc` type in Rust?", "answer": "`Arc<T>` is a thread-safe reference-counted pointer, allowing shared ownership across threads."}
{"question": "How do you handle multiple ownership in Rust?", "answer": "Use `Arc` for thread-safe shared ownership or `Rc` for single-threaded ownership."}
{"question": "What is the `enum` type in Rust?", "answer": "`enum` defines a type that can have multiple variants, e.g., `enum Result<T, E> { Ok(T), Err(E) }`."}
{"question": "How do you create a constant in Rust?", "answer": "Use `const CONSTANT_NAME: Type = value;` to define a constant with a specified type."}
{"question": "What is the `lifetime` system in Rust?", "answer": "Lifetimes ensure references are valid for the correct duration, preventing dangling references."}
{"question": "How do you use the `as` keyword in Rust?", "answer": "`as` is used for type casting, e.g., `let x: u8 = 100 as u8;`."}
{"question": "What is the `panic!` macro used for?", "answer": "`panic!` triggers a runtime panic, causing the program to unwind and terminate."}
{"question": "How do you use the `if let` expression in Rust?", "answer": "`if let` checks if a value matches a pattern and executes code if it does, e.g., `if let Some(x) = value { ... }`."}
{"question": "What is the `Vec` type in Rust?", "answer": "`Vec<T>` is a growable array type, allocated on the heap, with methods like `push()` and `pop()`."}
{"question": "How do you implement a custom trait for a type?", "answer": "Use `impl Trait for Type { ... }` to provide method implementations for a type."}
{"question": "What is the `use` keyword used for?", "answer": "`use` brings items (functions, modules, types) into scope, e.g., `use std::collections::HashMap;`."}
{"question": "How do you create a channel in Rust?", "answer": "Use `std::sync::mpsc::channel()` to create a multi-producer, single-consumer channel."}
{"question": "What is the `#[derive(Debug)]` attribute for?", "answer": "It automatically implements the `Debug` trait for a struct or enum, enabling printing with `{:?}`."}
{"question": "How do you handle errors in Rust?", "answer": "Use `Result<T, E>` for recoverable errors and `Option<T>` for optional values."}
{"question": "What is the `Box::new()` function used for?", "answer": "`Box::new(value)` allocates a value on the heap and returns a `Box<T>` pointer."}
{"question": "How do you use the `match` arm for a range?", "answer": "Use `range => ...` in a `match` arm, e.g., `1..=5 => println!(\"InRange\")`."}
{"question": "What is the `Rc` type in Rust?", "answer": "`Rc<T>` is a reference-counted pointer for single-threaded shared ownership."}
{"question": "How do you define a function in Rust?", "answer": "Use `fn function_name(parameters) -> return_type { ... }` to define a function."}
{"question": "What is the `?` operator's behavior with `Result`?", "answer": "It returns the inner value if `Ok`, or propagates the `Err` value from the function."}
{"question": "How do you create a thread-safe data structure?", "answer": "Use `Arc<Mutex<T>>` for thread-safe shared mutable data, or `Arc<RwLock<T>>` for read-write access."}
{"question": "What is the `as_ref()` method used for?", "answer": "`as_ref()` converts a `Box<T>` to a `&T`, allowing shared access without consuming the box."}
{"question": "How do you use the `while` loop in Rust?", "answer": "`while condition { ... }` executes code repeatedly while the condition is true."}
{"question": "What is the `impl` block in Rust?", "answer": "`impl` defines method implementations for a type, struct, or trait."}
{"question": "How do you use the `match` expression for enums?", "answer": "`match` allows exhaustive pattern matching on enum variants, e.g., `match result { Ok(x) => x, Err(e) => e }`."}
{"question": "What is the `pub` keyword used for?", "answer": "`pub` makes a function, struct, or module public, accessible from other crates."}
{"question": "How do you use the `?` operator with `Option`?", "answer": "It returns the inner value if `Some`, or `None` from the function if the value is `None`."}
{"question": "What is the `lifetime` parameter in Rust?", "answer": "It specifies how long a reference is valid, e.g., `fn foo<'a>(x: &'a i32) -> &'a i32`."}
{"question": "How do you create a static variable in Rust?", "answer": "Use `static VAR: Type = value;` for a variable with a fixed address in memory."}
{"question": "What is the `drop` trait in Rust?", "answer": "`drop` is a trait with a `drop` method called when a value goes out of scope."}
{"question": "How do you use the `for` loop in Rust?", "answer": "`for item in collection { ... }` iterates over elements of a collection."}
{"question": "What is the `async` keyword used for?", "answer": "`async` defines an asynchronous function, which returns a `Future`."}
{"question": "How do you use the `await` keyword in Rust?", "answer": "`await` suspends the current async function until a `Future` completes, e.g., `let result = future.await;`."}
{"question": "What is the `tokio` runtime used for?", "answer": "`tokio` is an asynchronous runtime for building non-blocking network applications in Rust."}
{"question": "How do you use the `join` method for threads?", "answer": "`thread.join()` waits for a thread to finish execution, e.g., `let handle = thread::spawn(...); handle.join().unwrap();`."}
{"question": "What is the `Send` trait in Rust?", "answer": "`Send` indicates a type can be safely transferred between threads."}
{"question": "How do you use the `?` operator in an async function?", "answer": "It propagates errors from `Result` types, similar to synchronous code, e.g., `let x = my_async_func().await?;`."}
{"question": "What is the `RwLockWriteGuard` in Rust?", "answer": "`RwLockWriteGuard` is a guard that allows exclusive write access to a `RwLock`."}
{"question": "How do you use the `iter()` method in Rust?", "answer": "`iter()` creates an iterator over references to elements in a collection, e.g., `vec.iter()`."}
{"question": "What is the `str` type in Rust?", "answer": "`str` is an immutable sequence of UTF-8 bytes, typically used as a string slice `&str`."}
{"question": "How do you use the `as_mut()` method in Rust?", "answer": "`as_mut()` converts a `Box<T>` to a `&mut T`, allowing mutable access without consuming the box."}
{"question": "What is the `lifetime` elision in Rust?", "answer": "It allows the compiler to infer lifetimes in function parameters, reducing boilerplate."}
{"question": "How do you use the `map` function on an `Option`?", "answer": "`map()` applies a function to the value inside `Some`, e.g., `Some(5).map(|x| x * 2)`."}
{"question": "What is the `Arc` and `Mutex` combination used for?", "answer": "`Arc<Mutex<T>>` provides thread-safe shared ownership with exclusive access to mutable data."}
{"question": "How do you define a trait in Rust?", "answer": "Use `trait TraitName { fn method(&self); }` to define a trait with required methods."}
{"question": "What is the `panic!` macro's default behavior?", "answer": "It unwinds the stack, which may cause the program to crash if not handled."}
{"question": "How do you use the `match` arm for a wildcard?", "answer": "Use `_` as a wildcard pattern, e.g., `match x { 1 => \"one\", _ => \"other\" }`."}
{"question": "What is the `Box` type's main use case?", "answer": "`Box` is used for heap allocation, especially for large data or recursive types."}
{"question": "How do you use the `?` operator in a `Result` context?", "answer": "It returns the value if `Ok`, or `Err` if the result is `Err`, propagating the error."}
{"question": "What is the `RwLock`'s `read()` method?", "answer": "`read()` acquires a read lock, allowing multiple readers to access data concurrently."}
{"question": "How do you create a new `Vec` in Rust?", "answer": "Use `Vec::new()` or `vec![elements]` to create a new vector."}
{"question": "What is the `lifetime` annotation for function parameters?", "answer": "It specifies the relationship between input and output references, e.g., `fn foo<'a>(x: &'a i32) -> &'a i32`."}
{"question": "How do you use the `while let` loop with a channel?", "answer": "`while let Some(msg) = rx.recv() { ... }` loops until the channel is closed."}
{"question": "What is the `Send` trait's requirement for threads?", "answer": "Types must implement `Send` to be safely sent between threads."}
{"question": "How do you use the `?` operator with `Option`?", "answer": "It returns the value if `Some`, or `None` from the function if the value is `None`."}
{"question": "What is the `RwLock`'s `write()` method?", "answer": "`write()` acquires a write lock, ensuring exclusive access to the data."}
{"question": "How do you use the `as` keyword for type conversion?", "answer": "`as` converts between types, e.g., `let x: u8 = 100 as u8;`."}
{"question": "What is the `Box` type's `deref()` method?", "answer": "`deref()` allows `Box<T>` to be treated as a `&T`, enabling method calls on the contained value."}
{"question": "How do you use the `?` operator in an `Option` context?", "answer": "It returns the value if `Some`, or `None` from the function if the value is `None`."}
{"question": "What is the `RwLockReadGuard` in Rust?", "answer": "`RwLockReadGuard` is a guard that allows shared read access to a `RwLock`."}
{"question": "How do you use the `match` expression for a tuple?", "answer": "`match` can destructure tuples, e.g., `match (x, y) { (1, 2) => ... }`."}
{"question": "What is the `Box` type's `into_inner()` method?", "answer": "`into_inner()` consumes the `Box` and returns the inner value, e.g., `let x = Box::new(5).into_inner();`."}
{"question": "How do you use the `while` loop with a condition?", "answer": "`while condition { ... }` executes code as long as the condition is true."}
{"question": "What is the `Rc` and `RefCell` combination used for?", "answer": "`Rc<RefCell<T>>` allows shared ownership with interior mutability in single-threaded contexts."}
{"question": "How do you use the `as_ref()` method on a `Box`?", "answer": "`as_ref()` converts a `Box<T>` to a `&T`, enabling shared access without consuming the box."}
{"question": "What is the `Send` trait's role in concurrency?", "answer": "`Send` ensures a type can be safely moved between threads, preventing data races."}
{"question": "How do you use the `?` operator in a function returning `Result`?", "answer": "It propagates errors from the function, e.g., `fn my_func() -> Result<()> { let x = some_func()?; ... }`."}
{"question": "What is the `RwLock`'s `try_read()` method?", "answer": "`try_read()` attempts to acquire a read lock without blocking, returning `None` if unavailable."}
{"question": "How do you use the `as_mut()` method on a `Box`?", "answer": "`as_mut()` converts a `Box<T>` to a `&mut T`, allowing mutable access without consuming the box."}
{"question": "What is the `Rc` type's main use case?", "answer": "`Rc<T>` allows shared ownership of data in a single-threaded context."}
{"question": "How do you use the `?` operator in a function returning `Option`?", "answer": "It returns `None` if the value is `None`, or continues with the inner value if `Some`."}
{"question": "What is the `RwLock`'s `try_write()` method?", "answer": "`try_write()` attempts to acquire a write lock without blocking, returning `None` if unavailable."}
{"question": "How do you use the `match` expression for a struct?", "answer": "`match` can destructure struct fields, e.g., `match struct { field: value }`."}
{"question": "What is the `Arc` type's main use case?", "answer": "`Arc<T>` allows shared ownership of data across multiple threads."}
{"question": "How do you use the `?` operator in an async function?", "answer": "It propagates errors from `Result` types, e.g., `let x = my_async_func().await?;`."}
{"question": "What is the `Send` trait's requirement for `Arc`?", "answer": "`Arc<T>` requires `T` to implement `Send` for safe cross-thread sharing."}
{"question": "How do you use the `while let` loop with an `Option`?", "answer": "`while let Some(x) = option { ... }` loops while the `Option` is `Some`."}
{"question": "What is the `RwLock`'s `read()` method's behavior?", "answer": "It blocks until a read lock is available, then returns a `RwLockReadGuard`."}
{"question": "How do you use the `?` operator in a `Result` context?", "answer": "It returns the value if `Ok`, or `Err` if the result is `Err`, propagating the error."}
{"question": "What is the `RwLock`'s `write()` method's behavior?", "answer": "It blocks until a write lock is available, then returns a `RwLockWriteGuard`."}
{"question": "How do you use the `match` expression for a `Result`?", "answer": "`match` can handle `Ok` and `Err` variants, e.g., `match result { Ok(x) => x, Err(e) => e }`."}
{"question": "What is the `Arc` and `Mutex` combination's purpose?", "answer": "`Arc<Mutex<T>>` provides thread-safe shared ownership with exclusive access to mutable data."}
{"question": "How do you use the `?` operator in a function returning `Option`?", "answer": "It returns `None` if the value is `None`, or continues with the inner value if `Some`."}
{"question": "What is the difference between let and const in Rust?", "answer": "`let` declares a variable, `const` defines a constant. Variables can be reassigned, constants cannot."}
{"question": "How do you declare a mutable variable in Rust?", "answer": "Use `let mut variable = value;`."}
{"question": "What is the purpose of the 'mut' keyword?", "answer": "It allows a variable to be modified after initialization."}
{"question": "What are the basic data types in Rust?", "answer": "Primitive types like i32, u32, f64, bool, char, and compound types like arrays, tuples, structs."}
{"question": "How do you create a string in Rust?", "answer": "Use `String::new()` or `\"literal\"`. `String` is heap-allocated, `&str` is a string slice."}
{"question": "What is the difference between String and &str?", "answer": "`String` is a growable, heap-allocated type; `&str` is an immutable slice referencing existing data."}
{"question": "How does Rust handle memory management?", "answer": "Through ownership and the borrow checker, ensuring memory safety without a garbage collector."}
{"question": "What is ownership in Rust?", "answer": "A system that manages memory by tracking which variable owns a resource, ensuring it's freed when no longer needed."}
{"question": "What is the purpose of the 'drop' trait?", "answer": "To define custom cleanup logic for a type when it goes out of scope."}
{"question": "How do you implement a trait in Rust?", "answer": "Use `impl Trait for Type { ... }`."}
{"question": "What is a struct in Rust?", "answer": "A custom data type that groups related values together."}
{"question": "How do you create a tuple in Rust?", "answer": "Use parentheses: `(value1, value2)`."}
{"question": "What is the 'match' expression used for?", "answer": "To compare a value against patterns and execute code based on the matching pattern."}
{"question": "How do you handle panics in Rust?", "answer": "Use `panic!()` macro. Handle with `catch_unwind` or `Result` types."}
{"question": "What is the 'Option' type used for?", "answer": "To represent the presence or absence of a value."}
{"question": "How do you use the 'Result' type in Rust?", "answer": "Returns `Ok(T)` or `Err(E)` to handle success or failure cases."}
{"question": "What is the 'as' keyword used for in Rust?", "answer": "For type casting, e.g., `value as i32`."}
{"question": "How do you create a vector in Rust?", "answer": "Use `vec![1, 2, 3]` or `Vec::new()`."}
{"question": "What is the 'borrow checker' in Rust?", "answer": "A compiler component that enforces borrowing rules to prevent data races."}
{"question": "How do you define a function in Rust?", "answer": "Use `fn function_name(parameters) -> return_type { ... }`."}
{"question": "What is the purpose of lifetime annotations?", "answer": "To ensure references are valid for the correct scope, preventing dangling references."}
{"question": "How do you use pattern matching with enums?", "answer": "With `match`, e.g., `match enum_value { Variant1 => ... }`."}
{"question": "What is a trait object in Rust?", "answer": "A type that allows for dynamic dispatch, e.g., `&dyn Trait`."}
{"question": "How do you implement a custom trait for a type?", "answer": "Use `impl Trait for Type { ... }`."}
{"question": "What is the 'Box' type used for?", "answer": "To allocate data on the heap and manage ownership."}
{"question": "How do you use the 'RefCell' type?", "answer": "Provides interior mutability, allowing mutable borrows at runtime."}
{"question": "What is the 'Deref' trait and how is it used?", "answer": "Allows a type to be treated as a reference, e.g., `*box` dereferences a `Box`."}
{"question": "How do you create a closure in Rust?", "answer": "Use `|args| { ... }`, e.g., `let add = |a, b| a + b;`."}
{"question": "What is the 'iter' method used for?", "answer": "To create an iterator over a collection's elements."}
{"question": "How do you use the 'map' function on an Option?", "answer": "`option.map(|x| x * 2)` applies a function to the Some value."}
{"question": "What is the 'into_iter' method?", "answer": "Consumes a collection and returns an iterator over its elements."}
{"question": "How do you use the 'where' clause in generics?", "answer": "To specify trait bounds for type parameters, e.g., `fn foo<T: Trait + Clone> ...`."}
{"question": "What is the 'Sized' trait in Rust?", "answer": "Indicates that a type has a known size at compile time."}
{"question": "How do you use the 'as_ref' method?", "answer": "Converts a `&T` to a `&U` if `T` implements `AsRef<U>`."}
{"question": "What is the 'From' trait used for?", "answer": "To convert from one type to another, e.g., `String::from(\"hello\")`."}
{"question": "How do you use the 'Into' trait?", "answer": "Allows a type to be converted into another, e.g., `\"hello\".into()`."}
{"question": "What is the 'derive' attribute in Rust?", "answer": "Automatically implements common traits like `Debug`, `Clone`, or `PartialEq`."}
{"question": "How do you use the 'match' expression with guards?", "answer": "Add `if condition` after a pattern, e.g., `Pattern if condition => ...`."}
{"question": "What is the 'if let' syntax used for?", "answer": "To handle a single case of an `Option` or `Result`."}
{"question": "How do you use the 'while let' loop?", "answer": "Iterates while a pattern matches, e.g., `while let Some(x) = ...`."}
{"question": "What is the purpose of the 'send' trait?", "answer": "Marks a type as safe to send between threads."}
{"question": "How do you create a thread in Rust?", "answer": "Use `std::thread::spawn(|| { ... });`."}
{"question": "What is the 'join' method used for?", "answer": "Waits for a thread to finish, returning its result."}
{"question": "How do you share data between threads safely?", "answer": "Use `Arc<Mutex<T>>` for shared ownership and mutual exclusion."}
{"question": "What is the 'Mutex' type used for?", "answer": "To synchronize access to data across threads."}
{"question": "How do you use the 'Arc' type for thread safety?", "answer": "`Arc<T>` provides shared ownership with atomic reference counting."}
{"question": "What is the 'async' keyword used for?", "answer": "Declares a function or block as asynchronous, returning a `Future`."}
{"question": "How do you await a future in Rust?", "answer": "Use `await` inside an `async` function, e.g., `let result = future.await;`."}
{"question": "What is the 'tokio' runtime used for?", "answer": "To run asynchronous code, providing an event loop for `async` tasks."}
{"question": "How do you use channels in Rust with crossbeam?", "answer": "`crossbeam::channel::bounded()` creates a channel for thread communication."}
{"question": "What is the 'lifetime' parameter in Rust?", "answer": "Specifies how long a reference is valid, e.g., `fn foo<'a>(x: &'a i32) -> &'a i32`."}
{"question": "How do you use the 'match' expression with a wildcard?", "answer": "Use `_` to ignore unmatched patterns, e.g., `match x { 1 => ..., _ => ... }`."}
{"question": "What is the 'panic!' macro used for?", "answer": "To cause a runtime panic, typically for unrecoverable errors."}
{"question": "How do you handle multiple errors in Rust?", "answer": "Use `?` operator to propagate errors, or `Result::map_err`."}
{"question": "What is the 'Box<dyn Trait>' type?", "answer": "A trait object that allows for dynamic dispatch and heap allocation."}
{"question": "How do you use the 'try' macro in Rust?", "answer": "`try!` converts a `Result` into an `Option`, returning `None` on `Err`."}
{"question": "What is the 'as_ref' method for?", "answer": "Converts a type into a reference, e.g., `Vec<T>.as_ref()`."}
{"question": "How do you use the 'into' method?", "answer": "Converts a value into another type, e.g., `\"hello\".into()`."}
{"question": "What is the 'default' trait used for?", "answer": "Provides a default value for a type, e.g., `impl Default for MyStruct`."}
{"question": "How do you use the 'derive' attribute for Debug?", "answer": "`#[derive(Debug)]` allows printing the struct with `println!`."}
{"question": "What is the 'lifetime elision' in Rust?", "answer": "A set of rules that allows the compiler to infer lifetimes automatically."}
{"question": "How do you use the 'match' expression for enums?", "answer": "Matches on each variant, e.g., `match color { Color::Red => ... }`."}
{"question": "What is the 'Option::unwrap' method?", "answer": "Returns the Some value or panics if None."}
{"question": "How do you use the 'Result::expect' method?", "answer": "Returns the Ok value or panics with a custom message."}
{"question": "What is the 'borrow' method in Rust?", "answer": "`&T` can be borrowed as `&mut T` if not already borrowed."}
{"question": "How do you use the 'as_mut' method?", "answer": "Converts a `&mut T` to a `&mut U` if `T` implements `AsMut<U>`."}
{"question": "What is the 'static lifetime in Rust?", "answer": "A reference that is valid for the entire program's duration."}
{"question": "How do you use the 'async/await' syntax?", "answer": "`async fn` defines an asynchronous function, `await` pauses execution until a future completes."}
{"question": "What is the 'join' method for threads?", "answer": "Waits for the thread to finish and returns its result."}
{"question": "How do you use the 'crossbeam' crate for concurrency?", "answer": "Provides channels and scoped threads for safe concurrent programming."}
{"question": "What is the 'thread_local!' macro used for?", "answer": "Declares a thread-local variable that is unique per thread."}
{"question": "How do you use the 'once_cell' crate?", "answer": "Provides thread-safe once initialization for static variables."}
{"question": "What is the 'Send' trait in Rust?", "answer": "Ensures a type can be safely sent between threads."}
{"question": "How do you use the 'Sync' trait?", "answer": "Allows a type to be safely shared between threads."}
{"question": "What is the 'RwLock' type used for?", "answer": "Provides read/write locking for shared data."}
{"question": "How do you use the 'tokio::spawn' function?", "answer": "Spawns an asynchronous task on the Tokio runtime."}
{"question": "What is the 'Future' trait in Rust?", "answer": "Represents a value that may not be available yet, used with `async/await`."}
{"question": "How do you use the 'select' macro in Tokio?", "answer": "Waits for the first future to complete, e.g., `tokio::select! { ... }`."}
{"question": "What is the 'channel' type in Rust?", "answer": "Allows communication between threads, e.g., `mpsc::channel()`."}
{"question": "How do you use the 'mpsc' module?", "answer": "`mpsc::channel()` creates a multi-producer, single-consumer channel."}
{"question": "What is the 'join_handle' type?", "answer": "A handle to a thread that can be joined to retrieve its output."}
{"question": "How do you use the 'scoped' threads in crossbeam?", "answer": "`crossbeam::scope(|scope| { ... })` spawns threads that borrow from the scope."}
{"question": "What is the 'lazy_static' crate used for?", "answer": "Defines static variables that are initialized lazily."}
{"question": "How do you use the 'thread::spawn' function?", "answer": "`thread::spawn(|| { ... })` creates a new thread."}
{"question": "What is the 'thread::sleep' function?", "answer": "Suspends the current thread for a specified duration, e.g., `thread::sleep(Duration::from_secs(1))`."}
{"question": "How do you use the 'thread::local' module?", "answer": "Declares thread-local storage, e.g., `thread_local! { static KEY: RefCell<i32> = RefCell::new(0); }`."}
{"question": "What is the 'std::sync::Mutex' type?", "answer": "A mutual exclusion lock for thread-safe data access."}
{"question": "How do you use the 'std::sync::Arc' type?", "answer": "`Arc<T>` provides shared ownership with atomic reference counting."}
{"question": "What is the 'std::future::Future' trait?", "answer": "Represents asynchronous computations that can be awaited."}
{"question": "How do you use the 'tokio::task' module?", "answer": "`tokio::task::spawn` runs a function asynchronously."}
{"question": "What is the 'tokio::time::sleep' function?", "answer": "Asynchronously waits for a duration, e.g., `tokio::time::sleep(Duration::from_secs(1)).await`."}
{"question": "How do you use the 'tokio::spawn' function?", "answer": "Spawns an async task on the Tokio runtime, e.g., `tokio::spawn(async { ... })`."}
{"question": "What is the 'tokio::join' function?", "answer": "Waits for multiple async tasks to complete, e.g., `tokio::join!(task1, task2)`."}
{"question": "How do you use the 'tokio::spawn_blocking' function?", "answer": "Runs a blocking function in a separate thread, e.g., `tokio::spawn_blocking(|| { ... })`."}
{"question": "What is the 'tokio::runtime' module?", "answer": "Provides a runtime for executing async tasks."}
{"question": "How do you use the 'tokio::io' module?", "answer": "Handles asynchronous I/O operations, e.g., `tokio::io::AsyncRead`."}
{"question": "What is the 'tokio::net' module?", "answer": "Provides asynchronous network primitives like TCP and UDP."}
{"question": "How do you use the 'tokio::fs' module?", "answer": "For asynchronous file system operations, e.g., `tokio::fs::read`."}
{"question": "What is the 'tokio::time' module?", "answer": "Provides time-related asynchronous functions, e.g., `sleep`."}
{"question": "How do you use the 'tokio::sync::Mutex' type?", "answer": "A thread-safe mutex for async code, e.g., `let mut lock = mutex.lock().await`."}
{"question": "What is the 'tokio::sync::OnceCell' type?", "answer": "A thread-safe once initialization for async code."}
{"question": "How do you use the 'tokio::sync::Barrier' type?", "answer": "Synchronizes multiple tasks, e.g., `barrier.wait().await`."}
{"question": "What is the 'tokio::sync::Semaphore' type?", "answer": "Controls access to a resource with a limited number of permits."}
{"question": "How do you use the 'tokio::sync::broadcast' channel?", "answer": "Allows multiple senders and receivers, e.g., `broadcast::channel()`."}
{"question": "What is the 'tokio::sync::mpsc' channel?", "answer": "Multi-producer, single-consumer channel for async communication."}
{"question": "How do you use the 'tokio::sync::MutexGuard' type?", "answer": "A guard that locks a `Mutex`, released when dropped."}
{"question": "What is the 'tokio::task::spawn' function?", "answer": "Spawns an asynchronous task, e.g., `tokio::task::spawn(async { ... })`."}
{"question": "How do you use the 'tokio::task::spawn_local' function?", "answer": "Spawns a task on the current thread's executor."}
{"question": "What is the 'tokio::task::LocalSet' type?", "answer": "A local executor for tasks that cannot be sent between threads."}
{"question": "How do you use the 'tokio::task::spawn_blocking' function?", "answer": "Runs a blocking function in a separate thread, e.g., `tokio::task::spawn_blocking(|| { ... })`."}
{"question": "What is the 'tokio::io::AsyncRead' trait?", "answer": "Provides asynchronous read operations for I/O sources."}
{"question": "How do you use the 'tokio::io::AsyncWrite' trait?", "answer": "Provides asynchronous write operations for I/O sinks."}
{"question": "What is the 'tokio::io::BufReader' type?", "answer": "Wraps an I/O source to provide buffered reading."}
{"question": "How do you use the 'tokio::io::BufWriter' type?", "answer": "Wraps an I/O sink to provide buffered writing."}
{"question": "What is the 'tokio::io::copy' function?", "answer": "Copies data from an AsyncRead to an AsyncWrite."}
{"question": "How do you use the 'tokio::io::read_to_string' function?", "answer": "Reads all data from an AsyncRead into a String."}
{"question": "What is the 'tokio::io::write_all' function?", "answer": "Writes all data to an AsyncWrite, e.g., `writer.write_all(b\"data\")`."}
{"question": "What is the keyword to declare a variable in Rust?", "answer": "let"}
{"question": "What is the difference between let and const in Rust?", "answer": "let declares a variable (mutable by default), while const defines a compile-time constant."}
{"question": "How to create a new thread in Rust?", "answer": "Use std::thread::spawn(|| { /* code */ })\n```rust\nstd::thread::spawn(|| {\n    println!(\"Hello from thread\");\n});\n```"}
{"question": "What is a trait in Rust?", "answer": "A trait defines shared behavior for types, enabling method definitions and polymorphism."}
{"question": "What is the purpose of a Mutex?", "answer": "To allow safe shared mutable access across threads.\n```rust\nuse std::sync::{Arc, Mutex};\nlet data = Arc::new(Mutex::new(0));\n```"}
{"question": "How to handle errors in Rust?", "answer": "Use the Result type and match expressions, or the ? operator for propagation."}
{"question": "What is the default visibility in Rust?", "answer": "Private. Use 'pub' to make items public."}
{"question": "What is a slice in Rust?", "answer": "A reference to a portion of a collection, e.g., &str or &[T]."}
{"question": "What is the 'self' keyword used for?", "answer": "To refer to the current instance in methods or associated functions."}
{"question": "How to create a struct in Rust?", "answer": "Use struct MyStruct { field: Type }.\n```rust\nstruct Point { x: i32, y: i32 };\n```"}
{"question": "What is the purpose of the 'move' keyword in closures?", "answer": "To force the closure to take ownership of captured variables."}
{"question": "What is the borrow checker?", "answer": "A Rust compiler component that enforces borrowing rules to prevent data races."}
{"question": "How to define a constant in Rust?", "answer": "Use const NAME: Type = value;\n```rust\nconst MAX: u8 = 255;\n```"}
{"question": "What is the difference between Vec and array?", "answer": "Vec is a dynamic, heap-allocated list; arrays have fixed size and stack allocation."}
{"question": "What is a match expression used for?", "answer": "To pattern match against values and execute code based on matches."}
{"question": "How to handle optional values?", "answer": "Use Option<T> (Some/T, None) or ? operator for unwrapping."}
{"question": "What is the 'as' keyword used for?", "answer": "To cast types explicitly, e.g., 5 as u8."}
{"question": "What is the purpose of the 'Box' type?", "answer": "To allocate data on the heap and manage ownership."}
{"question": "How to create a new vector?", "answer": "Use Vec::new() or vec![elements].\n```rust\nlet v = vec![1, 2, 3];\n```"}
{"question": "What is the 'impl' block for?", "answer": "To define methods and trait implementations for a type."}
{"question": "What is the 'pub use' statement?", "answer": "To re-export items from another module for external access."}
{"question": "What is the 'Result' type?", "answer": "A type for handling success (Ok) or error (Err) outcomes."}
{"question": "How to create a thread-safe shared value?", "answer": "Use Arc (Atomic Reference Counted) with Mutex.\n```rust\nArc::new(Mutex::new(data))\n```"}
{"question": "What is the 'lifetime' parameter?", "answer": "A way to specify how long references are valid, e.g., 'a in &a."}
{"question": "What is the 'default' keyword for?", "answer": "To provide a default value for struct fields.\n```rust\n#[derive(Default)]\nstruct MyStruct { field: i32 }\n```"}
{"question": "How to handle panics in Rust?", "answer": "Use panic!() for unrecoverable errors; unwrap() or expect() for recovery."}
{"question": "What is the 'as_ref' method?", "answer": "Converts a value into a reference, e.g., String to &str."}
{"question": "What is the 'iter' method for?", "answer": "To create an iterator over a collection's elements."}
{"question": "What is the 'cloned' method?", "answer": "Creates an iterator that clones elements of a collection."}
{"question": "How to define an enum in Rust?", "answer": "Use enum MyEnum { Variant1, Variant2 }.\n```rust\nenum Color { Red, Green, Blue }\n```"}
{"question": "What is the 'Option' type?", "answer": "Represents a value that may be absent (Some/T or None)."}
{"question": "What is the 'Result' type's Ok variant?", "answer": "Indicates success with a value.\n```rust\nOk(42)\n```"}
{"question": "How to create a new String?", "answer": "Use String::new() or String::from(\"text\").\n```rust\nlet s = String::from(\"hello\");\n```"}
{"question": "What is the 'drop' trait?", "answer": "Allows custom cleanup logic when a value goes out of scope."}
{"question": "What is the 'Send' trait?", "answer": "Marks types safe to transfer between threads."}
{"question": "What is the 'Sync' trait?", "answer": "Marks types safe to share between threads."}
{"question": "How to use async/await in Rust?", "answer": "Define async functions and use await on futures.\n```rust\nasync fn my_func() { /* ... */ }\n```"}
{"question": "What is the 'match' expression's purpose?", "answer": "To destructure and compare values against patterns."}
{"question": "What is the 'ref' keyword in pattern matching?", "answer": "To bind a reference instead of moving the value.\n```rust\nmatch x { ref y => ... }\n```"}
{"question": "How to create a channel in Rust?", "answer": "Use std::sync::mpsc::channel().\n```rust\nlet (tx, rx) = mpsc::channel();\n```"}
{"question": "What is the 'use' statement?", "answer": "Imports items from modules into scope.\n```rust\nuse std::collections::HashMap;\n```"}
{"question": "What is the 'self' keyword in trait methods?", "answer": "Refers to the implementing type.\n```rust\nfn my_method(&self) { ... }\n```"}
{"question": "What is the 'as_str' method?", "answer": "Converts a String to a &str slice.\n```rust\nlet s = String::from(\"hello\");\nlet slice = s.as_str();\n```"}
{"question": "What is the 'to_string' method?", "answer": "Converts a type into a String.\n```rust\nlet s = 42.to_string();\n```"}
{"question": "How to create a static variable?", "answer": "Use static NAME: Type = value;\n```rust\nstatic COUNT: i32 = 0;\n```"}
{"question": "What is the 'lifetime' elision rule?", "answer": "The compiler infers lifetimes in common patterns, e.g., function parameters."}
{"question": "What is the 'where' clause for?", "answer": "To specify trait bounds for generic types.\n```rust\nfn foo<T: Trait + Other> () { ... }\n```"}
{"question": "What is the 'derive' attribute?", "answer": "Automatically implements common traits like Debug, Clone, PartialEq.\n```rust\n#[derive(Debug)]\nstruct Point { x: i32 }\n```"}
{"question": "How to create a reference to a value?", "answer": "Use &value.\n```rust\nlet x = 5;\nlet y = &x;\n```"}
{"question": "What is the 'as_mut' method?", "answer": "Converts a value into a mutable reference.\n```rust\nlet mut x = 5;\nlet y = x.as_mut();\n```"}
{"question": "What is the 'into_iter' method?", "answer": "Consumes a collection and returns an iterator.\n```rust\nvec.into_iter()\n```"}
{"question": "What is the 'iter_mut' method?", "answer": "Returns a mutable iterator over a collection.\n```rust\nfor item in vec.iter_mut() { ... }\n```"}
{"question": "How to handle multiple errors?", "answer": "Use the ? operator or combine with Result::and_then()."}
{"question": "What is the 'panic!' macro?", "answer": "Causes a runtime panic and unwinds the stack.\n```rust\npanic!(\"error message\");\n```"}
{"question": "What is the 'assert_eq!' macro?", "answer": "Checks if two values are equal, panics otherwise.\n```rust\nassert_eq!(a, b);\n```"}
{"question": "What is the 'match' arm syntax?", "answer": "Each arm has a pattern and an expression.\n```rust\nmatch x { 1 => \"one\", _ => \"other\" }\n```"}
{"question": "What is the 'Option::unwrap' method?", "answer": "Returns the value inside Some, or panics if None.\n```rust\nlet value = option.unwrap();\n```"}
{"question": "What is the 'Result::expect' method?", "answer": "Returns the value inside Ok, or panics with a message if Err.\n```rust\nlet value = result.expect(\"error message\");\n```"}
{"question": "How to create a new array?", "answer": "Use [element; length].\n```rust\nlet arr = [0; 5];\n```"}
{"question": "What is the 'slice' syntax?", "answer": "&collection[start..end] for a sub-range.\n```rust\nlet slice = &arr[1..3];\n```"}
{"question": "What is the 'as_ref' method for?", "answer": "Converts a value into a reference.\n```rust\nlet s = \"hello\".as_ref();\n```"}
{"question": "How to use the 'if let' pattern?", "answer": "To handle a single pattern match and ignore others.\n```rust\nif let Some(x) = option { ... }\n```"}
{"question": "What is the 'for' loop syntax for iterators?", "answer": "for item in iterator { ... }\n```rust\nfor i in 0..5 { println!(\"{}\", i); }\n```"}
{"question": "What is the 'into' trait?", "answer": "Converts a type into another, e.g., String to Vec<u8>.\n```rust\nlet bytes: Vec<u8> = \"hello\".into();\n```"}
{"question": "What is the 'From' trait?", "answer": "Provides a conversion from another type.\n```rust\nimpl From<&str> for String { ... }\n```"}
{"question": "How to create a new HashMap?", "answer": "Use HashMap::new() or the macro.\n```rust\nuse std::collections::HashMap;\nlet mut map = HashMap::new();\n```"}
{"question": "What is the 'iter' method for?", "answer": "Returns an iterator over immutable references.\n```rust\nfor (k, v) in map.iter() { ... }\n```"}
{"question": "What is the 'into_iter' method for?", "answer": "Returns an iterator that consumes the collection.\n```rust\nfor (k, v) in map.into_iter() { ... }\n```"}
{"question": "What is the 'map' method for iterators?", "answer": "Transforms each element with a closure.\n```rust\niter.map(|x| x * 2)\n```"}
{"question": "What is the 'filter' method for iterators?", "answer": "Keeps elements that satisfy a predicate.\n```rust\niter.filter(|x| x % 2 == 0)\n```"}
{"question": "What is the 'collect' method for?", "answer": "Converts an iterator into a collection.\n```rust\nlet vec: Vec<_> = iter.collect();\n```"}
{"question": "What is the 'Result::ok' method?", "answer": "Extracts the Ok value, ignoring Err.\n```rust\nlet value = result.ok();\n```"}
{"question": "What is the 'Result::err' method?", "answer": "Extracts the Err value, ignoring Ok.\n```rust\nlet error = result.err();\n```"}
{"question": "How to use the 'match' expression for enums?", "answer": "To handle each variant explicitly.\n```rust\nmatch color { Color::Red => ... }\n```"}
{"question": "What is the 'Option::as_ref' method?", "answer": "Returns an Option<&T> instead of Option<T>.\n```rust\nlet ref_opt = opt.as_ref();\n```"}
{"question": "What is the 'Option::as_mut' method?", "answer": "Returns an Option<&mut T> instead of Option<T>.\n```rust\nlet mut_opt = opt.as_mut();\n```"}
{"question": "What is the difference between let and const in Rust?", "answer": "let declares variables, const defines constants. Variables can be mutable (let mut x = 5), constants are immutable. Example: const MAX: u8 = 255;"}
{"question": "How do you declare a mutable variable?", "answer": "Use let mut followed by the variable name. Example: let mut x = 5; x += 1;"}
{"question": "What is Rust's ownership system?", "answer": "Rust's ownership system manages memory via rules. Each value has a single owner, which is dropped when out of scope. Example: let s = String::from(\"hello\"); let s2 = s; // s is no longer valid after this."}
{"question": "What is a borrow in Rust?", "answer": "A reference to a value without taking ownership. Use & for immutable, &mut for mutable. Example: fn print_str(s: &str) { ... }"}
{"question": "How do you create a slice?", "answer": "Use [start..end] syntax. Example: let s = \"hello\"; let slice = &s[1..3]; // \"el\""}
{"question": "What is a tuple in Rust?", "answer": "A collection of values with fixed size and types. Example: let pair = (1, \"two\");"}
{"question": "How does match work in Rust?", "answer": "Matches a value against patterns. Example: match x { 1 => \"one\", _ => \"other\" }"}
{"question": "What is the difference between Option and Result?", "answer": "Option represents optional values (Some/None), Result represents success/failure (Ok/Err). Example: let opt: Option<i32> = Some(5); let res: Result<i32, String> = Ok(5);"}
{"question": "How do you define a closure?", "answer": "Use |parameters| { body }. Example: let add = |a: i32, b: i32| a + b;"}
{"question": "What is a lifetime in Rust?", "answer": "A way to ensure references don't outlive their data. Declared with 'a. Example: fn longest<'a>(s1: &'a str, s2: &'a str) -> &'a str { ... }"}
{"question": "What is the purpose of a Mutex in Rust?", "answer": "Provides thread-safe shared mutable state. Use std::sync::Mutex. Example: ```rust\nlet m = Mutex::new(0);\nlet mut data = m.lock().unwrap();\ndata += 1;\n```"}
{"question": "How do you create a new thread?", "answer": "Use std::thread::spawn. Example: ```rust\nthread::spawn(|| { println!(\"Hello from thread\"); });\n```"}
{"question": "What is a join handle?", "answer": "A value that represents a thread. Use .join() to wait for completion. Example: let handle = thread::spawn(...); handle.join().unwrap();"}
{"question": "How do you send and receive messages between threads?", "answer": "Use channels from std::sync::mpsc. Example: ```rust\nlet (s, r) = mpsc::channel();\ns.send(42).unwrap();\nlet msg = r.recv().unwrap();\n```"}
{"question": "What is the role of the 'Send' trait?", "answer": "Marks a type as safe to transfer between threads. Example: struct MyStruct; impl Send for MyStruct { }"}
{"question": "How to share data between threads safely?", "answer": "Use Arc<Mutex<T>> for shared ownership and thread-safe access. Example: ```rust\nlet data = Arc::new(Mutex::new(0));\nlet data_clone = Arc::clone(&data);\n```"}
{"question": "What is an async function?", "answer": "Defined with async fn. Returns a future. Example: ```rust\nasync fn fetch_data() -> Result<String, Error> { ... }\n```"}
{"question": "What is a future in Rust?", "answer": "A value representing asynchronous computation. Futures are lazy and need to be awaited. Example: let future = async { 42 };"}
{"question": "How to run async code?", "answer": "Use a runtime like tokio or async_std. Example: ```rust\n#[tokio::main]\nasync fn main() { ... }\n```"}
{"question": "What is the difference between a thread and an async task?", "answer": "Threads are OS-level, async tasks are lightweight and cooperative. Use async for non-blocking I/O."}
{"question": "How to handle async errors?", "answer": "Use Result in async functions. Example: ```rust\nasync fn read_file() -> Result<String, io::Error> { ... }\n```"}
{"question": "What is a trait object?", "answer": "A type representing any type implementing a trait. Created with dyn Trait. Example: let obj: Box<dyn Trait> = Box::new(Struct);"}
{"question": "How do you implement a trait for a type?", "answer": "Use impl Trait for Type. Example: ```rust\nimpl MyTrait for MyStruct { ... }\n```"}
{"question": "What is a generic type?", "answer": "A type that can take parameters. Example: fn add<T: Add>(a: T, b: T) -> T { a + b }"}
{"question": "What is a match guard?", "answer": "A condition in a match arm. Example: match x { y if y > 0 => ... }"}
{"question": "How to use if let?", "answer": "Matches a single pattern. Example: ```rust\nif let Some(x) = value { ... }\n```"}
{"question": "What is a struct in Rust?", "answer": "A custom data type with named fields. Example: ```rust\nstruct Point { x: i32, y: i32 }\n```"}
{"question": "How to create an enum?", "answer": "Use enum with variants. Example: ```rust\nenum Color { Red, Green, Blue }\n```"}
{"question": "What is the purpose of the 'Sync' trait?", "answer": "Marks a type as safe to share between threads. Example: struct MyStruct; impl Sync for MyStruct { }"}
{"question": "How do you use a channel in async?", "answer": "Use mpsc channels with async. Example: ```rust\nlet (s, r) = mpsc::channel();\ns.send(42).await.unwrap();\nlet msg = r.recv().await.unwrap();\n```"}
{"question": "What is a closure's capture mode?", "answer": "Closures can capture by value (move), reference (default), or mutable reference. Example: ```rust\nlet c = move || { ... };\n```"}
{"question": "How to use a Mutex in async?", "answer": "Use Mutex::lock() which returns a future. Example: ```rust\nlet m = Mutex::new(0);\nlet mut data = m.lock().await;\ndata += 1;\n```"}
{"question": "What is the role of the 'Drop' trait?", "answer": "Allows custom cleanup when a value goes out of scope. Example: ```rust\nimpl Drop for MyStruct { fn drop(&mut self) { ... } }\n```"}
{"question": "How to use a thread-local variable?", "answer": "Use thread_local! macro. Example: ```rust\nthread_local!(static TLS: RefCell<i32> = RefCell::new(0));\n```"}
{"question": "What is the purpose of the 'use' keyword?", "answer": "Brings items into scope. Example: ```rust\nuse std::collections::HashMap;\n```"}
{"question": "How to create a struct with methods?", "answer": "Use impl block. Example: ```rust\nstruct Point { x: i32 }\nimpl Point { fn new(x: i32) -> Self { Self { x } } }\n```"}
{"question": "What is a trait bound?", "answer": "Constraints on generic types. Example: fn process<T: Display>(t: T) { ... }"}
{"question": "How to use a slice pattern?", "answer": "Match against a slice. Example: ```rust\nmatch slice { [a, b, ..] => ... }\n```"}
{"question": "What is the 'as' keyword used for?", "answer": "Type casting. Example: let x: i32 = 42 as i32;"}
{"question": "How to use a default trait implementation?", "answer": "Use impl Default for Type. Example: ```rust\nimpl Default for MyStruct { fn default() -> Self { ... } }\n```"}
{"question": "What is the 'where' clause for?", "answer": "Adds trait bounds to a function. Example: ```rust\nfn process<T>(t: T) where T: Display { ... }\n```"}
{"question": "How to use a lifetime parameter in a struct?", "answer": "Declare with 'a. Example: ```rust\nstruct Ref<'a> { data: &'a i32 }\n```"}
{"question": "What is the 'pub' keyword for?", "answer": "Makes items public. Example: ```rust\npub struct MyStruct;\n```"}
{"question": "How to use a custom derive macro?", "answer": "Add #[derive(MyMacro)] to a type. Example: ```rust\n#[derive(Debug)]\nstruct MyStruct;\n```"}
{"question": "What is the 'Self' keyword?", "answer": "Refers to the current type. Example: ```rust\nimpl MyStruct { fn new() -> Self { ... } }\n```"}
{"question": "How to use a while let loop?", "answer": "Matches until a pattern fails. Example: ```rust\nwhile let Some(x) = rx.recv() { ... }\n```"}
{"question": "What is the 'panic!' macro?", "answer": "Causes a runtime panic. Example: ```rust\npanic!(\"Something went wrong\");\n```"}
{"question": "How to use a static variable?", "answer": "Declared with static. Example: ```rust\nstatic COUNT: i32 = 0;\n```"}
{"question": "What is the 'const' keyword for?", "answer": "Defines compile-time constants. Example: ```rust\nconst PI: f64 = 3.14;\n```"}
{"question": "How to use a match pattern with a struct?", "answer": "Pattern match fields. Example: ```rust\nmatch point { Point { x: 1, y: 2 } => ... }\n```"}
{"question": "What is the 'as_ref' method?", "answer": "Converts a value to a reference. Example: ```rust\nlet s = \"hello\".as_ref();\n```"}
{"question": "How to use a closure as a function parameter?", "answer": "Pass as a function pointer. Example: ```rust\nfn apply<F>(f: F) where F: Fn(i32) -> i32 { f(5); }\n```"}
{"question": "What is the 'Box' type?", "answer": "Heap-allocated pointer. Example: ```rust\nlet b = Box::new(5);\n```"}
{"question": "How to use a trait object as a parameter?", "answer": "Pass as dyn Trait. Example: ```rust\nfn print(t: &dyn MyTrait) { t.method(); }\n```"}
{"question": "What is the 'RefCell' type?", "answer": "Provides interior mutability. Example: ```rust\nlet c = RefCell::new(0);\nlet mut data = c.borrow_mut();\ndata += 1;\n```"}
{"question": "How to use a channel's send and receive?", "answer": "Use send() and recv(). Example: ```rust\nlet (s, r) = mpsc::channel();\ns.send(42).unwrap();\nlet msg = r.recv().unwrap();\n```"}
{"question": "What is the 'move' keyword in closures?", "answer": "Forces closure to take ownership of captured variables. Example: ```rust\nlet x = 5;\nlet c = move || x;\n```"}
{"question": "How to use a thread's join method?", "answer": "Waits for the thread to finish. Example: ```rust\nlet handle = thread::spawn(|| { ... });\nhandle.join().unwrap();\n```"}
{"question": "What is the 'lifetime elision' rule?", "answer": "Rust infers lifetimes in common cases. Example: fn longest(s1: &str, s2: &str) -> &str { ... }"}
{"question": "How to use a 'Result' type?", "answer": "Handles success/failure. Example: ```rust\nlet res: Result<i32, String> = Ok(5);\n```"}
{"question": "What is the 'Option' type?", "answer": "Represents optional values. Example: ```rust\nlet opt: Option<i32> = Some(5);\n```"}
{"question": "How to use a 'match' arm with a wildcard?", "answer": "Use _. Example: ```rust\nmatch x { 1 => \"one\", _ => \"other\" }\n```"}
{"question": "What is the 'lifetime' parameter in a function?", "answer": "Ensures references don't outlive data. Example: ```rust\nfn longest<'a>(s1: &'a str, s2: &'a str) -> &'a str { ... }\n```"}
{"question": "How to use a 'thread_local' macro?", "answer": "Declares thread-local variables. Example: ```rust\nthread_local!(static TLS: RefCell<i32> = RefCell::new(0));\n```"}
{"question": "What is the 'Send' trait?", "answer": "Allows a type to be sent between threads. Example: struct MyStruct; impl Send for MyStruct { }"}
{"question": "How to use a 'Mutex' in a thread?", "answer": "Lock it with .lock(). Example: ```rust\nlet m = Mutex::new(0);\nlet mut data = m.lock().unwrap();\ndata += 1;\n```"}
{"question": "What is the 'Sync' trait?", "answer": "Allows a type to be shared between threads. Example: struct MyStruct; impl Sync for MyStruct { }"}
{"question": "How to use a 'RefCell' for thread-safe mutation?", "answer": "Use .borrow_mut(). Example: ```rust\nlet c = RefCell::new(0);\nlet mut data = c.borrow_mut();\ndata += 1;\n```"}
{"question": "What is the 'Arc' type?", "answer": "Atomic reference counted pointer. Example: ```rust\nlet data = Arc::new(0);\nlet data_clone = Arc::clone(&data);\n```"}
{"question": "How to use a 'channel' for inter-thread communication?", "answer": "Use mpsc::channel(). Example: ```rust\nlet (s, r) = mpsc::channel();\ns.send(42).unwrap();\nlet msg = r.recv().unwrap();\n```"}
{"question": "What is the 'await' keyword?", "answer": "Waits for a future to complete. Example: ```rust\nlet result = await some_async_function();\n```"}
{"question": "How to use 'async' functions?", "answer": "Define with async fn. Example: ```rust\nasync fn main() {\n    let result = some_async_function().await;\n}\n```"}
{"question": "What is the 'tokio' runtime?", "answer": "A framework for asynchronous programming. Example: ```rust\n#[tokio::main]\nasync fn main() { ... }\n```"}
{"question": "How to use 'async_std'?", "answer": "A standard library for async. Example: ```rust\nuse async_std::task;\nasync fn main() { task::spawn(...).await; }\n```"}
{"question": "What is the 'futures' crate?", "answer": "Provides async primitives. Example: ```rust\nuse futures::executor::block_on;\nblock_on(async { ... });\n```"}
{"question": "How to use 'crossbeam' for concurrency?", "answer": "Provides scoped threads. Example: ```rust\nuse crossbeam::scope;\nscope(|s| { s.spawn(|_| { ... }); });\n```"}
{"question": "What is the 'thread_local' macro?", "answer": "Declares variables local to a thread. Example: ```rust\nthread_local!(static TLS: RefCell<i32> = RefCell::new(0));\n```"}
{"question": "How to use 'Mutex' with async?", "answer": "Use Mutex::lock().await. Example: ```rust\nlet m = Mutex::new(0);\nlet mut data = m.lock().await;\ndata += 1;\n```"}
{"question": "What is the 'Send' trait's purpose?", "answer": "Allows a type to be safely sent between threads. Example: struct MyStruct; impl Send for MyStruct { }"}
{"question": "How to use 'Arc' for shared ownership?", "answer": "Use Arc::new(). Example: ```rust\nlet data = Arc::new(0);\nlet data_clone = Arc::clone(&data);\n```"}
{"question": "What is the 'Sync' trait's purpose?", "answer": "Allows a type to be safely shared between threads. Example: struct MyStruct; impl Sync for MyStruct { }"}
{"question": "How to use a 'channel' in async code?", "answer": "Use mpsc::channel(). Example: ```rust\nlet (s, r) = mpsc::channel();\ns.send(42).await.unwrap();\nlet msg = r.recv().await.unwrap();\n```"}
{"question": "What is the 'async' keyword?", "answer": "Marks a function as asynchronous. Example: ```rust\nasync fn fetch_data() -> Result<String, Error> { ... }\n```"}
{"question": "How to use 'await' in async code?", "answer": "Waits for a future. Example: ```rust\nlet result = some_async_function().await;\n```"}
{"question": "What is the 'futures' crate used for?", "answer": "Provides asynchronous programming utilities. Example: ```rust\nuse futures::executor::block_on;\nblock_on(async { ... });\n```"}
{"question": "How to create a thread-safe singleton?", "answer": "Use once_cell or LazyLock. Example: ```rust\nuse once_cell::sync::OnceCell;\nstatic INSTANCE: OnceCell<i32> = OnceCell::new();\n```"}
{"question": "What is the 'RefCell' type?", "answer": "Provides interior mutability. Example: ```rust\nlet c = RefCell::new(0);\nlet mut data = c.borrow_mut();\ndata += 1;\n```"}
{"question": "How to use 'thread::spawn' with a closure?", "answer": "Pass a closure. Example: ```rust\nthread::spawn(|| { ... });\n```"}
{"question": "What is the 'join' method?", "answer": "Waits for a thread to finish. Example: ```rust\nlet handle = thread::spawn(...);\nhandle.join().unwrap();\n```"}
{"question": "How to use 'mpsc' channels?", "answer": "Use mpsc::channel(). Example: ```rust\nlet (s, r) = mpsc::channel();\ns.send(42).unwrap();\nlet msg = r.recv().unwrap();\n```"}
{"question": "What is the 'Send' trait?", "answer": "Marks a type as safe to transfer between threads. Example: struct MyStruct; impl Send for MyStruct { }"}
{"question": "How to use 'Sync' for thread safety?", "answer": "Allows shared access. Example: struct MyStruct; impl Sync for MyStruct { }"}
{"question": "What is the 'lifetime' parameter in a function?", "answer": "Ensures references don't outlive data. Example: ```rust\nfn longest<'a>(s1: &'a str, s2: &'a str) -> &'a str { ... }\n```"}
{"question": "How to use 'Option' in a match?", "answer": "Match Some/None. Example: ```rust\nmatch opt { Some(x) => ..., None => ... }\n```"}
{"question": "What is the 'Result' type?", "answer": "Represents success or error. Example: ```rust\nlet res: Result<i32, String> = Ok(5);\n```"}
{"question": "How to use 'async' with 'await'?", "answer": "Define async functions and await futures. Example: ```rust\nasync fn main() {\n    let result = await some_async_function();\n}\n```"}
{"question": "What is the syntax for a function in Rust?", "answer": "fn function_name(parameters) -> return_type { ... }"}
{"question": "How do you declare a constant in Rust?", "answer": "const NAME: Type = value;"}
{"question": "What is the difference between 'let' and 'const'?", "answer": "'let' declares variables, 'const' declares compile-time constants. 'const' requires a type and value, and is in uppercase by convention."}
{"question": "What is the default integer type in Rust?", "answer": "i32"}
{"question": "How to create a vector with initial values?", "answer": "let v = vec![1, 2, 3];"}
{"question": "What is the purpose of 'match' expressions?", "answer": "To handle multiple possible values of a variable and execute code based on matching patterns."}
{"question": "How to define a struct in Rust?", "answer": "struct StructName { field: Type }"}
{"question": "What is the 'Option' type used for?", "answer": "To represent values that may be absent (Some(T) or None)."}
{"question": "How to handle panics in Rust?", "answer": "Using 'panic!()' macro, or 'unwrap()' and 'expect()' methods on Result/Option."}
{"question": "What is the 'Result' type used for?", "answer": "To represent success (Ok(T)) or error (Err(E)) outcomes."}
{"question": "What is the 'pub' keyword used for?", "answer": "To make items public in a module."}
{"question": "How to create a new thread?", "answer": "thread::spawn(|| { ... });"}
{"question": "What is the 'self' keyword in methods?", "answer": "Refers to the instance of the struct the method is called on."}
{"question": "What is the 'drop' trait?", "answer": "Allows custom cleanup logic when a value goes out of scope."}
{"question": "How to use a closure?", "answer": "let closure = |x| x + 1;"}
{"question": "What is the 'as' keyword used for?", "answer": "For type casting, e.g., 5 as u8."}
{"question": "What is the 'use' keyword for?", "answer": "To bring modules, types, or functions into scope."}
{"question": "How to create a slice?", "answer": "let slice = &array[1..3];"}
{"question": "What is the 'Rust' ownership system?", "answer": "Rust's memory management system that ensures safety without a garbage collector."}
{"question": "What is a 'trait' in Rust?", "answer": "A way to define shared behavior across different types."}
{"question": "What is the 'Box' type used for?", "answer": "To allocate data on the heap."}
{"question": "How to handle errors with '?' operator?", "answer": "It propagates errors from a function returning Result or Option."}
{"question": "What is the 'lifetime' annotation?", "answer": "To specify how long a reference is valid."}
{"question": "What is the 'impl' block for?", "answer": "To define methods for a type."}
{"question": "How to create a mutable variable?", "answer": "let mut variable = value;"}
{"question": "What is the 'if let' syntax?", "answer": "For concise pattern matching with a single case."}
{"question": "What is the 'match' arm syntax?", "answer": "Each arm is a pattern followed by '=>', e.g., 1 => println!(\"One\")"}
{"question": "How to use a 'for' loop?", "answer": "for item in collection { ... }"}
{"question": "What is the 'as_ref' method?", "answer": "Converts a Box<T> to a &T."}
{"question": "What is the 'Rust' borrow checker?", "answer": "Ensures references are valid and prevents data races."}
{"question": "How to create an array with fixed size?", "answer": "let array = [1, 2, 3];"}
{"question": "What is the 'Rust' 'enum'?", "answer": "A type that can have multiple variants, e.g., enum Color { Red, Green, Blue }"}
{"question": "What is the 'Rust' 'pub use'?", "answer": "Re-exports a module or item under a different name."}
{"question": "How to use 'match' with enums?", "answer": "Each variant is a possible pattern in the match arms."}
{"question": "What is the 'Rust' 'static' keyword?", "answer": "Declares a variable with a static lifetime, valid for the entire program."}
{"question": "What is the 'Rust' 'impl Trait' syntax?", "answer": "Used to return a type that implements a specific trait without naming it."}
{"question": "How to use 'if let' with Option?", "answer": "if let Some(value) = option { ... } else { ... }"}
{"question": "What is the 'Rust' 'asynchronous' runtime?", "answer": "Rust's async/await syntax requires an executor like 'tokio' or 'async-std'."}
{"question": "What is the 'Rust' 'Arc' type?", "answer": "A thread-safe reference-counted pointer."}
{"question": "How to create a channel for thread communication?", "answer": "use std::sync::mpsc; let (sender, receiver) = mpsc::channel();"}
{"question": "What is the 'Rust' 'Mutex' type?", "answer": "A mutual exclusion primitive for thread-safe data access."}
{"question": "What is the 'Rust' 'thread::join' method?", "answer": "Waits for a thread to finish execution."}
{"question": "How to use 'Rust' 'async fn'?", "answer": "Define an asynchronous function with 'async fn function() -> Result { ... }'"}
{"question": "What is the 'Rust' 'Future' trait?", "answer": "Represents a value that may not be available yet."}
{"question": "What is the 'Rust' 'tokio' crate?", "answer": "An asynchronous runtime for building network applications."}
{"question": "How to handle multiple threads with 'join'?", "answer": "Collect thread handles in a vector and call .join() on each."}
{"question": "What is the 'Rust' 'Send' trait?", "answer": "Marks a type as safe to send between threads."}
{"question": "What is the 'Rust' 'Sync' trait?", "answer": "Marks a type as safe to share between threads."}
{"question": "How to use 'Rust' 'async await'?", "answer": "await a future with 'await!' or 'async fn' with 'await' keyword."}
{"question": "What is the 'Rust' 'crossbeam' crate?", "answer": "Provides synchronization primitives like channels and scoped threads."}
{"question": "How to create a thread-local variable?", "answer": "Use the 'thread_local!' macro."}
{"question": "What is the 'Rust' 'once_cell' crate?", "answer": "Provides lazy initialization for static variables."}
{"question": "How to use 'Rust' 'crossbeam::scope'?", "answer": "Scope threads that are joined before the scope ends."}
{"question": "What is the 'Rust' 'rayon' crate?", "answer": "For parallel iterators and data parallelism."}
{"question": "How to use 'Rust' 'tokio::spawn'?", "answer": "Spawns an asynchronous task on the Tokio runtime."}
{"question": "What is the 'Rust' 'futures' crate?", "answer": "Provides the foundational types for asynchronous programming."}
{"question": "How to use 'Rust' 'async_std::task::spawn'?", "answer": "Spawns an asynchronous task in the async-std runtime."}
{"question": "What is the 'Rust' 'join' method for threads?", "answer": "Waits for a thread to complete and returns its result."}
{"question": "What is the 'Rust' 'thread_local!' macro?", "answer": "Declares a thread-local static variable."}
{"question": "How to use 'Rust' 'Mutex::lock'?", "answer": "Acquires a lock on a Mutex, returning a guard."}
{"question": "What is the 'Rust' 'Once' type?", "answer": "Ensures a block of code is executed exactly once."}
{"question": "How to use 'Rust' 'Arc::new'?", "answer": "Creates a new Arc with initial reference count 1."}
{"question": "What is the 'Rust' 'RwLock' type?", "answer": "A read-write lock for concurrent access."}
{"question": "How to use 'Rust' 'channel::send'?", "answer": "Sends a value through a channel with sender.send(value)."}
{"question": "What is the 'Rust' 'channel::recv'?", "answer": "Receives a value from a channel with receiver.recv()."}
{"question": "How to use 'Rust' 'async::spawn'?", "answer": "Spawns an asynchronous task using the async-std crate."}
{"question": "What is the 'Rust' 'select!' macro?", "answer": "Waits on multiple futures, executing the first to complete."}
{"question": "How to use 'Rust' 'tokio::time::sleep'?", "answer": "Imports 'tokio::time::sleep' and awaits it with 'await!'."}
{"question": "What is the 'Rust' 'tokio::task::spawn'?", "answer": "Spawns a new asynchronous task on the Tokio runtime."}
{"question": "How to use 'Rust' 'async/await' syntax?", "answer": "Define an async function and use 'await' on futures."}
{"question": "What is the 'Rust' 'async-std' crate?", "answer": "A standard library for asynchronous programming."}
{"question": "How to use 'Rust' 'crossbeam::channel'?", "answer": "Provides crossbeam channels for thread communication."}
{"question": "What is the 'Rust' 'once_cell::sync::Lazy'?", "answer": "A thread-safe lazy initializer for static variables."}
{"question": "How to use 'Rust' 'thread::available_parallelism'?", "answer": "Returns the number of logical CPUs available for parallelism."}
{"question": "What is the 'Rust' 'thread::yield_now'?", "answer": "Yields the current thread to the scheduler."}
{"question": "How to use 'Rust' 'thread::sleep'?", "answer": "Imports 'std::thread::sleep' and uses 'std::time::Duration'."}
{"question": "What is the 'Rust' 'thread::scope'?", "answer": "Allows scoped threads that are joined before the scope ends."}
{"question": "How to use 'Rust' 'tokio::runtime'?", "answer": "Creates a runtime to execute asynchronous tasks."}
{"question": "What is the 'Rust' 'tokio::spawn' function?", "answer": "Spawns a task on the Tokio runtime."}
{"question": "How to use 'Rust' 'async_std::task::spawn'?", "answer": "Spawns an asynchronous task in the async-std runtime."}
{"question": "What is the 'Rust' 'futures::executor'?", "answer": "Provides executors to run futures."}
{"question": "How to use 'Rust' 'crossbeam::scope'?", "answer": "Creates a scope for threads that must join before exiting."}
{"question": "What is the 'Rust' 'std::sync::mpsc'?", "answer": "Multi-producer, single-consumer channels for thread communication."}
{"question": "How to use 'Rust' 'std::sync::Mutex'?", "answer": "Wrap data in a Mutex to allow thread-safe access."}
{"question": "What is the difference between let and const in Rust?", "answer": "`let` declares a variable (immutable by default), while `const` defines a compile-time constant. `const` requires a type annotation and is always immutable."}
{"question": "How do you create a mutable variable in Rust?", "answer": "Use `let mut variable_name = value;` to declare a mutable variable."}
{"question": "What is the purpose of the match expression?", "answer": "`match` is used for pattern matching, allowing exhaustive checks against multiple possible values or patterns."}
{"question": "What is the ownership system in Rust?", "answer": "Rust's ownership system manages memory safety by tracking which variable owns a resource, ensuring no dangling pointers or data races."}
{"question": "How do you implement a trait for a type?", "answer": "Use `impl Trait for Type { ... }`. Example: ```rust\nimpl MyTrait for MyStruct { ... }\n```"}
{"question": "What is a closure in Rust?", "answer": "A closure is an anonymous function that can capture variables from its environment. Defined with `|args| { body }`."}
{"question": "What is the difference between &str and String?", "answer": "`&str` is an immutable slice of UTF-8, while `String` is a growable, heap-allocated string type."}
{"question": "How do you handle errors in Rust?", "answer": "Use `Result` for success/failure outcomes and `Option` for presence/absence of a value. Pattern match or use `?` operator."}
{"question": "What is the 'Send' trait?", "answer": "`Send` indicates a type can be safely transferred between threads. Required for thread-safe data sharing."}
{"question": "How do you create a thread in Rust?", "answer": "Use `std::thread::spawn(|| { ... });`. Example: ```rust\nthread::spawn(|| { println!(\"Hello\"); });\n```"}
{"question": "What is the 'Sync' trait?", "answer": "`Sync` allows a type to be safely shared between threads. Types implementing `Sync` can be used with `Arc`."}
{"question": "What is a struct in Rust?", "answer": "A struct is a custom data type defined with `struct Name { ... }`. Example: ```rust\nstruct Point { x: i32, y: i32 }\n```"}
{"question": "How do you define an enum in Rust?", "answer": "Use `enum Name { Variant1, Variant2 }`. Example: ```rust\nenum Color { Red, Green, Blue }\n```"}
{"question": "What is the 'as' keyword used for?", "answer": "`as` converts between types. Example: `let x: i32 = 3.14 as i32;`."}
{"question": "What is the 'Box' type?", "answer": "`Box<T>` is a smart pointer for heap allocation. Example: ```rust\nlet b = Box::new(5);\n```"}
{"question": "How do you use a trait object?", "answer": "Use `dyn Trait` for dynamic dispatch. Example: ```rust\nfn print_name(obj: &dyn MyTrait) { ... }\n```"}
{"question": "What is the 'Rc' type?", "answer": "`Rc<T>` provides reference-counted shared ownership. Use `Rc::new()` to create."}
{"question": "What is the 'Arc' type?", "answer": "`Arc<T>` is a thread-safe version of `Rc<T>`, using atomic reference counting."}
{"question": "How do you handle panics in Rust?", "answer": "Use `panic!()` macro. To recover, use `catch_unwind()` from `std::panic`."}
{"question": "What is the 'Option' enum?", "answer": "`Option<T>` represents a value that may be `Some(T)` or `None`."}
{"question": "What is the 'Result' enum?", "answer": "`Result<T, E>` represents success (`Ok(T)`) or failure (`Err(E)`)."}
{"question": "How do you use the 'if let' syntax?", "answer": "`if let` simplifies pattern matching for a single case. Example: ```rust\nif let Some(x) = value { ... }\n```"}
{"question": "What is the 'match' arm syntax?", "answer": "Each arm is `pattern => expression`. All possible cases must be covered for exhaustiveness."}
{"question": "How do you use the 'where' clause in generics?", "answer": "`where` clarifies trait bounds. Example: ```rust\nfn foo<T: Trait>(t: T) where T: AnotherTrait { ... }\n```"}
{"question": "What is the 'lifetime' system?", "answer": "Lifetimes ensure references are valid for the correct duration. Use `'a` to annotate lifetimes."}
{"question": "How do you create a slice in Rust?", "answer": "Use `&array[start..end]`. Example: ```rust\nlet s = &arr[1..3];\n```"}
{"question": "What is the 'as_ref' method?", "answer": "`as_ref()` converts a `Box<T>` to `&T` without cloning."}
{"question": "How do you use the 'format!' macro?", "answer": "`format!(\"{}\", value)` creates a formatted string. Example: ```rust\nlet s = format!(\"Hello, {}\", name);\n```"}
{"question": "What is the 'derive' attribute?", "answer": "`#[derive(Debug)]` automatically implements traits like `Debug` for a struct."}
{"question": "How do you use the 'match' expression with enums?", "answer": "`match` allows handling each enum variant. Example: ```rust\nmatch color {\n    Color::Red => \"red\",\n    _ => \"other\",\n}\n```"}
{"question": "What is the 'use' keyword for?", "answer": "`use` brings items into scope. Example: ```rust\nuse std::collections::HashMap;\n```"}
{"question": "How do you create a tuple struct?", "answer": "Use `struct Name(T1, T2);`. Example: ```rust\nstruct Point(i32, i32);\n```"}
{"question": "What is the 'pub' keyword?", "answer": "`pub` makes a function, struct, or module public. Example: ```rust\npub fn my_function() { ... }\n```"}
{"question": "How do you implement a method for a struct?", "answer": "Use `impl StructName { fn method(&self) { ... } }`. Example: ```rust\nimpl Point { fn new(x, y) { ... }\n```"}
{"question": "What is the 'self' keyword in methods?", "answer": "`self` refers to the current instance. Use `&self` for immutable, `mut self` for mutable borrowing."}
{"question": "How do you use the 'ref' keyword in patterns?", "answer": "`ref` creates a reference to a value. Example: ```rust\nmatch x { ref y => ... }\n```"}
{"question": "What is the 'as_ref' method for references?", "answer": "`as_ref()` converts a `&T` to `&U` if `T: AsRef<U>`. Example: ```rust\nlet s: &str = \"hello\".as_ref();\n```"}
{"question": "How do you use the 'as_mut' method?", "answer": "`as_mut()` converts a `&mut T` to `&mut U` if `T: AsMut<U>`. Example: ```rust\nlet mut v = vec![1,2,3];\nlet s = v.as_mut();\n```"}
{"question": "What is the 'Box::new' function?", "answer": "`Box::new(value)` allocates a value on the heap and returns a `Box<T>`."}
{"question": "How do you use the 'vec!' macro?", "answer": "`vec![1, 2, 3]` creates a vector. Example: ```rust\nlet v = vec![\"a\", \"b\"];\n```"}
{"question": "What is the 'Vec' type?", "answer": "`Vec<T>` is a growable array. Use `Vec::new()` or `vec![...]` to create."}
{"question": "How do you use the 'match' expression with patterns?", "answer": "`match` handles patterns like literals, variables, or destructured data. Example: ```rust\nmatch x { 0 => \"zero\", _ => \"other\" }\n```"}
{"question": "What is the 'Option::unwrap' method?", "answer": "`unwrap()` returns the value inside `Some` or panics. Use `unwrap_or` for a default."}
{"question": "How do you use the 'Result::expect' method?", "answer": "`expect()` returns `Ok` value or panics with a message. Example: ```rust\nlet x = result.expect(\"error message\");\n```"}
{"question": "What is the 'panic!' macro?", "answer": "`panic!()` causes a runtime panic. Example: ```rust\npanic!(\"crash\");\n```"}
{"question": "How do you use the 'if let' syntax for Option?", "answer": "`if let Some(x) = option { ... }` handles the `Some` case. Example: ```rust\nif let Some(x) = maybe_value { ... }\n```"}
{"question": "What is the 'while let' loop?", "answer": "`while let Some(x) = option { ... }` loops while the pattern matches. Example: ```rust\nwhile let Some(x) = queue.pop() { ... }\n```"}
{"question": "How do you use the 'for' loop with iterators?", "answer": "`for item in iterator { ... }` iterates over items. Example: ```rust\nfor i in 0..5 { ... }\n```"}
{"question": "What is the 'iter()' method?", "answer": "`iter()` creates an iterator over references. Example: ```rust\nfor item in vec.iter() { ... }\n```"}
{"question": "How do you use the 'into_iter()' method?", "answer": "`into_iter()` consumes the collection and yields its elements. Example: ```rust\nfor item in vec.into_iter() { ... }\n```"}
{"question": "What is the 'map' iterator method?", "answer": "`map(f)` applies a function to each item. Example: ```rust\nvec.iter().map(|x| x * 2).collect()\n```"}
{"question": "How do you use the 'filter' iterator method?", "answer": "`filter(f)` keeps items where `f` returns `true`. Example: ```rust\nvec.iter().filter(|x| **x > 0).collect()\n```"}
{"question": "What is the 'fold' iterator method?", "answer": "`fold(initial, f)` reduces items to a single value. Example: ```rust\nvec.iter().fold(0, |a, b| a + b)\n```"}
{"question": "How do you use the 'collect()' method?", "answer": "`collect()` gathers iterator items into a collection. Example: ```rust\nvec.iter().collect::<Vec<_>>()\n```"}
{"question": "What is the 'Option::as_ref' method?", "answer": "`as_ref()` converts `Option<T>` to `Option<&T>` without consuming the value."}
{"question": "How do you use the 'Result::as_ref' method?", "answer": "`as_ref()` converts `Result<T, E>` to `Result<&T, &E>`. Example: ```rust\nresult.as_ref().map(|x| x.value)\n```"}
{"question": "What is the 'as_mut' method for Option?", "answer": "`as_mut()` converts `Option<T>` to `Option<&mut T>`. Example: ```rust\noption.as_mut().map(|x| x.modify())\n```"}
{"question": "How do you use the 'Result::as_mut' method?", "answer": "`as_mut()` converts `Result<T, E>` to `Result<&mut T, &mut E>`. Example: ```rust\nresult.as_mut().map(|x| x.change())\n```"}
{"question": "What is the 'Box::leak' function?", "answer": "`Box::leak` converts a `Box<T>` into a `&mut T` with static lifetime, leaking memory."}
{"question": "How do you use the 'Box::from' function?", "answer": "`Box::from(value)` creates a `Box<T>` from a value. Example: ```rust\nlet b = Box::from(5);\n```"}
{"question": "What is the 'Box::into_raw' function?", "answer": "`into_raw` converts a `Box<T>` to a raw pointer, transferring ownership."}
{"question": "How do you use the 'Box::from_raw' function?", "answer": "`Box::from_raw(ptr)` converts a raw pointer back to a `Box<T>`. Example: ```rust\nlet b = unsafe { Box::from_raw(ptr) };\n```"}
{"question": "What is the 'Rc::clone' function?", "answer": "`Rc::clone(rc)` increments the reference count. Example: ```rust\nlet rc2 = Rc::clone(&rc1);\n```"}
{"question": "How do you use the 'Arc::clone' function?", "answer": "`Arc::clone(arc)` increments the atomic reference count. Example: ```rust\nlet arc2 = Arc::clone(&arc1);\n```"}
{"question": "What is the 'Mutex' type?", "answer": "`Mutex<T>` allows thread-safe access to a value. Use `lock()` to acquire the guard."}
{"question": "How do you use the 'MutexGuard' type?", "answer": "`MutexGuard<T>` is a temporary reference to the locked value. Example: ```rust\nlet guard = mutex.lock().unwrap();\n```"}
{"question": "What is the 'RwLock' type?", "answer": "`RwLock<T>` allows multiple readers or one writer. Use `read()` or `write()` to acquire the lock."}
{"question": "How do you use the 'RwLockReadGuard' type?", "answer": "`RwLockReadGuard<T>` provides shared access. Example: ```rust\nlet guard = rwlock.read().unwrap();\n```"}
{"question": "What is the 'channel' in Rust concurrency?", "answer": "A channel is a way to send and receive messages between threads. Use `mpsc::channel()`."}
{"question": "How do you send a message through a channel?", "answer": "Use `sender.send(value)` to send. Example: ```rust\nlet (sender, receiver) = mpsc::channel();\nsender.send(42).unwrap();\n```"}
{"question": "How do you receive a message from a channel?", "answer": "Use `receiver.recv()` to receive. Example: ```rust\nlet value = receiver.recv().unwrap();\n```"}
{"question": "What is the 'thread::spawn' function?", "answer": "`thread::spawn(f)` creates a new thread. Example: ```rust\nthread::spawn(|| { ... });\n```"}
{"question": "How do you join a thread?", "answer": "Use `handle.join()` to wait for completion. Example: ```rust\nlet handle = thread::spawn(|| { ... });\nhandle.join().unwrap();\n```"}
{"question": "What is the 'Once' type?", "answer": "`Once` ensures a block of code runs exactly once. Use `Once::new().call_once(|| { ... });`."}
{"question": "How do you use the 'lazy_static' macro?", "answer": "`lazy_static! { static ref NAME: Type = ...; }` initializes static variables lazily."}
{"question": "What is the 'crossbeam' crate used for?", "answer": "`crossbeam` provides concurrency utilities like scoped threads and channels for advanced synchronization."}
{"question": "How do you use the 'scoped' threads from crossbeam?", "answer": "`crossbeam::scope(|scope| { scope.spawn(|| { ... }); })` allows threads to borrow from the parent scope."}
{"question": "What is the 'async' keyword?", "answer": "`async` defines an asynchronous function. Example: ```rust\nasync fn my_async_func() { ... }\n```"}
{"question": "How do you await a future?", "answer": "Use `await` inside an `async` function. Example: ```rust\nlet result = my_future.await;\n```"}
{"question": "What is the 'tokio' runtime?", "answer": "`tokio` is an asynchronous runtime for building network applications. Use `tokio::main` for entry points."}
{"question": "How do you use the 'join' function in async?", "answer": "`join(f1, f2)` runs multiple futures concurrently. Example: ```rust\nlet (a, b) = tokio::join!(f1(), f2());\n```"}
{"question": "What is the 'Future' trait?", "answer": "`Future` represents an asynchronous computation. Implement `poll` to define its behavior."}
{"question": "How do you use the 'Stream' trait?", "answer": "`Stream` yields values over time. Use `next()` to get the next item. Example: ```rust\nlet mut stream = ...;\nwhile let Some(x) = stream.next().await { ... }\n```"}
{"question": "What is the 'select' function in async?", "answer": "`select!` waits for the first future to complete. Example: ```rust\nselect! {\n    a = future_a => ...,\n    b = future_b => ...,\n}\n```"}
{"question": "What is the 'select_all' function?", "answer": "`select_all` waits for any future to complete. Example: ```rust\nselect_all![f1, f2].await\n```"}
{"question": "How do you use the 'try_join' function?", "answer": "`try_join!` runs futures and returns the first error. Example: ```rust\nlet result = try_join!(f1(), f2()).unwrap();\n```"}
{"question": "What is the 'spawn' function in async?", "answer": "`spawn(f)` creates a new task. Example: ```rust\nlet task = tokio::spawn(async { ... });\n```"}
{"question": "How do you use the 'spawn_blocking' function?", "answer": "`spawn_blocking(f)` runs a synchronous function in a separate thread. Example: ```rust\ntokio::spawn_blocking(|| { ... });\n```"}
{"question": "What is the 'Mutex::new' function?", "answer": "`Mutex::new(value)` creates a new mutex. Example: ```rust\nlet mutex = Mutex::new(0);\n```"}
{"question": "How do you use the 'RwLock::new' function?", "answer": "`RwLock::new(value)` creates a new read-write lock. Example: ```rust\nlet rwlock = RwLock::new(0);\n```"}
{"question": "What is the 'Rc::new' function?", "answer": "`Rc::new(value)` creates a new reference-counted pointer. Example: ```rust\nlet rc = Rc::new(0);\n```"}
{"question": "How do you use the 'Arc::new' function?", "answer": "`Arc::new(value)` creates a new atomic reference-counted pointer. Example: ```rust\nlet arc = Arc::new(0);\n```"}
{"question": "What is the 'thread_local' macro?", "answer": "`thread_local! { static NAME: Type = ...; }` defines a variable local to each thread."}
{"question": "How do you use the 'thread_local' variable?", "answer": "Access it with `NAME.with(|x| { ... })`. Example: ```rust\nthread_local! { static COUNTER: RefCell<u32> = RefCell::new(0); }\n```"}
{"question": "What is the 'RefCell' type?", "answer": "`RefCell<T>` allows interior mutability. Use `borrow()` or `borrow_mut()` to access."}
{"question": "How do you use the 'RefCell::borrow' method?", "answer": "`borrow()` returns a `Ref<T>`. Example: ```rust\nlet value = refcell.borrow();\n```"}
{"question": "What is the 'RefCell::borrow_mut' method?", "answer": "`borrow_mut()` returns a `RefMut<T>` for mutable access. Example: ```rust\nrefcell.borrow_mut().modify();\n```"}
{"question": "How do you use the 'OnceLock' type?", "answer": "`OnceLock<T>` is a thread-safe once value. Use `get()` or `get_or_init()`."}
{"question": "What is the 'OnceCell' type?", "answer": "`OnceCell<T>` is a single-assignment container. Use `set()` to assign once."}
{"question": "What is the difference between 'let' and 'const' in Rust?", "answer": "'let' declares a variable, while 'const' defines a constant. Variables are mutable by default, constants are immutable."}
{"question": "How do you define a struct with named fields?", "answer": "struct Point { x: i32, y: i32 }"}
{"question": "What is the purpose of the 'Send' trait?", "answer": "'Send' allows types to be safely sent between threads. Types implementing 'Send' can be moved across threads."}
{"question": "How do you handle errors in Rust?", "answer": "Use 'Result' or 'Option' enums. The '?' operator propagates errors."}
{"question": "What is the role of 'self' in method definitions?", "answer": "'self' is the first parameter of instance methods, representing the object."}
{"question": "How do you create a new thread?", "answer": "thread::spawn(|| { ... }).join()"}
{"question": "What is a 'Vec' in Rust?", "answer": "A dynamic array. Created with vec![1, 2, 3]."}
{"question": "What is the Rust ownership system?", "answer": "Ensures memory safety by tracking which variable owns a resource. Prevents data races."}
{"question": "How do you use 'match' expressions?", "answer": "'match' binds a value to a pattern. Example: match x { 1 => ..., _ => ... }"}
{"question": "What is 'RefCell' used for?", "answer": "Interior mutability. Allows borrowing with 'borrow()' and 'borrow_mut()'."}
{"question": "What is the 'Box' type for?", "answer": "Heap allocation. Example: let b = Box::new(5);"}
{"question": "How to create a closure?", "answer": "|x| x + 1. Closures capture environment by default."}
{"question": "What is the 'use' keyword for?", "answer": "Brings modules into scope. Example: use std::collections::VecDeque."}
{"question": "What is the 'fn' keyword for?", "answer": "Defines a function. Example: fn add(a: i32, b: i32) -> i32 { a + b }"}
{"question": "How to implement a trait for a struct?", "answer": "impl Trait for Struct { ... }"}
{"question": "What is the 'lifetime' parameter in Rust?", "answer": "Specifies how long a reference is valid. Example: 'struct Point<'a> { x: &'a i32 }'"}
{"question": "What is 'derive' used for?", "answer": "Automatically implements traits. Example: #[derive(Debug)]"}
{"question": "What is the 'async' keyword for?", "answer": "Defines an asynchronous function. Requires 'await' for execution."}
{"question": "How to share data between threads safely?", "answer": "Use 'Arc<Mutex<T>>' for thread-safe reference counting and synchronization."}
{"question": "What is the 'thread_local!' macro for?", "answer": "Defines a thread-local variable. Accessible only within the thread."}
{"question": "What is the 'panic!' macro used for?", "answer": "Causes a runtime panic. Example: panic!(\"error message\");"}
{"question": "What is the 'match' expression's 'default' arm?", "answer": "The '_' pattern handles all unmatched cases."}
{"question": "How to create a new String?", "answer": "String::new() or String::from(\"text\")"}
{"question": "What is the 'pub' keyword for?", "answer": "'pub' makes items public. 'crate' restricts visibility to the current crate."}
{"question": "What is the 'impl Trait' return type?", "answer": "'impl Trait' returns a type that implements the specified trait. Hides the concrete type."}
{"question": "What is the 'join' method for?", "answer": "'join()' waits for a thread to finish. Returns the thread's result."}
{"question": "How to use 'match' with enums?", "answer": "'match' allows pattern matching on enum variants. Example: match result { Ok(v) => ..., Err(e) => ... }"}
{"question": "What is the 'Rc' type for?", "answer": "Reference counting. Allows multiple ownership. Not thread-safe."}
{"question": "What is the 'Arc' type used for?", "answer": "Thread-safe reference counting. 'Arc<T>' increments a counter atomically."}
{"question": "What is the 'thread::spawn' function?", "answer": "Creates a new thread. Returns a JoinHandle."}
{"question": "What is the 'Mutex' type for?", "answer": "Mutual exclusion lock. Ensures exclusive access to data in concurrent code."}
{"question": "How to handle panics in Rust?", "answer": "Using 'panic!()' or 'unwrap()'. Prefer 'Result' for error handling."}
{"question": "What is the 'Option' enum?", "answer": "Represents optional values. 'Some(T)' or 'None'."}
{"question": "What is the 'Result' enum?", "answer": "Used for error handling. 'Ok(T)' or 'Err(E)'."}
{"question": "What is the 'lifetime' elision rule?", "answer": "Rust infers lifetimes in common cases. For example, a function with a single input reference and output reference uses the same lifetime."}
{"question": "What is the 'static lifetime?", "answer": "'static indicates a reference that lives for the entire program. Common for string literals."}
{"question": "How to create a thread-safe counter?", "answer": "Use 'Arc<Mutex<i32>>'. Example: let counter = Arc::new(Mutex::new(0));"}
{"question": "What is the 'channel' in Rust?", "answer": "Communication between threads. 'mpsc' stands for multiple producer, single consumer."}
{"question": "What is the 'thread::join()' method?", "answer": "'join()' waits for the thread to complete. Returns the result of the thread's closure."}
{"question": "What is the 'move' keyword in threads?", "answer": "'move' forces the closure to take ownership of captured variables."}
{"question": "What is the 'sync' trait?", "answer": "'Sync' allows types to be safely shared between threads."}
{"question": "How to use 'match' with patterns?", "answer": "'match' binds a value to patterns. Must cover all possible cases."}
{"question": "What is the 'Box' type's purpose?", "answer": "'Box<T>' provides heap allocation. Useful for large data or trait objects."}
{"question": "What is the 'Rust' borrow checker?", "answer": "Enforces ownership and borrowing rules at compile time to prevent data races."}
{"question": "How to use 'if let' for pattern matching?", "answer": "'if let' matches a single pattern. Example: if let Some(x) = value { ... }"}
{"question": "What is the 'where' clause in Rust?", "answer": "Specifies trait bounds for generic types. Example: fn foo<T: Trait> where T: OtherTrait { ... }"}
{"question": "What is the 'lifetime' annotation in function parameters?", "answer": "Specifies that a reference's lifetime is tied to the input. Example: fn print<'a>(s: &'a str) { ... }"}
{"question": "What is the 'Rc<T>' type's limitation?", "answer": "'Rc<T>' is not thread-safe. Use 'Arc<T>' for concurrent access."}
{"question": "What is the 'thread::spawn' closure's signature?", "answer": "The closure must be 'Send' and 'FnOnce'."}
{"question": "What is the 'once_cell' crate used for?", "answer": "Provides lazy initialization for static variables. Example: once_cell::sync::Lazy."}
{"question": "What is the 'std::sync::mpsc' module?", "answer": "Provides message passing channels. 'Sender' and 'Receiver' types."}
{"question": "What is the 'std::sync::Mutex' type?", "answer": "A mutual exclusion lock. 'lock()' returns a Guard."}
{"question": "How to use 'async/await' in Rust?", "answer": "Define an async function with 'async fn', then 'await' the future."}
{"question": "What is the 'tokio' crate?", "answer": "Asynchronous runtime for Rust. Enables non-blocking I/O."}
{"question": "What is the 'future' trait?", "answer": "Represents a value that may not be ready yet. 'Future' trait has 'poll()' method."}
{"question": "What is the 'join' function in async?", "answer": "'join()' waits for multiple futures to complete. Example: tokio::join!(f1, f2)."}
{"question": "What is the 'spawn' function in async?", "answer": "'spawn()' creates a new task. Example: tokio::spawn(async { ... })."}
{"question": "What is the 'Rust' 'const' evaluation?", "answer": "Rust evaluates 'const' at compile time. 'const' can be used for array sizes."}
{"question": "What is the 'Rust' 'static' keyword?", "answer": "'static' indicates a reference with a fixed lifetime. String literals are 'static."}
{"question": "What is the 'Rust' 'as' keyword?", "answer": "'as' converts types. Example: 5 as u8."}
{"question": "What is the 'Rust' 'asref' trait?", "answer": "'AsRef' allows type conversion for references. Example: impl AsRef<str>."}
{"question": "What is the 'Rust' 'asmut' trait?", "answer": "'AsMut' allows mutable reference conversion. Example: impl AsMut<str>."}
{"question": "What is the 'Rust' 'asrefmut' trait?", "answer": "'AsRefMut' allows mutable reference conversion. Example: impl AsRefMut<str>."}
{"question": "What is the 'Rust' 'default' trait?", "answer": "'Default' provides a default value. 'Default::default()'."}
{"question": "What is the 'Rust' 'debug' trait?", "answer": "'Debug' allows printing with '{:?}'. 'derive(Debug)' implements it."}
{"question": "What is the 'Rust' 'clone' trait?", "answer": "'Clone' allows copying data. 'clone()' method."}
{"question": "What is the 'Rust' 'copy' trait?", "answer": "'Copy' allows bitwise copying. Types like i32 implement it."}
{"question": "What is the 'Rust' 'drop' trait?", "answer": "'Drop' defines cleanup actions. 'drop()' is called when a value is dropped."}
{"question": "What is the 'Rust' 'fmt' trait?", "answer": "'fmt' allows custom formatting. 'Display' and 'Debug' are common."}
{"question": "What is the 'Rust' 'trait' keyword?", "answer": "'trait' defines a set of methods. 'impl Trait for Type' implements it."}
{"question": "What is the 'Rust' 'lifetime' parameter?", "answer": "Specifies how long a reference is valid. Example: 'struct Point<'a> { x: &'a i32 }'"}
{"question": "What is the 'Rust' 'lifetime' elision?", "answer": "Rust infers lifetimes in common cases. For example, a function with a single input reference and output reference uses the same lifetime."}
{"question": "What is the 'Rust' 'lifetime' annotation in function parameters?", "answer": "Specifies that a reference's lifetime is tied to the input. Example: fn print<'a>(s: &'a str) { ... }"}
{"question": "What is the 'Rust' 'lifetime' 'static?", "answer": "'static indicates a reference that lives for the entire program. String literals are 'static."}
{"question": "What is the 'Rust' 'lifetime' 'a?", "answer": "A placeholder for a specific lifetime. Used in struct or function definitions."}
{"question": "What is the 'Rust' 'lifetime' 'b?", "answer": "Another placeholder for a lifetime. Used to differentiate between multiple lifetimes."}
{"question": "What is the 'Rust' 'lifetime' 'c?", "answer": "A third placeholder for a lifetime. Often used in complex generic types."}
{"question": "What is the 'Rust' 'lifetime' 'd?", "answer": "A fourth placeholder for a lifetime. Helps in defining multiple lifetimes in a struct."}
{"question": "What is the difference between 'let' and 'const' in Rust?", "answer": "'let' declares a variable (immutable by default), while 'const' defines a compile-time constant. 'const' values must have a type specified and are evaluated at compile time."}
{"question": "How do you declare a mutable variable in Rust?", "answer": "Use 'let mut variable_name = value;' to declare a mutable variable."}
{"question": "What is the purpose of the 'match' expression?", "answer": "To compare a value against a series of patterns and execute code based on the matching pattern."}
{"question": "What is the 'Option' enum used for?", "answer": "To represent optional values, either Some(value) or None."}
{"question": "How do you create a struct in Rust?", "answer": "Use 'struct StructName { field: Type };' and instantiate with StructName { field: value }."}
{"question": "What is the 'Result' type used for?", "answer": "To handle operations that can succeed (Ok) or fail (Err)."}
{"question": "How do you implement a trait for a struct?", "answer": "Use 'impl Trait for Struct { ... }' to define the trait methods for the struct."}
{"question": "What is the 'self' keyword used for in method definitions?", "answer": "To refer to the current instance of a struct within a method."}
{"question": "What is the difference between 'Vec' and 'VecDeque'?", "answer": "'Vec' is a dynamic array, while 'VecDeque' is a double-ended queue, allowing efficient push/pop from both ends."}
{"question": "How do you use pattern matching with enums?", "answer": "Use 'match' to destructure the enum variants and handle each case."}
{"question": "What are Rust's ownership rules?", "answer": "Each value has a single owner, and ownership is transferred when assigned. The owner is responsible for freeing the memory."}
{"question": "How do you use lifetimes in function parameters?", "answer": "Add lifetime annotations like 'fn function<'a>(x: &'a i32) -> &'a i32' to specify reference validity."}
{"question": "What is the 'as' keyword used for in Rust?", "answer": "To cast between types explicitly, e.g., 'value as u8'."}
{"question": "How do you create a custom derive macro?", "answer": "Use the 'derive' attribute with a macro definition, e.g., #[derive(MyMacro)] struct MyStruct;."}
{"question": "What is the 'Rc' type and when is it used?", "answer": "'Rc' (Reference Counted) allows multiple ownership of a value on the heap, useful for shared data."}
{"question": "How do you use 'Box' for heap allocation?", "answer": "'Box<T>' allocates data on the heap. Example: let boxed = Box::new(5);."}
{"question": "What is the 'impl Trait' syntax used for?", "answer": "To return a type that implements a specific trait without naming it explicitly."}
{"question": "How do you handle errors using 'Result'?", "answer": "Use 'Ok' for success and 'Err' for failure, then handle them with 'match' or '?' operator."}
{"question": "What is the 'where' clause in Rust?", "answer": "To specify trait bounds for generic types, improving code readability."}
{"question": "How do you create a trait object?", "answer": "Use 'dyn Trait' to create a trait object, e.g., Box<dyn Trait>."}
{"question": "What is the 'pub' keyword used for?", "answer": "To make a module, function, or struct public (visible outside its crate)."}
{"question": "How do you use the 'as_ref' method?", "answer": "To convert a value into a reference, e.g., 'string.as_ref()' for a String to &str."}
{"question": "What is the 'fn' type in Rust?", "answer": "Represents a function pointer, e.g., 'fn(i32) -> i32'."}
{"question": "What is the 'static' lifetime?", "answer": "A reference that lives for the entire program duration, often used for string literals."}
{"question": "How do you use the 'thread::spawn' function?", "answer": "'thread::spawn(|| { ... })' creates a new thread with a closure."}
{"question": "What is the 'Send' trait in Rust?", "answer": "'Send' indicates a type can be safely sent between threads."}
{"question": "How do you share data between threads safely?", "answer": "Use 'Arc<Mutex<T>>' for shared ownership and synchronized access."}
{"question": "What is the 'Sync' trait in Rust?", "answer": "'Sync' indicates a type can be safely shared between threads."}
{"question": "How do you use 'Mutex' for thread synchronization?", "answer": "'Mutex<T>' allows exclusive access to a value across threads, using lock() to acquire it."}
{"question": "What is the 'Arc' type and when is it used?", "answer": "'Arc' (Atomic Reference Counted) enables shared ownership across threads."}
{"question": "How do you use 'channel' for inter-thread communication?", "answer": "'mpsc::channel()' creates a producer-consumer channel, e.g., 'sender.send(value)' and 'receiver.recv()'."}
{"question": "What is the 'async' keyword used for?", "answer": "To define an asynchronous function or block that can be awaited."}
{"question": "How do you use 'await' in an async function?", "answer": "'await' suspends the function until the future resolves, e.g., 'let result = my_async_function().await;'."}
{"question": "What is the 'lifetime' parameter in Rust?", "answer": "A way to specify how long a reference is valid, ensuring memory safety."}
{"question": "How do you use the 'derive' attribute?", "answer": "Add #[derive(Trait)] above a struct or enum to automatically implement the trait."}
{"question": "What is the 'match' expression's 'wildcard' pattern?", "answer": "'_' matches any value, useful for ignoring unused patterns."}
{"question": "How do you use the 'if let' syntax?", "answer": "'if let Pattern = Expression' checks for a specific pattern and ignores others."}
{"question": "What is the 'Result' type's 'Ok' variant?", "answer": "'Ok(T)' represents a successful result containing a value of type T."}
{"question": "How do you use the 'as_mut' method?", "answer": "'as_mut()' converts a value into a mutable reference, e.g., 'string.as_mut()'."}
{"question": "What is the 'Rust' borrow checker's role?", "answer": "Enforces ownership and borrowing rules at compile time to prevent data races."}
{"question": "How do you use the 'into_iter' method?", "answer": "'into_iter()' consumes a collection and returns an iterator over its elements."}
{"question": "What is the 'lifetime' elision rules?", "answer": "Rust infers lifetimes in function parameters, e.g., 'fn foo(x: &i32) -> &i32' implies 'x's lifetime."}
{"question": "How do you use the 'ref' keyword in pattern matching?", "answer": "'ref' creates a reference to the matched value instead of moving it."}
{"question": "What is the 'Rust' 'Box' type used for?", "answer": "'Box<T>' provides heap allocation for a value, useful for large data or trait objects."}
{"question": "How do you use the 'try!' macro?", "answer": "'try!' propagates errors from a Result, returning Err if the value is Err."}
{"question": "What is the 'Rust' 'enum' used for?", "answer": "To define a type that can be one of several variants, e.g., 'enum Color { Red, Green, Blue }'."}
{"question": "How do you use the 'as_str' method?", "answer": "'as_str()' converts a String into a &str, e.g., 's.as_str()'."}
{"question": "What is the 'Rust' 'lifetime' parameter in a struct?", "answer": "Specifies how long references in a struct are valid, e.g., 'struct Data<'a> { value: &'a i32 }'."}
{"question": "How do you use the 'map' method on 'Option'?", "answer": "'map()' applies a function to the Some value, returning None if the Option is None."}
{"question": "What is the 'Rust' 'pub use' statement?", "answer": "'pub use' re-exports a name from another module, making it accessible in the current scope."}
{"question": "How do you use the 'thread_local!' macro?", "answer": "'thread_local!' creates a variable that is unique to each thread, e.g., thread_local!(static TLS: RefCell<i32> = RefCell::new(0));."}
{"question": "What is the 'Rust' 'lifetime' parameter in a function?", "answer": "Specifies the validity of references, e.g., 'fn longest<'a>(s1: &'a str, s2: &'a str) -> &'a str'."}
{"question": "How do you use the 'into' method?", "answer": "'into()' converts a value into another type, e.g., 's.into()' for String to Vec<u8>."}
{"question": "What is the 'Rust' 'self' keyword in traits?", "answer": "'self' in traits refers to the implementing type, e.g., 'fn method(self) -> Self'."}
{"question": "How do you use the 'filter' method on an iterator?", "answer": "'filter()' creates a new iterator by including only elements that satisfy a predicate."}
{"question": "What is the 'Rust' 'impl' block for traits?", "answer": "Defines methods for a type to implement a trait, e.g., 'impl Trait for Type { ... }'."}
{"question": "How do you use the 'collect' method on an iterator?", "answer": "'collect()' gathers iterator elements into a collection, e.g., 'iter.collect::<Vec<_>>()'."}
{"question": "What is the 'Rust' 'lifetime' parameter in a function return?", "answer": "Specifies that the return reference's lifetime is tied to the input parameters, e.g., 'fn get_ref<'a>(x: &'a i32) -> &'a i32'."}
{"question": "How do you use the 'unwrap_or' method on 'Option'?", "answer": "'unwrap_or(default)' returns the Some value or the default if None."}
{"question": "What is the 'Rust' 'lifetime' parameter in a struct field?", "answer": "Ensures references in a struct are valid for the specified lifetime, e.g., 'struct Data<'a> { value: &'a i32 }'."}
{"question": "How do you use the 'expect' method on 'Result'?", "answer": "'expect(msg)' panics with a message if the Result is Err, otherwise returns Ok."}
{"question": "What is the 'Rust' 'default' trait?", "answer": "'Default' provides a default value for a type, implemented with 'fn default() -> Self'."}
{"question": "How do you use the 'from' method for type conversion?", "answer": "'from()' converts a value into another type, e.g., 'String::from(\"hello\")'."}
{"question": "What is the 'Rust' 'asynchronous' runtime?", "answer": "Rust's async runtime (e.g., 'tokio' or 'async-std') manages asynchronous tasks and event loops."}
{"question": "How do you use the 'join' method on a thread?", "answer": "'join()' waits for a thread to complete, returning its result, e.g., 'handle.join().unwrap()'."}
{"question": "What is the 'Rust' 'Arc' type's purpose?", "answer": "'Arc' allows shared ownership across threads, using atomic reference counting."}
{"question": "How do you use the 'Mutex' for thread-safe data?", "answer": "'Mutex<T>' ensures only one thread can access the data at a time, using 'lock()'."}
{"question": "What is the 'Rust' 'channel' type?", "answer": "'mpsc::channel()' creates a multi-producer, single-consumer channel for thread communication."}
{"question": "How do you use the 'async fn' syntax?", "answer": "'async fn' defines an asynchronous function that returns a future."}
{"question": "What is the 'Rust' 'future' type?", "answer": "'Future' represents a value that may not be available yet, used with 'await'."}
{"question": "How do you use the 'tokio::spawn' function?", "answer": "'tokio::spawn' creates an asynchronous task, returning a JoinHandle."}
{"question": "What is the 'Rust' 'Send' trait's requirement?", "answer": "'Send' allows a type to be moved between threads, ensuring thread safety."}
{"question": "How do you use the 'crossbeam' crate for concurrency?", "answer": "Provides utilities like 'scoped' threads and 'channel' for safe concurrent programming."}
{"question": "What is the 'Rust' 'thread' module's 'spawn' function?", "answer": "'thread::spawn' creates a new thread, taking a closure to execute."}
{"question": "How do you use the 'once_cell' crate for lazy initialization?", "answer": "Provides 'OnceCell' for thread-safe, one-time initialization of values."}
{"question": "What is the 'Rust' 'lazy_static' macro?", "answer": "Initializes static variables at runtime, useful for complex values."}
{"question": "How do you use the 'rayon' crate for parallelism?", "answer": "Uses 'par_iter()' to parallelize iterator operations across threads."}
{"question": "What is the 'Rust' 'thread_local' macro?", "answer": "Declares a variable that is unique to each thread, e.g., 'thread_local!(static TLS: i32 = 0);'."}
{"question": "How do you use the 'crossbeam_channel' for communication?", "answer": "'crossbeam_channel::channel()' creates a channel for sending and receiving values between threads."}
{"question": "What is the 'Rust' 'async/await' syntax?", "answer": "Simplifies asynchronous code by allowing non-blocking calls with 'await'."}
{"question": "How do you use the 'tokio::task' for async tasks?", "answer": "'tokio::task::spawn' creates an async task, returning a JoinHandle."}
{"question": "What is the 'Rust' 'JoinHandle' type?", "answer": "'JoinHandle' represents a thread or task, allowing to wait for its completion."}
{"question": "How do you use the 'std::sync::Mutex' for synchronization?", "answer": "'Mutex<T>' provides mutual exclusion, requiring 'lock()' to access the inner value."}
{"question": "What is the 'Rust' 'Arc<Mutex<T>>' pattern?", "answer": "Combines 'Arc' (shared ownership) and 'Mutex' (synchronization) for thread-safe data sharing."}
{"question": "How do you use the 'std::thread::spawn' function?", "answer": "'spawn' creates a new thread, e.g., 'std::thread::spawn(|| { ... })'."}
{"question": "What is the 'Rust' 'thread::join' method?", "answer": "'join()' waits for a thread to finish, returning its result."}
{"question": "How do you use the 'std::sync::mpsc' module?", "answer": "'mpsc::channel()' creates a channel for sending and receiving values between threads."}
{"question": "What is the 'Rust' 'async_std' crate?", "answer": "Provides an asynchronous runtime and standard library for async programming."}
{"question": "How do you use the 'tokio::main' attribute?", "answer": "'tokio::main' sets up the async runtime for a function, e.g., '[tokio::main]' on an async fn."}
{"question": "What is the 'Rust' 'futures' crate?", "answer": "Offers utilities for working with futures, such as 'Future' and 'Stream' traits."}
{"question": "How do you use the 'std::pin::Pin' type?", "answer": "'Pin<T>' ensures a value is not moved, useful for async contexts."}
{"question": "What is the 'Rust' 'async_trait' macro?", "answer": "'async_trait' allows defining async methods on traits, enabling async trait objects."}
{"question": "How do you use the 'std::sync::OnceLock' type?", "answer": "'OnceLock' provides a thread-safe, one-time initialization for values."}
{"question": "What is the 'Rust' 'crossbeam' crate's 'scope' function?", "answer": "'scope' creates a thread that borrows data from the parent thread safely."}
{"question": "How do you use the 'std::cell::RefCell' type?", "answer": "'RefCell<T>' allows interior mutability with runtime borrow checking."}
{"question": "What is the 'Rust' 'thread_local' variable's lifetime?", "answer": "Each thread has its own instance, with lifetime tied to the thread's execution."}
{"question": "What is the syntax for declaring a variable in Rust?", "answer": "let x = 5;"}
{"question": "How to declare a constant in Rust?", "answer": "const PI: f64 = 3.14;"}
{"question": "What is the difference between let and const?", "answer": "`let` declares a variable, `const` defines a compile-time constant."}
{"question": "How to make a variable mutable?", "answer": "Add `mut` after `let`: `let mut x = 5;`"}
{"question": "What is shadowing in Rust?", "answer": "Reusing a variable name with a new value, e.g., `let x = 5; let x = 6;`"}
{"question": "What data types are available in Rust?", "answer": "i32, u32, f64, bool, char, etc."}
{"question": "How to define a struct?", "answer": "struct Point { x: i32, y: i32 }"}
{"question": "What is a tuple struct?", "answer": "struct Color(u8, u8, u8);"}
{"question": "How to create an instance of a struct?", "answer": "Point { x: 1, y: 2 }"}
{"question": "What is the `match` expression used for?", "answer": "Pattern matching against values."}
{"question": "What is the `Option` type?", "answer": "Represents presence or absence of a value."}
{"question": "How to handle errors in Rust?", "answer": "Use `Result<T, E>` or `Option<T>`."}
{"question": "What is the `Result` type?", "answer": "Represents success (`Ok`) or error (`Err`)."}
{"question": "What is a `trait` in Rust?", "answer": "A set of methods that a type can implement."}
{"question": "How to implement a trait?", "answer": "`impl TraitName for Type { ... }`"}
{"question": "What is the `self` keyword in methods?", "answer": "Refers to the instance of the struct."}
{"question": "What is the `pub` keyword?", "answer": "Makes a type or function public."}
{"question": "What is the `use` keyword?", "answer": "Brings modules into scope."}
{"question": "What is the `mod` keyword?", "answer": "Declares a module."}
{"question": "What is the `crate` keyword?", "answer": "Refers to the current crate."}
{"question": "What is the `where` clause in generics?", "answer": "Specifies trait bounds for generic parameters."}
{"question": "What is the `Drop` trait?", "answer": "Allows custom cleanup when a value is dropped."}
{"question": "What is the `Send` trait?", "answer": "Marks types safe to send between threads."}
{"question": "What is the `Sync` trait?", "answer": "Marks types safe to share between threads."}
{"question": "How to create a thread in Rust?", "answer": "```rust\nuse std::thread;\nthread::spawn(|| { /* code */ });\n```"}
{"question": "What is `Arc` in Rust?", "answer": "Atomic reference counted pointer for shared ownership."}
{"question": "What is a `Mutex`?", "answer": "A mutual exclusion lock for shared data."}
{"question": "How to use a `Mutex`?", "answer": "```rust\nlet data = mutex.lock().unwrap();\n```"}
{"question": "What is a channel in Rust?", "answer": "Communication between threads via send and receive."}
{"question": "How to create a channel?", "answer": "```rust\nuse std::sync::mpsc;\nlet (sender, receiver) = mpsc::channel();\n```"}
{"question": "What is `RwLock`?", "answer": "A read-write lock for shared data."}
{"question": "What is the `join` method?", "answer": "Waits for a thread to finish: `thread.join()`."}
{"question": "What is the `thread::sleep` function?", "answer": "Suspends the current thread for a duration."}
{"question": "What is the `RefCell` type?", "answer": "Allows interior mutability with runtime checks."}
{"question": "What is the `Box` type?", "answer": "Dynamically allocated memory on the heap."}
{"question": "How to implement a method on a struct?", "answer": "```rust\nimpl Point { fn new(x: i32) -> Self { ... }\n}\n```"}
{"question": "What is the `as` keyword in `use`?", "answer": "Renames a module: `use std::collections::HashMap as HMap;`"}
{"question": "What is the `self` keyword in modules?", "answer": "Refers to the current module."}
{"question": "What is the `super` keyword in modules?", "answer": "Refers to the parent module."}
{"question": "What is the `Deref` trait?", "answer": "Allows dereferencing with `*` operator."}
{"question": "What is the `Display` trait?", "answer": "Formats a type for output using `println!`."}
{"question": "What is the `Debug` trait?", "answer": "Formats a type for debugging with `dbg!`."}
{"question": "What is the `PartialEq` trait?", "answer": "Enables equality comparisons with `==`."}
{"question": "What is the `Eq` trait?", "answer": "Enforces equality for all values."}
{"question": "What is the `Ord` trait?", "answer": "Enables ordering comparisons (`<`, `>`, etc.)."}
{"question": "What is the `Copy` trait?", "answer": "Types that can be copied instead of moved."}
{"question": "What is the `Clone` trait?", "answer": "Types that can be explicitly cloned."}
{"question": "What is the `lifetime` annotation?", "answer": "Ensures references are valid for a specified scope."}
{"question": "What is a closure in Rust?", "answer": "An anonymous function that can capture environment."}
{"question": "How to define a closure?", "answer": "```rust\nlet add = |a, b| a + b;\n```"}
{"question": "What is the `move` keyword in closures?", "answer": "Forces the closure to take ownership of captured variables."}
{"question": "What is the `?` operator in Rust?", "answer": "Propagates errors in `Result` or `Option`."}
{"question": "What is the `panic!` macro?", "answer": "Causes a runtime panic and unwinds the stack."}
{"question": "What is the `unwrap` method?", "answer": "Returns the value or panics if `None`/`Err`."}
{"question": "What is the `expect` method?", "answer": "Returns the value or panics with a custom message."}
{"question": "What is the `match` arm?", "answer": "A pattern and corresponding code block."}
{"question": "What is the `if let` construct?", "answer": "Matches a single pattern and ignores others."}
{"question": "What is the `while let` loop?", "answer": "Continues looping while a pattern matches."}
{"question": "What is the `?` operator in `async` functions?", "answer": "Waits for a future to resolve or returns an error."}
{"question": "What is the `async` keyword?", "answer": "Declares an asynchronous function or block."}
{"question": "What is the `await` keyword?", "answer": "Waits for a future to complete."}
{"question": "What is a `Future` in Rust?", "answer": "A value that may not be ready yet."}
{"question": "What is the `tokio` crate?", "answer": "A runtime for asynchronous programming."}
{"question": "What is the `join` function in `tokio`?", "answer": "Waits for multiple futures to complete."}
{"question": "What is the `select` function in `tokio`?", "answer": "Waits for the first future to complete."}
{"question": "What is the `spawn` function in `tokio`?", "answer": "Creates a new asynchronous task."}
{"question": "What is the `MutexGuard` type?", "answer": "A guard that locks a `Mutex`."}
{"question": "What is the `RwLockWriteGuard` type?", "answer": "A guard that locks an `RwLock` for writing."}
{"question": "What is the `RwLockReadGuard` type?", "answer": "A guard that locks an `RwLock` for reading."}
{"question": "What is the `Once` type?", "answer": "Ensures a block of code runs once."}
{"question": "What is the `Barrier` type?", "answer": "Synchronizes multiple threads at a point."}
{"question": "What is the `Condvar` type?", "answer": "A condition variable for thread synchronization."}
{"question": "What is the `atomic` module?", "answer": "Provides atomic types for concurrency."}
{"question": "What is the `thread_local!` macro?", "answer": "Declares a thread-local variable."}
{"question": "What is the `thread::current` function?", "answer": "Returns the current thread's ID."}
{"question": "What is the `thread::yield_now` function?", "answer": "Yields the current thread's time slice."}
{"question": "What is the `thread::Builder` type?", "answer": "Configures thread creation options."}
{"question": "What is the `thread::scoped` function?", "answer": "Creates a thread with a scoped closure."}
{"question": "What is the `thread::unpark` function?", "answer": "Wakes a thread that is parked."}
{"question": "What is the `thread::park` function?", "answer": "Suspends the current thread until unparked."}
{"question": "What is the `thread::spawn` function's return type?", "answer": "JoinHandle<T>"}
{"question": "What is the main difference between let and const in Rust?", "answer": "let declares a variable, const defines a constant. const requires a type annotation and is evaluated at compile-time."}
{"question": "How do you handle errors in Rust?", "answer": "Using the Result and Option types, along with match expressions or ? operator."}
{"question": "What is the purpose of the Send trait in Rust?", "answer": "It indicates that a type is safe to send between threads."}
{"question": "What is the syntax for a function that takes a reference?", "answer": "fn example(x: &i32) { ... }"}
{"question": "What is the default visibility of items in Rust?", "answer": "Private. Items are private by default unless marked with pub."}
{"question": "How to create a thread in Rust?", "answer": "thread::spawn(|| { ... });"}
{"question": "What is the purpose of the 'use' keyword?", "answer": "To bring modules into scope, allowing access to their items."}
{"question": "What is a tuple struct in Rust?", "answer": "A struct with named fields but no field names, e.g., struct Point(i32, i32);"}
{"question": "What is the 'self' keyword used for in Rust methods?", "answer": "It refers to the instance of the struct, allowing access to its fields and methods."}
{"question": "How to define a constant in Rust?", "answer": "const PI: f64 = 3.14159;"}
{"question": "What is the difference between Vec and array in Rust?", "answer": "Vec is a dynamic, growable list; array has a fixed size known at compile time."}
{"question": "What is the 'match' expression used for?", "answer": "To handle multiple possible values of an expression, similar to switch in other languages."}
{"question": "How to implement a trait for a type?", "answer": "Using impl Trait for Type { ... }"}
{"question": "What is the 'pub' keyword used for?", "answer": "To make items (functions, structs, etc.) publicly accessible."}
{"question": "What is the purpose of the 'drop' trait?", "answer": "To define custom cleanup logic for a type when it goes out of scope."}
{"question": "How to create a slice in Rust?", "answer": "Using &array[start..end], e.g., &nums[1..3]"}
{"question": "What is the difference between 'mut' and 'let'?", "answer": "'mut' allows variable reassignment; 'let' creates an immutable binding."}
{"question": "What is the 'Option' type used for?", "answer": "To represent the presence or absence of a value, e.g., Some(T) or None."}
{"question": "How to create a static variable in Rust?", "answer": "static NAME: Type = value; - must be compile-time constant."}
{"question": "What is the 'as' keyword used for?", "answer": "To cast types explicitly, e.g., x as u8."}
{"question": "What is the 'self' keyword in trait methods?", "answer": "It refers to the implementing type, e.g., fn method(self) in a trait."}
{"question": "How to use a closure in Rust?", "answer": "fn example(|x| x + 1); - can capture environment variables."}
{"question": "What is the 'Result' type used for?", "answer": "To represent success (Ok) or failure (Err) outcomes, e.g., Result<T, E>."}
{"question": "What is the purpose of the 'lifetime' parameter in Rust?", "answer": "To ensure references are valid for the correct scope, preventing dangling pointers."}
{"question": "How to create a thread-safe shared variable?", "answer": "Use Arc<Mutex<T>> for atomic reference counting and mutual exclusion."}
{"question": "What is the 'as_ref' method used for?", "answer": "To convert a type into a reference, e.g., String to &str."}
{"question": "What is the 'derive' attribute used for?", "answer": "To automatically generate implementations for traits like Debug, Clone."}
{"question": "How to handle panics in Rust?", "answer": "Using panic!() macro, or catch them with a panic handler."}
{"question": "What is the difference between 'Box' and 'Rc'?", "answer": "Box is single ownership; Rc is reference-counted, allowing multiple owners."}
{"question": "What is the 'match' arm syntax?", "answer": "Each arm is pattern => expression, e.g., 1 => println!(\"One\")"}
{"question": "How to use the 'if let' pattern?", "answer": "To check for a specific pattern and ignore others, e.g., if let Some(x) = opt { ... }"}
{"question": "What is the 'where' clause used for?", "answer": "To add constraints to generic types, e.g., T: Trait where T: Clone"}
{"question": "What is the 'lifetime' elision rule?", "answer": "Rust infers lifetimes in function signatures with single input reference."}
{"question": "How to create an empty vector in Rust?", "answer": "Vec::new() or vec![]"}
{"question": "What is the 'as_mut' method used for?", "answer": "To convert a type into a mutable reference, e.g., String to &mut str."}
{"question": "What is the 'panic!' macro used for?", "answer": "To cause a panic and unwind the stack, typically for unrecoverable errors."}
{"question": "How to implement a custom trait for a type?", "answer": "Use impl Trait for Type { ... } with the required method implementations."}
{"question": "What is the 'Rc' type used for?", "answer": "To enable multiple ownership of a value via reference counting."}
{"question": "What is the 'match' expression's exhaustiveness check?", "answer": "Rust ensures all possible values are covered, or use _ as a wildcard."}
{"question": "What is the difference between 'let' and 'const' in Rust?", "answer": "'let' declares a variable, while 'const' defines a compile-time constant. 'const' requires a type annotation and is immutable by default."}
{"question": "How do you declare a mutable variable in Rust?", "answer": "Use 'let mut variable_name = value;'."}
{"question": "What are Rust's primitive data types?", "answer": "i8, i16, i32, i64, u8, u16, u32, u64, f32, f64, bool, char, and str."}
{"question": "How to create a function in Rust?", "answer": "Use 'fn function_name(parameters) -> return_type { body }'."}
{"question": "What is a struct in Rust?", "answer": "A custom data type with named fields. Example: struct Point { x: i32, y: i32 }."}
{"question": "How does 'match' work with enums?", "answer": "It allows pattern matching on enum variants. Example: match value { Variant1 => ... }."}
{"question": "What is Rust's ownership system?", "answer": "A set of rules that govern how memory is managed, ensuring safety without a garbage collector."}
{"question": "What is the purpose of 'borrowing' in Rust?", "answer": "Allows temporary access to data without transferring ownership. Uses & or &mut references."}
{"question": "How to use a 'Box' for heap allocation?", "answer": "'let boxed_value = Box::new(value);'."}
{"question": "What is a 'lifetime' in Rust?", "answer": "A way to specify how long references are valid, preventing dangling pointers."}
{"question": "How to define a trait in Rust?", "answer": "Using the 'trait' keyword. Example: trait MyTrait { fn method(&self); }."}
{"question": "What is a 'generic' function?", "answer": "A function that works with any type. Example: fn identity<T>(x: T) -> T { x }."}
{"question": "How to use macros in Rust?", "answer": "Define with 'macro_rules!' or use attribute macros like '#[derive]'. Example: macro_rules! my_macro { ... }."}
{"question": "What is the 'Option' type used for?", "answer": "To represent values that may be absent. It has variants 'Some' and 'None'."}
{"question": "How to handle errors with 'Result'?", "answer": "Use 'Ok' for success or 'Err' for failure. Example: Result<T, E>."}
{"question": "What is the 'Rc' smart pointer for?", "answer": "Shared ownership with reference counting. Use 'Rc::new()' to create."}
{"question": "How to create a vector in Rust?", "answer": "'let vec = vec![1, 2, 3];' or 'Vec::new()' with 'push'."}
{"question": "What is the 'match' expression's purpose?", "answer": "To handle multiple possible values of an expression with pattern matching."}
{"question": "How to implement a trait for a struct?", "answer": "Use 'impl Trait for Struct { ... }'. Example: impl Display for Point { ... }."}
{"question": "What is the 'pub' keyword used for?", "answer": "To make items public. Example: 'pub fn my_function() { ... }'."}
{"question": "How to use 'if let' for pattern matching?", "answer": "Simplifies matching a single pattern. Example: if let Some(x) = value { ... }."}
{"question": "What is the 'Box' type used for?", "answer": "Heap allocation for single values. Example: 'Box::new(5)'."}
{"question": "How to create a thread in Rust?", "answer": "Use 'std::thread::spawn(|| { ... });'."}
{"question": "What is a 'Mutex' in Rust?", "answer": "A mutual exclusion lock for thread-safe data sharing. Use 'lock()' to access."}
{"question": "How to use channels for thread communication?", "answer": "Use 'std::sync::mpsc::channel()'. Send with 'sender.send()' and receive with 'receiver.recv()'."}
{"question": "What is 'Arc' used for?", "answer": "Atomic reference counting for shared ownership across threads. Example: 'Arc::new(data)'."}
{"question": "How to use 'async' functions?", "answer": "Define with 'async fn' and await with 'await'. Requires an async runtime like 'tokio'."}
{"question": "What is the 'Send' trait?", "answer": "'Send' indicates a type can be safely transferred between threads."}
{"question": "How to use 'RwLock' for concurrency?", "answer": "Allows multiple readers or a single writer. Use 'read()' or 'write()' to acquire."}
{"question": "What is the purpose of 'self' in method definitions?", "answer": "'self' is the first parameter of a method, representing the instance of the struct."}
{"question": "How to create a slice in Rust?", "answer": "Use 'array[start..end]' or 'slice[start..end]'. Example: 'let slice = &arr[1..3];'."}
{"question": "What is a 'closure' in Rust?", "answer": "An anonymous function. Example: 'let add = |a, b| a + b;'."}
{"question": "How to use 'iter()' on a vector?", "answer": "'iter()' creates an iterator over references. Use with 'for' loops or methods like 'map'."}
{"question": "What is the 'derive' attribute for?", "answer": "Automatically implements common traits like 'Debug', 'Clone', or 'PartialEq'. Example: '#[derive(Debug)] struct MyStruct;'."}
{"question": "How to handle panics in Rust?", "answer": "Use 'panic!' or 'unwrap()'. Prefer 'expect()' for custom error messages."}
{"question": "What is the 'Result' type?", "answer": "A enum representing success ('Ok') or failure ('Err'). Used for error handling."}
{"question": "How to use 'match' with 'Option'?", "answer": "Pattern match 'Some' and 'None'. Example: match opt { Some(x) => ..., None => ... }."}
{"question": "What is the 'RefCell' type?", "answer": "Allows interior mutability. Use 'borrow()' or 'borrow_mut()' to access."}
{"question": "How to use 'if let' with 'Option'?", "answer": "Simplifies checking 'Some' cases. Example: if let Some(x) = opt { ... }."}
{"question": "What is the 'Box<dyn Trait>' pattern?", "answer": "Used for dynamic dispatch. Example: 'Box<dyn MyTrait>' for trait objects."}
{"question": "How to create an array in Rust?", "answer": "'let arr = [1, 2, 3];' or 'let arr = [0; 5];' for repeated values."}
{"question": "What is the 'use' keyword for?", "answer": "Brings modules or items into scope. Example: 'use std::collections::HashMap;'."}
{"question": "How to implement a custom trait for a type?", "answer": "Use 'impl Trait for Type { ... }'. Example: 'impl MyTrait for i32 { ... }'."}
{"question": "What is the 'lifetime' parameter in function signatures?", "answer": "Specifies how long references are valid. Example: 'fn print<'a>(s: &'a str) { ... }'."}
{"question": "How to use 'thread::join()'?", "answer": "Waits for a thread to finish. Returns a Result containing the thread's return value."}
{"question": "What is the 'thread::spawn' function?", "answer": "Creates a new thread. Example: 'thread::spawn(|| { ... });'."}
{"question": "How to use 'Rc::clone()'?", "answer": "'Rc::clone(&rc)' increments the reference count. Use for shared ownership."}
{"question": "What is the 'Cow' type used for?", "answer": "'Cow' (Copy on Write) allows borrowing or owning data. Useful for efficiency."}
{"question": "How to use 'match' with 'enum'?", "answer": "Matches on variant patterns. Example: 'match color { Color::Red => ... }'."}
{"question": "What is the 'panic!' macro?", "answer": "Causes a panic and unwinds the stack. Use for unrecoverable errors."}
{"question": "How to use 'unwrap_or' on 'Option'?", "answer": "'unwrap_or(default)' returns the value or the default if None. Example: 'opt.unwrap_or(0)'."}
{"question": "What is the 'as' keyword used for?", "answer": "For type casting. Example: 'let x: i32 = 5 as i32;'."}
{"question": "How to use 'where' clauses in generics?", "answer": "'where' specifies trait bounds. Example: 'fn foo<T: Trait>(t: T) where T: AnotherTrait { ... }'."}
{"question": "What is the 'default' keyword for?", "answer": "Specifies a default value for a struct field. Example: 'field: i32 = 0'."}
{"question": "How to use 'try!' macro?", "answer": "'try!' propagates errors in 'Result' types. Example: 'let x = try!(some_result);'."}
{"question": "What is the 'lifetime' elision rule?", "answer": "Rust infers lifetimes when they are not explicitly specified. Common in simple cases."}
{"question": "How to use 'Box::new' for heap allocation?", "answer": "'Box::new(value)' allocates on the heap. Example: 'let boxed = Box::new(5);'."}
{"question": "What is the 'as_ref' method?", "answer": "Converts a 'Box<T>' to a '&T'. Example: 'boxed.as_ref()'."}
{"question": "How to use 'RwLockReadGuard'?", "answer": "'RwLockReadGuard' is a guard for read-only access. Acquired via 'read()'."}
{"question": "What is the 'Send' trait?", "answer": "'Send' indicates a type can be safely sent between threads."}
{"question": "How to use 'Rc::weak_count'?", "answer": "'Rc::weak_count(&rc)' returns the number of weak references."}
{"question": "What is the 'thread_local!' macro?", "answer": "Declares a thread-local variable. Example: 'thread_local! { static MY_VAR: RefCell<i32> = RefCell::new(0); }'."}
{"question": "How to use 'match' with 'Result'?", "answer": "Matches 'Ok' and 'Err' variants. Example: 'match result { Ok(x) => ..., Err(e) => ... }'."}
{"question": "What is the 'core' crate?", "answer": "'core' is a no-std version of the standard library, used in embedded systems."}
{"question": "How to use 'Option::unwrap'?", "answer": "'Option::unwrap()' returns the Some value or panics. Example: 'opt.unwrap()'."}
{"question": "What is the 'as_mut' method?", "answer": "'as_mut()' converts a 'Box<T>' to a '&mut T'. Example: 'boxed.as_mut()'."}
{"question": "How to use 'RwLockWriteGuard'?", "answer": "'RwLockWriteGuard' is a guard for write access. Acquired via 'write()'."}
{"question": "What is the 'lifetime' parameter in structs?", "answer": "Specifies how long references in a struct are valid. Example: 'struct Data<'a> { ref: &'a i32 }'."}
{"question": "How to use 'thread::available_parallelism'?", "answer": "'thread::available_parallelism()' returns the number of logical cores."}
{"question": "What is the 'panic::catch_unwind' function?", "answer": "Captures panics in a thread. Returns a 'Result' containing the panic value."}
{"question": "How to use 'Option::is_none'?", "answer": "'Option::is_none()' returns true if the value is None. Example: 'opt.is_none()'."}
{"question": "What is the 'thread::sleep' function?", "answer": "'thread::sleep(Duration::from_secs(1))' pauses the current thread for 1 second."}
{"question": "How to use 'Result::expect'?", "answer": "'Result::expect()' returns the Ok value or panics with a message. Example: 'result.expect(\"error\")'."}
{"question": "What is the 'core::ptr::NonNull'?", "answer": "'NonNull' is a pointer type that guarantees non-null. Used in unsafe code."}
{"question": "How to use 'Rc::strong_count'?", "answer": "'Rc::strong_count(&rc)' returns the number of strong references."}
{"question": "What is the 'core::mem::size_of'?", "answer": "'size_of::<T>()' returns the size of a type in bytes. Example: 'size_of::<i32>()'."}
{"question": "How to use 'Option::as_ref'?", "answer": "'Option::as_ref()' converts Some to &T. Example: 'opt.as_ref()'."}
{"question": "What is the 'core::fmt::Display' trait?", "answer": "Formats a type as a string. Implement with 'fmt::Display'."}
{"question": "How to use 'Result::ok'?", "answer": "'Result::ok()' returns Some if Ok, else None. Example: 'result.ok()'."}
{"question": "What is the 'core::ops::Add' trait?", "answer": "'Add' trait allows + operator overloading. Implement with 'fn add(self, rhs) -> Self'."}
{"question": "How to use 'Option::as_mut'?", "answer": "'Option::as_mut()' converts Some to &mut T. Example: 'opt.as_mut()'."}
{"question": "What is the 'core::cell::Cell'?", "answer": "'Cell' allows interior mutability without borrowing. Use 'set()' to modify."}
{"question": "How to use 'Result::err'?", "answer": "'Result::err()' returns Err if present. Example: 'result.err()'."}
{"question": "What is the 'core::ptr::Unique'?", "answer": "'Unique' is a unique pointer type. Used in unsafe code for ownership."}
{"question": "How to use 'Option::take'?", "answer": "'Option::take()' consumes the Option and returns Some, leaving None. Example: 'opt.take()'."}
{"question": "What is the 'core::marker::PhantomData'?", "answer": "'PhantomData' is a zero-sized type for generic parameters. Used in unsafe code."}
{"question": "How to use 'Result::map'?", "answer": "'Result::map(f)' applies a function to Ok values. Example: 'result.map(|x| x + 1)'."}
{"question": "What is the difference between 'let' and 'const' in Rust?", "answer": "'let' declares a variable, 'const' defines a compile-time constant. Variables can be reassigned unless marked as 'const', which are immutable by default."}
{"question": "How do you define a struct with named fields?", "answer": "Use `struct Point { x: i32, y: i32 }` to define a struct with named fields."}
{"question": "What is the purpose of the 'match' expression?", "answer": "'match' is used for pattern matching, allowing you to handle different possible values of an expression."}
{"question": "How to create a thread in Rust?", "answer": "Use `std::thread::spawn(|| { ... });` to create a new thread."}
{"question": "What is the 'Box' type used for?", "answer": "'Box' provides heap allocation for values, useful for owning data on the heap."}
{"question": "How to handle errors using 'Result'?", "answer": "Use `Ok(...)` for success, `Err(...)` for failure. Handle with `match` or `?` operator."}
{"question": "What is the 'Option' enum used for?", "answer": "'Option' represents an optional value, either 'Some(T)' or 'None'."}
{"question": "How to use a 'for' loop in Rust?", "answer": "`for i in 0..5 { ... }` iterates over a range. Use `iter()` for collections."}
{"question": "What is the 'Rc' type for?", "answer": "'Rc' (Reference Counted) allows multiple ownership of a value on the heap."}
{"question": "How to implement a trait for a struct?", "answer": "Use `impl Trait for Struct { ... }` to implement a trait for a specific type."}
{"question": "What is the 'lifetime' annotation used for?", "answer": "Lifetimes ensure references are valid for the correct scope, preventing dangling references."}
{"question": "How to create a vector in Rust?", "answer": "`let v = vec![1, 2, 3];` or `Vec::new()` for an empty vector."}
{"question": "What is the 'pub' keyword for?", "answer": "'pub' makes a function, struct, or module public, accessible from other crates."}
{"question": "How to use a 'match' with a 'Vec'?", "answer": "`match v { ... }` can destructure a vector, e.g., `match v { [a, b, c] => ... }`."}
{"question": "What is the 'self' keyword in methods?", "answer": "'self' is the first parameter in method definitions, representing the instance."}
{"question": "How to use 'if let' for pattern matching?", "answer": "`if let Some(x) = value { ... }` checks for a specific pattern and binds it."}
{"question": "What is the 'Arc' type for?", "answer": "'Arc' (Atomic Reference Counted) allows shared ownership across threads."}
{"question": "How to use 'while' loop in Rust?", "answer": "`while condition { ... }` loops until the condition is false."}
{"question": "What is the 'use' keyword for?", "answer": "'use' brings modules or items into scope, e.g., `use std::collections::HashMap;`."}
{"question": "How to create a slice from a vector?", "answer": "Use `&v[1..3]` to create a slice referencing a portion of a vector."}
{"question": "What is the 'impl' block for?", "answer": "'impl' defines methods and associated functions for a type or trait."}
{"question": "How to use 'unwrap()' on an 'Option'?", "answer": "`option.unwrap()` returns the value inside 'Some' or panics if 'None'."}
{"question": "What is the 'mut' keyword for?", "answer": "'mut' makes a variable mutable, allowing reassignment."}
{"question": "How to pass a closure to a function?", "answer": "Functions can take closures as arguments using `Fn` traits, e.g., `f(|x| x + 1)`."}
{"question": "What is the 'static' keyword in Rust?", "answer": "'static' indicates a reference with a fixed lifetime, often used for global data."}
{"question": "How to use 'try_from' for type conversion?", "answer": "Implement `TryFrom` trait for a type, then use `MyType::try_from(value)`."}
{"question": "What is the 'Drop' trait used for?", "answer": "'Drop' allows custom cleanup when a value goes out of scope."}
{"question": "How to use 'match' with 'enum' variants?", "answer": "`match enum_value { Variant1 => ..., Variant2 => ... }` handles each variant."}
{"question": "What is the 'as' keyword for?", "answer": "'as' converts types explicitly, e.g., `x as u32`."}
{"question": "How to use 'Rc::new()' to create a reference-counted box?", "answer": "`let rc = Rc::new(5);` creates a reference-counted value on the heap."}
{"question": "What is the 'lifetime' elision rule?", "answer": "Rust infers lifetimes in function parameters, e.g., `&a` and `&b` default to the same lifetime."}
{"question": "How to use 'iter()' on a vector?", "answer": "`v.iter()` provides an iterator over immutable references of the vector's elements."}
{"question": "What is the 'pub use' statement for?", "answer": "'pub use' reexports an item from a module, making it public in the current scope."}
{"question": "How to use 'Option::Some' and 'Option::None'?", "answer": "`Some(x)` wraps a value, `None` represents absence. Use `if let` to check."}
{"question": "What is the 'Send' trait used for?", "answer": "'Send' indicates a type can be safely sent between threads."}
{"question": "How to use 'async' functions in Rust?", "answer": "Define a function with `async fn` and use `await` to wait for futures."}
{"question": "What is the 'Sync' trait used for?", "answer": "'Sync' allows a type to be safely shared between threads."}
{"question": "How to use 'Mutex' for thread-safe data?", "answer": "`Mutex::new(data)` wraps data, and `lock().unwrap()` accesses it safely."}
{"question": "What is the 'lifetime' parameter in a function?", "answer": "Specifies the relationship between input and output references, e.g., `fn foo<'a>(x: &'a i32) -> &'a i32`."}
{"question": "How to use 'Vec::new()' to create a vector?", "answer": "`let v = Vec::new();` creates an empty vector. Use `vec![...]` for initialized values."}
{"question": "What is the 'pub fn' syntax for?", "answer": "'pub fn' defines a public function accessible outside the module."}
{"question": "How to use 'if let Some(x) = ...'?", "answer": "Checks if an 'Option' is 'Some', binding the value to 'x'."}
{"question": "What is the 'self' parameter in functions?", "answer": "'self' is the first parameter in methods, representing the instance."}
{"question": "How to use 'Result::Ok' and 'Result::Err'?", "answer": "`Ok(value)` indicates success, `Err(error)` indicates failure. Use `match` to handle both."}
{"question": "What is the 'const' keyword for?", "answer": "'const' defines a compile-time constant, e.g., `const PI: f64 = 3.14;`."}
{"question": "How to use 'match' with a 'String'?", "answer": "`match s { ref x if x.len() > 0 => ... }` can match on string content."}
{"question": "What is the 'as_ref' method for?", "answer": "'as_ref()' converts a 'Box<T>' to a 'Box<dyn Trait>' for trait objects."}
{"question": "How to use 'Rc<RefCell<T>>' for interior mutability?", "answer": "`Rc<RefCell<T>>` allows shared ownership and mutable access via 'borrow_mut()'."}
{"question": "What is the 'Sync' trait used for?", "answer": "'Sync' allows a type to be safely shared between threads."}
{"question": "How to use 'channel' for thread communication?", "answer": "`let (tx, rx) = mpsc::channel();` sends and receives values between threads."}
{"question": "What is the 'default' trait used for?", "answer": "'Default' provides a default value for a type via `Default::default()`."}
{"question": "How to use 'match' with a 'Result'?", "answer": "`match result { Ok(x) => ..., Err(e) => ... }` handles success or failure cases."}
{"question": "What is the 'derive' attribute for?", "answer": "'derive' automatically implements traits like 'Debug', 'Clone', or 'Copy'."}
{"question": "How to use 'match' with a 'tuple'?", "answer": "`match (a, b) { (1, 2) => ..., _ => ... }` matches specific tuple patterns."}
{"question": "What is the 'lifetime' parameter in a struct?", "answer": "Specifies how long references in a struct are valid, e.g., `struct Data<'a> { ref: &'a i32 }`."}
{"question": "How to use 'iter_mut()' on a vector?", "answer": "`v.iter_mut()` provides an iterator over mutable references of the vector's elements."}
{"question": "What is the 'where' clause in generics?", "answer": "'where' clarifies trait bounds for complex generic types, e.g., `T: Trait where T: OtherTrait`."}
{"question": "How to use 'Option::None'?", "answer": "`None` represents the absence of a value. Use `if let None = option { ... }` to check."}
{"question": "What is the 'Box<dyn Trait>' type?", "answer": "'Box<dyn Trait>' is a trait object, allowing dynamic dispatch for any type implementing the trait."}
{"question": "How to use 'Result::Err'?", "answer": "`Err(e)` represents an error. Use `match` or `?` to handle it."}
{"question": "What is the 'as_mut' method for?", "answer": "'as_mut()' converts a 'Box<T>' to a 'Box<T>' with mutable access."}
{"question": "How to use 'Rc::clone()' for shared ownership?", "answer": "`Rc::clone(&rc)` increments the reference count, allowing multiple ownership."}
{"question": "What is the 'lifetime' parameter in a function?", "answer": "Specifies how long a reference is valid, e.g., `fn foo<'a>(x: &'a i32) -> &'a i32`."}
{"question": "How to use 'while let' for pattern matching?", "answer": "`while let Some(x) = rx.recv() { ... }` loops until 'None' is received."}
{"question": "What is the 'Send' trait used for?", "answer": "'Send' allows a type to be moved between threads safely."}
{"question": "How to use 'async/await' in Rust?", "answer": "`async fn` defines an async function. Use `await` to wait for a future to complete."}
{"question": "What is the 'Sync' trait used for?", "answer": "'Sync' allows a type to be shared between threads safely."}
{"question": "How to use 'MutexGuard' for thread-safe access?", "answer": "`let guard = mutex.lock().unwrap();` provides a guard to access the data."}
{"question": "What is the 'lifetime' elision rule?", "answer": "Rust infers lifetimes when they are the same, e.g., `&a` and `&b` default to the same lifetime."}
{"question": "How to use 'match' with a 'slice'?", "answer": "`match slice { [a, b, c] => ... }` destructures a slice into elements."}
{"question": "What is the 'pub struct' syntax for?", "answer": "'pub struct' makes a struct public, accessible from other modules."}
{"question": "How to use 'Rc::try_unwrap()' for single ownership?", "answer": "`Rc::try_unwrap(rc)` returns the value if the reference count is 1."}
{"question": "What is the 'lifetime' parameter in a trait?", "answer": "Specifies how long references in a trait are valid, e.g., `trait Trait<'a> { ... }`."}
{"question": "How to use 'Result::Ok'?", "answer": "`Ok(x)` represents a successful result. Use `match` to handle it."}
{"question": "What is the 'as_str' method for?", "answer": "'as_str()' converts a 'String' to a 'str' slice."}
{"question": "How to use 'channel' for thread communication?", "answer": "`let (tx, rx) = mpsc::channel();` sends values via `tx.send()` and receives via `rx.recv()`."}
{"question": "What is the 'Send' trait used for?", "answer": "'Send' allows a type to be moved between threads safely."}
{"question": "How to use 'async' blocks in Rust?", "answer": "`async { ... }` creates a future. Use `tokio::spawn` or `async_std::task::spawn` to run it."}
{"question": "What is the 'Sync' trait used for?", "answer": "'Sync' allows a type to be shared between threads safely."}
{"question": "How to use 'Mutex' for thread-safe data?", "answer": "`Mutex::new(data)` wraps data, and `lock().unwrap()` accesses it safely."}
{"question": "What is the 'lifetime' parameter in a function?", "answer": "Specifies how long a reference is valid, e.g., `fn foo<'a>(x: &'a i32) -> &'a i32`."}
{"question": "How to use 'match' with a 'map'?", "answer": "`match map.get(key) { Some(v) => ..., None => ... }` checks for a key's presence."}
{"question": "What is the 'pub enum' syntax for?", "answer": "'pub enum' makes an enum public, accessible from other modules."}
{"question": "How to use 'Rc::strong_count()' for reference count?", "answer": "`Rc::strong_count(&rc)` returns the number of strong references."}
{"question": "What is the 'lifetime' elision rule?", "answer": "Rust infers lifetimes when they are the same, e.g., `&a` and `&b` default to the same lifetime."}
{"question": "How to use 'iter()' on a hashmap?", "answer": "`map.iter()` provides an iterator over (&key, &value) pairs."}
{"question": "What is the 'as_ref' method for?", "answer": "'as_ref()' converts a 'Box<T>' to a 'Box<dyn Trait>' for trait objects."}
{"question": "How to use 'Option::is_none()?", "answer": "`option.is_none()` returns true if the 'Option' is 'None'."}
{"question": "What is the 'Send' trait used for?", "answer": "'Send' allows a type to be moved between threads safely."}
{"question": "How to use 'async' functions in Rust?", "answer": "Define with `async fn`, and use `await` to wait for futures."}
{"question": "What is the 'Sync' trait used for?", "answer": "'Sync' allows a type to be shared between threads safely."}
{"question": "How to use 'Mutex::new()' for thread-safe data?", "answer": "`let mutex = Mutex::new(5);` creates a mutex-protected value."}
{"question": "What is the 'lifetime' parameter in a struct?", "answer": "Specifies how long references in a struct are valid, e.g., `struct Data<'a> { ref: &'a i32 }`."}
{"question": "What is the difference between 'let' and 'const' in Rust?", "answer": "'let' declares a variable (mutable by default), while 'const' defines a compile-time constant. Example: let x = 5; const Y: i32 = 10;"}
{"question": "How do you declare a mutable variable?", "answer": "Use 'let mut' followed by the variable name. Example: let mut count = 0;"}
{"question": "What is the default data type for integer literals?", "answer": "'i32' on 32-bit systems, 'i64' on 64-bit systems."}
{"question": "How to create a function in Rust?", "answer": "Use 'fn' keyword. Example: fn add(a: i32, b: i32) -> i32 { a + b }"}
{"question": "What is the purpose of 'Box' in Rust?", "answer": "Allocates data on the heap. Example: let b = Box::new(5);"}
{"question": "What is a 'match' expression?", "answer": "A control flow construct for pattern matching. Example: ```rust\nmatch x {\n    1 => println!(\"One\"),\n    _ => println!(\"Other\"),\n}\n```"}
{"question": "How to handle errors in Rust?", "answer": "Use 'Result' or 'Option' types. Example: fn divide(a: f64, b: f64) -> Result<f64, String> { ... }"}
{"question": "What is the 'fn' keyword used for?", "answer": "Declaring functions. Example: fn greet(name: &str) { println!(\"Hello, {}\", name); }"}
{"question": "What is a 'struct' in Rust?", "answer": "A custom data type with named fields. Example: struct Point { x: i32, y: i32 };"}
{"question": "How to create a tuple in Rust?", "answer": "Use parentheses. Example: let t = (1, \"hello\");"}
{"question": "What is the 'impl' block for?", "answer": "Implementing methods for a type. Example: ```rust\nimpl Point {\n    fn new(x: i32, y: i32) -> Self { Self { x, y } }\n}\n```"}
{"question": "What is 'ownership' in Rust?", "answer": "Rust's system for memory management where each value has a single owner."}
{"question": "How to borrow a reference?", "answer": "Use '&' for immutable borrows or '&mut' for mutable. Example: fn print_val(x: &i32) { ... }"}
{"question": "What is a 'trait' in Rust?", "answer": "A blueprint for methods that types can implement. Example: ```rust\ntrait Animal {\n    fn speak(&self);\n}\n```"}
{"question": "How to use a 'for' loop?", "answer": "'for' iterates over ranges or collections. Example: for i in 0..5 { ... }"}
{"question": "What is the 'if let' syntax?", "answer": "Matches a single pattern and executes code if it matches. Example: if let Some(x) = value { ... }"}
{"question": "What is 'lifetime' in Rust?", "answer": "A way to specify how long references are valid. Example: fn longest<'a>(s1: &'a str, s2: &'a str) -> &'a str { ... }"}
{"question": "How to use 'match' with enums?", "answer": "Pattern match on enum variants. Example: ```rust\nmatch color {\n    Color::Red => \"red\",\n    _ => \"other\",\n}\n```"}
{"question": "What is the 'Option' type?", "answer": "Represents a value that may be absent. Has variants 'Some' and 'None'."}
{"question": "How to create a vector?", "answer": "Use 'vec![]' macro. Example: let v = vec![1, 2, 3];"}
{"question": "What is 'borrowing' in Rust?", "answer": "Referencing a value without taking ownership. Uses & or &mut."}
{"question": "How to implement a trait for a struct?", "answer": "Use 'impl Trait for Struct'. Example: ```rust\nimpl Display for Point {\n    fn fmt(&self, f: &mut Formatter) -> Result {\n        write!(f, \"({}, {})\", self.x, self.y)\n    }\n}\n```"}
{"question": "What is the 'as' keyword used for?", "answer": "Type casting. Example: let x: i32 = 5.0 as i32;"}
{"question": "How to use 'while let' for iteration?", "answer": "Continuously matches a pattern. Example: while let Some(x) = iter.next() { ... }"}
{"question": "What is the 'use' keyword for?", "answer": "Brings modules into scope. Example: use std::collections::HashMap;"}
{"question": "How to define a constant?", "answer": "Use 'const' with a type. Example: const PI: f64 = 3.14159;"}
{"question": "What is the 'pub' keyword?", "answer": "Makes a function or struct public. Example: pub fn main() { ... }"}
{"question": "How to create a slice?", "answer": "Use [start..end]. Example: let s = &arr[1..3];"}
{"question": "What is 'lifetime elision'?", "answer": "Rust's rules to infer lifetimes automatically in common cases."}
{"question": "How to handle panics in Rust?", "answer": "Use 'panic!' macro. Example: panic!(\"Something went wrong\");"}
{"question": "What is the 'Result' type?", "answer": "Represents success or error. Has variants 'Ok' and 'Err'."}
{"question": "How to use 'match' with 'Option'?", "answer": "Example: ```rust\nmatch opt {\n    Some(x) => println!(\"Found: {}\", x),\n    None => println!(\"Not found\"),\n}\n```"}
{"question": "What is the 'as_ref' method?", "answer": "Converts a type to a reference. Example: let s = \"hello\".as_ref();"}
{"question": "How to use 'if' expressions?", "answer": "'if' evaluates a condition. Example: if x > 5 { ... } else { ... }"}
{"question": "What is the 'Self' keyword?", "answer": "Refers to the current type in trait implementations. Example: fn new() -> Self { ... }"}
{"question": "How to use 'for' loops with ranges?", "answer": "Example: for i in 0..5 { ... }"}
{"question": "What is the 'Box::new' function?", "answer": "Allocates a value on the heap. Example: let b = Box::new(5);"}
{"question": "How to create a string slice?", "answer": "Use &str. Example: let s = \"hello\";"}
{"question": "What is the 'as' operator for?", "answer": "Converts between types. Example: let x = 5 as u8;"}
{"question": "How to use 'while' loops?", "answer": "'while' loops while a condition is true. Example: while x < 5 { ... }"}
{"question": "What is the 'Option::unwrap' method?", "answer": "Returns the value inside Some, panics if None. Example: let x = Some(5).unwrap();"}
{"question": "How to use 'match' with multiple patterns?", "answer": "Example: ```rust\nmatch x {\n    1 | 2 => println!(\"One or two\"),\n    _ => println!(\"Other\"),\n}\n```"}
{"question": "What is the 'Result::ok' method?", "answer": "Returns Ok value or None. Example: let x = result.ok();"}
{"question": "How to use 'if let' with 'Option'?", "answer": "Example: if let Some(x) = opt { ... } else { ... }"}
{"question": "What is the 'as_ref' method for?", "answer": "Converts a type to a reference. Example: let s = vec![1,2,3].as_ref();"}
{"question": "How to use 'for' loops with iterators?", "answer": "Example: for item in iter { ... }"}
{"question": "What is the 'as_mut' method?", "answer": "Converts a type to a mutable reference. Example: let s = vec![1,2,3].as_mut();"}
{"question": "How to use 'while let' with iterators?", "answer": "Example: while let Some(x) = iter.next() { ... }"}
{"question": "What is the 'Result::err' method?", "answer": "Returns Err value or None. Example: let x = result.err();"}
{"question": "How to use 'match' with 'Result'?", "answer": "Example: ```rust\nmatch result {\n    Ok(v) => println!(\"Success: {}\", v),\n    Err(e) => println!(\"Error: {}\", e),\n}\n```"}
{"question": "What is the 'Option::as_ref' method?", "answer": "Returns a reference to the Some value. Example: let s = Some(5).as_ref();"}
{"question": "How to use 'if' with a condition?", "answer": "'if' executes code if condition is true. Example: if x == 5 { ... }"}
{"question": "What is the 'Option::is_some' method?", "answer": "Returns true if the Option is Some. Example: if opt.is_some() { ... }"}
{"question": "How to use 'match' with guards?", "answer": "Example: ```rust\nmatch x {\n    1 if x > 0 => \"positive\",\n    _ => \"negative\",\n}\n```"}
{"question": "What is the 'Result::is_ok' method?", "answer": "Returns true if the Result is Ok. Example: if res.is_ok() { ... }"}
{"question": "How to use 'for' loops with ranges?", "answer": "Example: for i in 0..5 { ... }"}
{"question": "What is the 'Option::map' function?", "answer": "Applies a function to the Some value. Example: let x = Some(5).map(|v| v * 2);"}
{"question": "How to use 'match' with wildcards?", "answer": "Example: ```rust\nmatch x {\n    _ => \"any value\",\n}\n```"}
{"question": "What is the 'Result::map' function?", "answer": "Transforms Ok values. Example: let x = Ok(5).map(|v| v + 1);"}
{"question": "How to use 'if let' with 'Result'?", "answer": "Example: if let Ok(x) = result { ... } else { ... }"}
{"question": "What is the 'Option::unwrap_or' method?", "answer": "Returns the Some value or a default. Example: let x = opt.unwrap_or(0);"}
{"question": "How to use 'while' loops with conditions?", "answer": "Example: while x < 5 { ... }"}
{"question": "What is the 'Result::unwrap' method?", "answer": "Returns Ok value or panics. Example: let x = result.unwrap();"}
{"question": "How to use 'match' with enums?", "answer": "Example: ```rust\nmatch color {\n    Color::Blue => \"blue\",\n    _ => \"other\",\n}\n```"}
{"question": "What is the 'Option::expect' method?", "answer": "Returns Some value or panics with a message. Example: let x = opt.expect(\"No value\");"}
{"question": "How to use 'for' loops with arrays?", "answer": "Example: for &item in &arr { ... }"}
{"question": "What is the 'Result::and' method?", "answer": "Combines two Results. Example: Ok(5).and(Ok(6)) returns Ok(6)."}
{"question": "How to use 'match' with tuples?", "answer": "Example: ```rust\nmatch (x, y) {\n    (1, 2) => \"match\",\n    _ => \"no match\",\n}\n```"}
{"question": "What is the 'Option::and' method?", "answer": "Returns None if the Option is None, else applies a function. Example: Some(5).and(Some(6)) returns Some(6)."}
{"question": "How to use 'while let' with 'Option'?", "answer": "Example: while let Some(x) = opt { ... }"}
{"question": "What is the 'Result::or' method?", "answer": "Returns the first Ok or the second Result. Example: Ok(5).or(Err(\"msg\")) returns Ok(5)."}
{"question": "How to use 'match' with patterns?", "answer": "Example: ```rust\nmatch x {\n    0 => \"zero\",\n    _ => \"other\",\n}\n```"}
{"question": "What is the 'Option::or' method?", "answer": "Returns None if Some, else the other Option. Example: None.or(Some(5)) returns Some(5)."}
{"question": "How to use 'if' with multiple conditions?", "answer": "'if' can chain with 'else if'. Example: if x > 5 { ... } else if x < 5 { ... } else { ... }"}
{"question": "What is the 'Result::and_then' method?", "answer": "Chains operations on Ok. Example: Ok(5).and_then(|x| Ok(x + 1))"}
{"question": "How to use 'match' with ranges?", "answer": "Example: ```rust\nmatch x {\n    1..=5 => \"in range\",\n    _ => \"out of range\",\n}\n```"}
{"question": "What is the 'Option::and_then' method?", "answer": "Chains operations on Some. Example: Some(5).and_then(|x| Some(x + 1))"}
{"question": "How to use 'while' loops with conditions?", "answer": "Example: while x < 5 { ... }"}
{"question": "What is the 'Result::map_err' method?", "answer": "Transforms Err values. Example: Err(\"msg\").map_err(|e| e.to_string())"}
{"question": "How to use 'match' with references?", "answer": "Example: ```rust\nmatch &x {\n    &1 => \"one\",\n    _ => \"other\",\n}\n```"}
{"question": "What is the 'Option::map_err' method?", "answer": "Transforms None to Err. Example: None.map_err(|e| e.to_string())"}
{"question": "How to use 'if' expressions with guards?", "answer": "'if let' with conditions. Example: if let Some(x) = opt if x > 0 { ... }"}
{"question": "What is the 'Result::unwrap_or' method?", "answer": "Returns Ok value or a default. Example: Ok(5).unwrap_or(0)"}
{"question": "How to use 'while let' with 'Result'?", "answer": "Example: while let Ok(x) = result { ... }"}
{"question": "What is the 'Option::unwrap_or_default' method?", "answer": "Returns Some value or the default. Example: opt.unwrap_or_default()"}
{"question": "How to use 'match' with nested patterns?", "answer": "Example: ```rust\nmatch (x, y) {\n    (Some(a), Some(b)) => \"both Some\",\n    _ => \"other\",\n}\n```"}
{"question": "What is the 'Result::unwrap_or_default' method?", "answer": "Returns Ok value or default. Example: res.unwrap_or_default()"}
{"question": "How to use 'if let' with 'Result'?", "answer": "Example: if let Ok(x) = result { ... } else { ... }"}
{"question": "What is the 'Result::into_ok' method?", "answer": "Extracts Ok value or panics. Example: let x = res.into_ok();"}
{"question": "How to use 'match' with 'Result' and 'Option'?", "answer": "Example: ```rust\nmatch result {\n    Ok(Some(x)) => \"nested\",\n    _ => \"other\",\n}\n```"}
{"question": "What is the 'Option::into_ok' method?", "answer": "Extracts Some value or panics. Example: let x = opt.into_ok();"}
{"question": "How to use 'while let' with 'Option'?", "answer": "Example: while let Some(x) = opt { ... }"}
{"question": "What is the 'Result::into_err' method?", "answer": "Extracts Err value or panics. Example: let e = res.into_err();"}
{"question": "How to use 'match' with 'Result' variants?", "answer": "Example: ```rust\nmatch res {\n    Ok(v) => println!(\"Success: {}\", v),\n    Err(e) => println!(\"Error: {}\", e),\n}\n```"}
{"question": "What is the 'Option::into_err' method?", "answer": "Returns None or Err. Example: Some(5).into_err()"}
{"question": "How to use 'if' with a match expression?", "answer": "'if let' checks for a single pattern. Example: if let Some(x) = opt { ... }"}
{"question": "What is the 'Result::is_err' method?", "answer": "Returns true if the Result is Err. Example: if res.is_err() { ... }"}
{"question": "How to use 'match' with 'Option' and 'Result'?", "answer": "Example: ```rust\nmatch opt {\n    Some(Ok(x)) => \"success\",\n    Some(Err(e)) => \"error\",\n    None => \"none\",\n}\n```"}
{"question": "What is the 'Option::is_none' method?", "answer": "Returns true if the Option is None. Example: if opt.is_none() { ... }"}
{"question": "How to use 'while' loops with 'Option'?", "answer": "Example: while let Some(x) = opt { ... }"}
{"question": "What is the 'Result::map_err' function?", "answer": "Transforms Err values. Example: Err(\"msg\").map_err(|e| e.to_string())"}
{"question": "How to use 'match' with 'Result' and 'Option'?", "answer": "Example: ```rust\nmatch res {\n    Ok(Some(x)) => \"nested\",\n    _ => \"other\",\n}\n```"}
{"question": "What is the 'Option::as_mut' method?", "answer": "Returns a mutable reference to the Some value. Example: Some(5).as_mut();"}
{"question": "How to use 'if let' with 'Result'?", "answer": "Example: if let Ok(x) = result { ... } else { ... }"}
{"question": "What is the 'Result::and_then' function?", "answer": "Chains operations on Ok. Example: Ok(5).and_then(|x| Ok(x + 1))"}
{"question": "How to use 'while let' with 'Result'?", "answer": "Example: while let Ok(x) = result { ... }"}
{"question": "What is the difference between let and const in Rust?", "answer": "`let` declares a variable, `const` defines a constant. `let` can be mutable with `mut`, `const` is always immutable."}
{"question": "How to declare a mutable variable?", "answer": "Use `let mut variable_name = value;`. Example: ```rust\nlet mut x = 5;\n```"}
{"question": "What are the basic data types in Rust?", "answer": "Integer types (i8, u8, i16, u16, i32, u32, i64, u64, isize, usize), float types (f32, f64), bool, char, and strings."}
{"question": "How to create a function?", "answer": "Use `fn function_name(parameters) -> return_type { ... }`. Example: ```rust\nfn add(a: i32, b: i32) -> i32 { a + b }\n```"}
{"question": "What is the purpose of the match expression?", "answer": "It allows pattern matching on a value, handling different cases. Example: ```rust\nmatch x { 1 => println!(\"One\"), _ => println!(\"Other\") }\n```"}
{"question": "How do you implement a trait for a struct?", "answer": "Use `impl Trait for Struct { ... }`. Example: ```rust\nimpl Display for MyStruct { fn fmt(&self, f: &mut Formatter) -> Result { ... } }\n```"}
{"question": "What is a lifetime in Rust?", "answer": "A lifetime is a way to tell the compiler how long references are valid. It's used in generics to prevent dangling references."}
{"question": "How to use pattern matching with enums?", "answer": "Use `match` to destructure enum variants. Example: ```rust\nmatch result { Ok(val) => println!(\"{}\", val), Err(e) => println!(\"Error: {}\", e) }\n```"}
{"question": "What is the role of the 'self' keyword in methods?", "answer": "`self` is the first parameter of a method, representing the instance of the struct. It can be `self`, `&self`, or `&mut self`."}
{"question": "How to handle errors using Result?", "answer": "Use `match` or `?` operator. Example: ```rust\nfn open_file() -> Result<File, Error> { ... }\n```"}
{"question": "What is the purpose of Arc in Rust concurrency?", "answer": "`Arc` (Atomic Reference Counted) allows shared ownership across threads. It's thread-safe and uses atomic operations for reference counting."}
{"question": "How to create a thread in Rust?", "answer": "Use `std::thread::spawn`. Example: ```rust\nthread::spawn(|| { ... });\n```"}
{"question": "What is the difference between Mutex and RwLock?", "answer": "`Mutex` provides exclusive access, while `RwLock` allows multiple readers or one writer. `Mutex` is simpler, `RwLock` is more efficient for read-heavy scenarios."}
{"question": "How to use async/await in Rust?", "answer": "Define an async function with `async fn` and use `await` on futures. Example: ```rust\nasync fn fetch_data() { ... }\n```"}
{"question": "What is the 'Send' trait?", "answer": "`Send` indicates a type can be safely sent between threads. Types implementing `Send` can be moved to another thread."}
{"question": "What is the default visibility in Rust?", "answer": "`pub` if the item is in a module, otherwise `private`. Use `pub` to make items public."}
{"question": "How to create a constant?", "answer": "Use `const NAME: Type = value;`. Example: ```rust\nconst PI: f64 = 3.14;\n```"}
{"question": "What is the difference between String and &str?", "answer": "`String` is a heap-allocated, growable string. `&str` is a string slice, a reference to a string."}
{"question": "How to use a loop in Rust?", "answer": "Use `loop { ... }` for infinite loops, `while` for conditions, `for` for iterating over ranges."}
{"question": "What is the purpose of the 'use' keyword?", "answer": "`use` brings items into scope. Example: ```rust\nuse std::collections::HashMap;\n```"}
{"question": "What is a trait object?", "answer": "A trait object is a way to use a trait as a type. It's created with `dyn Trait`. Example: ```rust\nlet obj: &dyn MyTrait = ...;\n```"}
{"question": "How to implement a custom trait?", "answer": "Use `impl Trait for Type { ... }`. Example: ```rust\nimpl MyTrait for MyStruct { ... }\n```"}
{"question": "What is the 'as' keyword used for?", "answer": "`as` is used for type casting. Example: ```rust\nlet x: i32 = 5 as i32;\n```"}
{"question": "How to use the 'if let' construct?", "answer": "`if let` is used to match a single pattern. Example: ```rust\nif let Some(x) = value { ... }\n```"}
{"question": "What is the 'where' clause in Rust?", "answer": "`where` is used to specify trait bounds for generic types. Example: ```rust\nfn foo<T: Trait + AnotherTrait>() { ... }\n```"}
{"question": "What is the 'JoinHandle' in Rust threads?", "answer": "`JoinHandle` is returned by `spawn` and is used to wait for the thread to finish. Example: ```rust\nlet handle = thread::spawn(...);\nhandle.join().unwrap();\n```"}
{"question": "How to share data between threads safely?", "answer": "Use `Arc` for shared ownership and `Mutex` or `RwLock` for synchronization. Example: ```rust\nArc::new(Mutex::new(data))\n```"}
{"question": "What is the 'Sync' trait?", "answer": "`Sync` indicates a type can be safely shared between threads. Types implementing `Sync` can be used with `Arc`."}
{"question": "How to use channels in Rust?", "answer": "Use `std::sync::mpsc::channel()`. Example: ```rust\nlet (tx, rx) = mpsc::channel();\n```"}
{"question": "What is the 'thread_local!' macro?", "answer": "It defines a thread-local variable. Example: ```rust\ntthread_local!(static TLS: RefCell<i32> = RefCell::new(0));\n```"}
{"question": "What is the 'match' expression used for?", "answer": "To handle multiple possible values of an expression. It's exhaustive and requires handling all cases."}
{"question": "How to create a struct?", "answer": "Use `struct StructName { ... }`. Example: ```rust\nstruct Point { x: i32, y: i32 }\n```"}
{"question": "What is the 'enum' keyword used for?", "answer": "To define an enumerated type. Example: ```rust\nenum Color { Red, Green, Blue }\n```"}
{"question": "How to use the 'as' operator for casting?", "answer": "`as` converts between types. Example: ```rust\nlet x: u8 = 255 as u8;\n```"}
{"question": "What is the 'fn' keyword used for?", "answer": "To declare a function. Example: ```rust\nfn main() { ... }\n```"}
{"question": "What is the 'Box' type in Rust?", "answer": "`Box<T>` is a smart pointer for allocating data on the heap. Example: ```rust\nlet b = Box::new(5);\n```"}
{"question": "How to use the 'impl' block for traits?", "answer": "`impl Trait for Type { ... }` defines methods for a type. Example: ```rust\nimpl Iterator for MyIter { ... }\n```"}
{"question": "What is the purpose of the 'lifetime' parameter in functions?", "answer": "To specify how long references are valid. Example: ```rust\nfn longest<'a>(s1: &'a str, s2: &'a str) -> &'a str\n```"}
{"question": "How to use the 'as_ref' method?", "answer": "`as_ref` converts a `Box<T>` to a `&T`. Example: ```rust\nlet b = Box::new(5);\nlet r = b.as_ref();\n```"}
{"question": "What is the 'derive' attribute used for?", "answer": "To automatically implement traits for a struct. Example: ```rust#[derive(Debug)] struct Point { ... }\n```"}
{"question": "What is the 'panic!' macro used for?", "answer": "To cause a panic and unwind. Example: ```rust\npanic!(\"error message\");\n```"}
{"question": "How to use the 'assert_eq!' macro?", "answer": "Compares two values and panics if they are not equal. Example: ```rust\nassert_eq!(a, b);\n```"}
{"question": "What is the 'Option' enum used for?", "answer": "To represent optional values. `Some(T)` or `None`. Example: ```rust\nlet x: Option<i32> = Some(5);\n```"}
{"question": "How to use the 'Result' enum?", "answer": "Represents success or error. `Ok(T)` or `Err(E)`. Example: ```rust\nfn divide(a: i32, b: i32) -> Result<i32, String> { ... }\n```"}
{"question": "What is the 'match' expression's exhaustiveness?", "answer": "The compiler ensures all possible cases are handled. If not, it will error. Example: ```rust\nmatch x { 1 => ..., _ => ... }\n```"}
{"question": "What is the purpose of the 'ref' keyword in pattern matching?", "answer": "`ref` creates a reference to the value. Example: ```rust\nmatch x { ref y => ... }\n```"}
{"question": "How to use the 'match' expression with guards?", "answer": "Use `if` conditions in patterns. Example: ```rust\nmatch x { y if y > 0 => ..., _ => ... }\n```"}
{"question": "What is the 'as_ref' method for Option?", "answer": "Returns a reference to Some(T) or None. Example: ```rust\nlet x = Some(5).as_ref();\n```"}
{"question": "How to use the 'as_mut' method for Option?", "answer": "Returns a mutable reference to Some(T) or None. Example: ```rust\nlet x = Some(5).as_mut();\n```"}
{"question": "What is the 'Ok' variant in Result?", "answer": "Represents a successful value. Example: ```rust\nOk(42)\n```"}
{"question": "What is the 'Err' variant in Result?", "answer": "Represents an error. Example: ```rust\nErr(\"message\")\n```"}
{"question": "How to use the 'unwrap' method on Option?", "answer": "Returns the value or panics. Example: ```rust\nlet x = Some(5).unwrap();\n```"}
{"question": "How to use the 'expect' method on Result?", "answer": "Returns the value or panics with a message. Example: ```rust\nlet x = Ok(5).expect(\"error\");\n```"}
{"question": "What is the 'Option::None' variant?", "answer": "Represents the absence of a value. Example: ```rust\nlet x: Option<i32> = None;\n```"}
{"question": "How to use the 'match' expression with multiple patterns?", "answer": "Combine patterns using `|`. Example: ```rust\nmatch x { 1 | 2 => println!(\"One or two\"), _ => ... }\n```"}
{"question": "What is the 'Result::Ok' variant?", "answer": "Represents a successful value. Example: ```rust\nOk(42)\n```"}
{"question": "What is the 'Result::Err' variant?", "answer": "Represents an error. Example: ```rust\nErr(\"error\")\n```"}
{"question": "How to use the 'if let' with else?", "answer": "`if let Some(x) = value else { ... }` handles the else case. Example: ```rust\nif let Some(x) = value else { ... }\n```"}
{"question": "What is the 'Option::unwrap_or' method?", "answer": "Returns the value or a default. Example: ```rust\nlet x = None.unwrap_or(0);\n```"}
{"question": "How to use the 'Result::map' method?", "answer": "Transforms the Ok value. Example: ```rust\nOk(5).map(|x| x * 2)\n```"}
{"question": "What is the 'Result::and' method?", "answer": "Combines two Result values. Example: ```rust\nOk(5).and(Ok(6))\n```"}
{"question": "How to use the 'Result::or' method?", "answer": "Returns the first Ok or the second Err. Example: ```rust\nErr(\"a\").or(Err(\"b\"))\n```"}
{"question": "What is the 'Option::map' method?", "answer": "Transforms Some(T) into Some(U). Example: ```rust\nSome(5).map(|x| x.to_string())\n```"}
{"question": "How to use the 'Option::and' method?", "answer": "Returns Some if both are Some. Example: ```rust\nSome(5).and(Some(6))\n```"}
{"question": "What is the 'Option::or' method?", "answer": "Returns the first Some or the second None. Example: ```rust\nNone.or(Some(5))\n```"}
{"question": "What is the 'Option::unwrap_or_default' method?", "answer": "Returns the value or the default. Example: ```rust\nNone.unwrap_or_default()\n```"}
{"question": "How to use the 'Result::and_then' method?", "answer": "Chains operations on Ok. Example: ```rust\nOk(5).and_then(|x| Ok(x + 1))\n```"}
{"question": "What is the 'Result::or_else' method?", "answer": "Handles Err by returning a new Result. Example: ```rust\nErr(\"a\").or_else(|e| Ok(e.len()))\n```"}
{"question": "How to use the 'Option::filter' method?", "answer": "Returns Some if the predicate is true. Example: ```rust\nSome(5).filter(|&x| x > 0)\n```"}
{"question": "What is the 'Option::unwrap_or_else' method?", "answer": "Returns the value or computes a default. Example: ```rust\nNone.unwrap_or_else(|| 0)\n```"}
{"question": "How to use the 'Result::map_err' method?", "answer": "Transforms the Err value. Example: ```rust\nErr(5).map_err(|x| x.to_string())\n```"}
{"question": "What is the 'Result::into_ok' method?", "answer": "Extracts the Ok value or panics. Example: ```rust\nOk(5).into_ok()\n```"}
{"question": "How to use the 'Result::into_err' method?", "answer": "Extracts the Err value or panics. Example: ```rust\nErr(5).into_err()\n```"}
{"question": "What is the 'Option::ok' method?", "answer": "Converts Some(T) to Ok(T). Example: ```rust\nSome(5).ok()\n```"}
{"question": "How to use the 'Result::ok' method?", "answer": "Converts Ok(T) to Some(T). Example: ```rust\nOk(5).ok()\n```"}
{"question": "What is the 'Option::iter' method?", "answer": "Converts Some(T) to an iterator. Example: ```rust\nSome(5).iter().for_each(|x| println!(\"{}\", x))\n```"}
{"question": "How to use the 'Result::iter' method?", "answer": "Converts Ok(T) to an iterator. Example: ```rust\nOk(5).iter().for_each(|x| println!(\"{}\", x))\n```"}
{"question": "What is the 'Option::copied' method?", "answer": "Copies the value inside Some. Example: ```rust\nSome(5).copied()\n```"}
{"question": "How to use the 'Result::copied' method?", "answer": "Copies the Ok value. Example: ```rust\nOk(5).copied()\n```"}
{"question": "What is the 'Option::cloned' method?", "answer": "Clones the value inside Some. Example: ```rust\nSome(5).cloned()\n```"}
{"question": "How to use the 'Result::cloned' method?", "answer": "Clones the Ok value. Example: ```rust\nOk(5).cloned()\n```"}
{"question": "What is the 'Option::as_ref' method?", "answer": "Returns a reference to Some(T). Example: ```rust\nSome(5).as_ref()\n```"}
{"question": "How to use the 'Result::as_ref' method?", "answer": "Returns a reference to Ok(T). Example: ```rust\nOk(5).as_ref()\n```"}
{"question": "What is the 'Option::as_mut' method?", "answer": "Returns a mutable reference to Some(T). Example: ```rust\nSome(5).as_mut()\n```"}
{"question": "How to use the 'Result::as_mut' method?", "answer": "Returns a mutable reference to Ok(T). Example: ```rust\nOk(5).as_mut()\n```"}
{"question": "What is the 'Option::take' method?", "answer": "Removes the value and returns Some. Example: ```rust\nlet x = Some(5);\nx.take();\n```"}
{"question": "How to use the 'Result::take' method?", "answer": "Removes the Ok value. Example: ```rust\nlet x = Ok(5);\nx.take();\n```"}
{"question": "What is the 'Option::replace' method?", "answer": "Replaces the value and returns the old. Example: ```rust\nSome(5).replace(6)\n```"}
{"question": "How to use the 'Result::replace' method?", "answer": "Replaces the Ok value. Example: ```rust\nOk(5).replace(6)\n```"}
{"question": "What is the difference between let and const in Rust?", "answer": "`let` declares a variable, while `const` defines a constant. Constants are compile-time values and must have an explicit type, whereas variables can be immutable or mutable."}
{"question": "How do you create a mutable variable in Rust?", "answer": "Use `let mut variable_name = value;` to declare a mutable variable."}
{"question": "What is the purpose of the `match` expression?", "answer": "`match` allows pattern matching against a value, enabling exhaustive checks of possible variants in enums or other data types."}
{"question": "How to handle panics in Rust?", "answer": "Use `panic!()` to trigger a panic, and `catch_unwind()` to handle it. Prefer `Result` types for recoverable errors."}
{"question": "What is a Rust struct?", "answer": "A struct is a custom data type that groups related fields. Example: `struct Point { x: i32, y: i32 }`."}
{"question": "How to implement a trait for a type?", "answer": "Use `impl Trait for Type { ... }`. Example: `impl ToString for MyType { ... }`."}
{"question": "What is the `Option` enum used for?", "answer": "`Option` represents an optional value: `Some(T)` or `None`. Avoid using null pointers."}
{"question": "How to create a thread in Rust?", "answer": "Use `std::thread::spawn(|| { ... });` to create a new thread."}
{"question": "What is the `Box` type for?", "answer": "`Box` provides heap allocation for values. Useful for owning data when the size is unknown at compile time."}
{"question": "How to borrow a reference in Rust?", "answer": "Use `&` for immutable borrowing and `&mut` for mutable borrowing. The borrow checker enforces rules."}
{"question": "What is the `RwLock` type?", "answer": "`RwLock` allows multiple readers or one writer at a time. Use `read()` for shared access and `write()` for exclusive access."}
{"question": "How to use a closure in Rust?", "answer": "Define with `|args| { ... }`. Example: `let add = |a: i32, b: i32| a + b;`."}
{"question": "What is the `Result` type?", "answer": "`Result<T, E>` represents success (`Ok(T)`) or failure (`Err(E)`). Used for error handling."}
{"question": "How to share data between threads?", "answer": "Use `Arc<Mutex<T>>` for thread-safe shared ownership. `Arc` allows multiple references, `Mutex` ensures exclusive access."}
{"question": "What is the `?` operator in Rust?", "answer": "The `?` operator propagates errors in `Result` or `Option` types. Shortens error handling in functions returning `Result`."}
{"question": "How to define a function in Rust?", "answer": "Use `fn function_name(parameters) -> return_type { ... }`. Example: `fn add(a: i32, b: i32) -> i32 { a + b }`."}
{"question": "How to use pattern matching with enums?", "answer": "Use `match` to destructure enum variants. Example: `match color { Color::Red => ... }`."}
{"question": "What is the `use` keyword for?", "answer": "Brings items into scope. Example: `use std::collections::HashMap;`."}
{"question": "How to create a vector in Rust?", "answer": "Use `vec![1, 2, 3]` or `Vec::new()`. Vectors are growable arrays."}
{"question": "What is the `lifetime` system in Rust?", "answer": "Lifetimes ensure references are valid for the correct duration. Declared with `'a` and inferred automatically in many cases."}
{"question": "How to implement a trait for multiple types?", "answer": "Use a trait bound with `where` clause. Example: `fn process<T: Display + Clone>(item: T)`."}
{"question": "What is the `Arc` type?", "answer": "`Arc` (Atomic Reference Counted) provides thread-safe shared ownership. Use with `Mutex` for concurrent access."}
{"question": "How to handle multiple errors in Rust?", "answer": "Use `Result<T, E>` with `?` operator or `map_err()` to transform errors. `anyhow` crate simplifies error handling."}
{"question": "What is the `impl` block for?", "answer": "Defines methods for a type. Example: `impl Point { fn new(x: i32, y: i32) -> Self { ... } }`."}
{"question": "How to create a slice in Rust?", "answer": "Use `&array[start..end]` to create a slice. Slices reference a portion of an array or vector."}
{"question": "What is the `Box::new()` function?", "answer": "Allocates a value on the heap and returns a `Box<T>`. Example: `let b = Box::new(5);`."}
{"question": "How to use the `async` keyword?", "answer": "Marks a function as asynchronous. Requires `await` inside and an async runtime like `tokio` or `async-std`."}
{"question": "What is the `Send` trait?", "answer": "`Send` indicates a type is safe to transfer between threads. Automatically implemented for most types."}
{"question": "How to create a tuple in Rust?", "answer": "Use parentheses: `(1, \"a\")`. Tuples can hold multiple values of different types."}
{"question": "What is the `Rc` type?", "answer": "`Rc` (Reference Counted) allows multiple ownership of heap data. Not thread-safe; use `Arc` for concurrent access."}
{"question": "How to use the `while let` loop?", "answer": "Matches a pattern in a `while` loop. Example: `while let Some(x) = queue.pop() { ... }`."}
{"question": "What is the `panic!` macro?", "answer": "`panic!` triggers a runtime panic, causing the program to unwind. Use for unrecoverable errors."}
{"question": "How to define a constant in Rust?", "answer": "Use `const NAME: Type = value;`. Constants are evaluated at compile time."}
{"question": "What is the `VecDeque` type?", "answer": "A double-ended queue implemented with a vector. Supports efficient push/pop from both ends."}
{"question": "How to use the `?` operator in async functions?", "answer": "`?` converts `Result` into `Err` for the function's return type, propagating errors asynchronously."}
{"question": "What is the `RefCell` type?", "answer": "`RefCell` provides interior mutability with runtime borrow checking. Use when `&mut` is not feasible."}
{"question": "How to create an iterator in Rust?", "answer": "Use `iter()` or `into_iter()` on collections. Combine with `map()`, `filter()`, etc."}
{"question": "What is the `Cow` type?", "answer": "`Cow` (Copy on Write) allows borrowing or owning data. Efficient for shared and mutable scenarios."}
{"question": "How to use the `match` expression with `if` guards?", "answer": "Add `if condition` after a pattern. Example: `match x { Some(y) if y > 0 => ... }`."}
{"question": "What is the `#[derive(Clone)]` attribute?", "answer": "Adds `Clone` trait implementation, allowing deep copies of a type."}
{"question": "How to use the `thread::spawn` function?", "answer": "`thread::spawn(|| { ... })` creates a new thread. Ensure data is `Send` for cross-thread ownership."}
{"question": "What is the `lifetime` elision rule?", "answer": "Rust automatically infers lifetimes in common cases, like when a function returns a reference to one of its inputs."}
{"question": "How to use the `async/await` syntax?", "answer": "`async` defines an asynchronous function, and `await` suspends execution until a future resolves."}
{"question": "What is the `str` type?", "answer": "`str` is a string slice, a reference to UTF-8 data. Use `String` for owned strings."}
{"question": "How to use the `match` expression with wildcards?", "answer": "`_` matches any value. Example: `match x { 1 => ..., _ => ... }`."}
{"question": "What is the `Sized` trait?", "answer": "`Sized` indicates a type has a known size at compile time. Most types implement it by default."}
{"question": "How to use the `?` operator with `Option`?", "answer": "`?` converts `None` into `Err` and `Some(val)` into `val` in functions returning `Result`."}
{"question": "What is the `Rust` ownership system?", "answer": "Ownership tracks data access. Each value has a single owner, and ownership transfers with assignment."}
{"question": "How to use the `thread::join` method?", "answer": "`thread::spawn(...).join()` waits for a thread to finish. Returns `Result<T, Box<dyn Any + Send>`."}
{"question": "What is the `#![no_std]` attribute?", "answer": "Disables the standard library, useful for embedded systems. Requires `core` or `alloc` crates."}
{"question": "How to use the `match` expression with ranges?", "answer": "Use `..` or `..=` in patterns. Example: `match x { 1..=5 => ... }`."}
{"question": "What is the `Rust` borrowing rules?", "answer": "References must not outlive their data. Immutable references are allowed multiple times; mutable references are exclusive."}
{"question": "How to use the `async` block?", "answer": "`async { ... }` creates a future. Combine with `tokio::spawn` to run it concurrently."}
{"question": "What is the `Rust` module system?", "answer": "Organizes code into hierarchies. Use `mod` to define modules and `use` to import items."}
{"question": "How to use the `?` operator with `Result`?", "answer": "`?` returns `Err` if the `Result` is `Err`, otherwise unwraps `Ok` value."}
{"question": "What is the `Rust` `pub` keyword?", "answer": "`pub` makes items public. Example: `pub struct Point { ... }` allows external access."}
{"question": "How to use the `thread::scoped` function?", "answer": "`thread::scoped(|| { ... })` creates a thread with a closure that can borrow data from the parent."}
{"question": "What is the `Rust` `self` keyword?", "answer": "`self` refers to the current type in method definitions. Used in `impl` blocks."}
{"question": "How to use the `match` expression with `ref`?", "answer": "`ref` creates a reference to a value. Example: `match x { Some(ref y) => ... }`."}
{"question": "What is the `Rust` `use` statement?", "answer": "Brings paths into scope. Example: `use std::collections::HashMap;`."}
{"question": "How to use the `Rust` `Box` type?", "answer": "`Box<T>` allocates data on the heap. Example: `let b = Box::new(5);`."}
{"question": "What is the `Rust` `enum`?", "answer": "`enum` defines a type with multiple variants. Example: `enum Color { Red, Green, Blue }`."}
{"question": "How to use the `Rust` `impl` block?", "answer": "`impl` defines methods for a type. Example: `impl Vec { fn new() -> Self { ... } }`."}
{"question": "What is the `Rust` `fn` keyword?", "answer": "`fn` defines a function. Example: `fn add(a: i32, b: i32) -> i32 { ... }`."}
{"question": "How to use the `Rust` `let` keyword?", "answer": "`let` declares a variable. Example: `let x = 5;`."}
{"question": "What is the `Rust` `mut` keyword?", "answer": "`mut` makes a variable mutable. Example: `let mut x = 5;`."}
{"question": "How to use the `Rust` `match` expression?", "answer": "`match` compares a value against patterns. Example: `match x { 1 => ..., _ => ... }`."}
{"question": "What is the `Rust` `pub` keyword?", "answer": "`pub` makes items public. Example: `pub fn main() { ... }`."}
{"question": "How to use the `Rust` `use` keyword?", "answer": "`use` imports items into scope. Example: `use std::io::Write;`."}
{"question": "What is the `Rust` `struct`?", "answer": "`struct` defines a data type with named fields. Example: `struct Point { x: i32, y: i32 }`."}
{"question": "How to use the `Rust` `trait`?", "answer": "`trait` defines shared behavior. Example: `trait Animal { fn sound(&self); }`."}
{"question": "What is the `Rust` `unsafe` keyword?", "answer": "`unsafe` allows code that violates Rust's safety guarantees. Use with caution and `unsafe` blocks."}
{"question": "How to use the `Rust` `where` clause?", "answer": "`where` clarifies trait bounds. Example: `fn foo<T: Trait> where T: AnotherTrait { ... }`."}
{"question": "What is the `Rust` `yield` keyword?", "answer": "`yield` pauses an `async` function, returning a value to the caller. Used in `async fn` bodies."}
{"question": "How to use the `Rust` `self` keyword?", "answer": "`self` refers to the current instance in method calls. Example: `self.x` in a method."}
{"question": "What is the `Rust` `as` keyword?", "answer": "`as` converts types. Example: `let x: i32 = 3.14 as i32;`."}
{"question": "How to use the `Rust` `static` keyword?", "answer": "`static` declares a static variable. Example: `static PI: f64 = 3.14;`."}
{"question": "What is the `Rust` `const` keyword?", "answer": "`const` defines a compile-time constant. Example: `const MAX: u8 = 255;`."}
{"question": "How to use the `Rust` `loop` keyword?", "answer": "`loop` creates an infinite loop. Use `break` to exit. Example: `loop { ... }`."}
{"question": "What is the `Rust` `for` loop?", "answer": "`for` iterates over collections. Example: `for i in 0..5 { ... }`."}
{"question": "How to use the `Rust` `if` statement?", "answer": "`if` executes code based on a condition. Example: `if x > 5 { ... } else { ... }`."}
{"question": "What is the `Rust` `match` expression?", "answer": "`match` compares a value against patterns. Example: `match x { 1 => ..., _ => ... }`."}
{"question": "How to use the `Rust` `while` loop?", "answer": "`while` runs code while a condition is true. Example: `while x < 5 { ... }`."}
{"question": "What is the `Rust` `fn` keyword?", "answer": "`fn` defines a function. Example: `fn add(a: i32, b: i32) -> i32 { ... }`."}
{"question": "How to use the `Rust` `let` keyword?", "answer": "`let` declares a variable. Example: `let x = 5;`."}
{"question": "What is the `Rust` `mut` keyword?", "answer": "`mut` makes a variable mutable. Example: `let mut x = 5;`."}
{"question": "How to use the `Rust` `use` keyword?", "answer": "`use` imports items into scope. Example: `use std::collections::HashMap;`."}
{"question": "What is the `Rust` `pub` keyword?", "answer": "`pub` makes items public. Example: `pub struct Point { ... }`."}
{"question": "How to use the `Rust` `struct`?", "answer": "`struct` defines a data type with named fields. Example: `struct Point { x: i32, y: i32 }`."}
{"question": "What is the `Rust` `enum`?", "answer": "`enum` defines a type with multiple variants. Example: `enum Color { Red, Green, Blue }`."}
{"question": "How to use the `Rust` `trait`?", "answer": "`trait` defines shared behavior. Example: `trait Animal { fn sound(&self); }`."}
{"question": "What is the `Rust` `unsafe` keyword?", "answer": "`unsafe` allows code that violates Rust's safety guarantees. Use with caution and `unsafe` blocks."}
{"question": "How to use the `Rust` `where` clause?", "answer": "`where` clarifies trait bounds. Example: `fn foo<T: Trait> where T: AnotherTrait { ... }`."}
{"question": "What is the `Rust` `yield` keyword?", "answer": "`yield` pauses an `async` function, returning a value to the caller. Used in `async fn` bodies."}
{"question": "How to use the `Rust` `self` keyword?", "answer": "`self` refers to the current instance in method calls. Example: `self.x` in a method."}
{"question": "What is the `Rust` `as` keyword?", "answer": "`as` converts types. Example: `let x: i32 = 3.14 as i32;`."}
{"question": "How to use the `Rust` `static` keyword?", "answer": "`static` declares a static variable. Example: `static PI: f64 = 3.14;`."}
{"question": "What is the `Rust` `const` keyword?", "answer": "`const` defines a compile-time constant. Example: `const MAX: u8 = 255;`."}
{"question": "How to use the `Rust` `loop` keyword?", "answer": "`loop` creates an infinite loop. Use `break` to exit. Example: `loop { ... }`."}
{"question": "What is the `Rust` `for` loop?", "answer": "`for` iterates over collections. Example: `for i in 0..5 { ... }`."}
{"question": "How to use the `Rust` `if` statement?", "answer": "`if` executes code based on a condition. Example: `if x > 5 { ... } else { ... }`."}
{"question": "What is the correct way to declare a variable in Rust?", "answer": "Use `let x = 5;`."}
{"question": "How do you create a mutable variable in Rust?", "answer": "Use `let mut x = 5;`."}
{"question": "What is the purpose of `fn` in Rust?", "answer": "It defines a function, e.g., `fn add(a: i32, b: i32) -> i32 { a + b }`."}
{"question": "How to comment a single line in Rust?", "answer": "Use `// comment`."}
{"question": "What is the difference between `let` and `const`?", "answer": "`let` creates a variable, while `const` defines a compile-time constant."}
{"question": "How to handle panics in Rust?", "answer": "Use `panic!()` or `unwrap()` to trigger a panic."}
{"question": "What is a tuple in Rust?", "answer": "A collection of values with fixed size and mixed types, e.g., `(1, \"a\")`."}
{"question": "How to create an array in Rust?", "answer": "Use `let arr = [1, 2, 3];`."}
{"question": "What is the `match` keyword used for?", "answer": "Pattern matching, e.g., `match x { 1 => \"one\", _ => \"other\" }`."}
{"question": "How to define a struct in Rust?", "answer": "Use `struct Point { x: i32, y: i32 }`."}
{"question": "What is the `impl` block for?", "answer": "To define methods for a type, e.g., `impl Point { fn new() { ... } }`."}
{"question": "How to create a vector in Rust?", "answer": "Use `let v = vec![1, 2, 3];`."}
{"question": "What is the `Option` enum used for?", "answer": "To represent optional values, e.g., `Some(value)` or `None`."}
{"question": "How to handle errors in Rust?", "answer": "Use `Result` or `?` operator for propagation."}
{"question": "What is the `pub` keyword for?", "answer": "To make items public, e.g., `pub fn main() { ... }`."}
{"question": "How to create a slice in Rust?", "answer": "Use `&arr[1..3]` to get a sub-slice."}
{"question": "What is a trait in Rust?", "answer": "A blueprint for methods, e.g., `trait MyTrait { fn method(); }`."}
{"question": "How to use a trait in a function?", "answer": "`fn use_trait<T: MyTrait>(t: T) { t.method(); }`."}
{"question": "What is the `self` keyword in methods?", "answer": "Refers to the instance of the type, e.g., `fn method(&self) { ... }`."}
{"question": "How to create a new thread in Rust?", "answer": "`std::thread::spawn(|| { ... });`."}
{"question": "What is a `Mutex` in Rust?", "answer": "A mutual exclusion lock for thread-safe data sharing."}
{"question": "How to share data between threads?", "answer": "Use `Arc<Mutex<T>>` for atomic reference counting and mutex protection."}
{"question": "What is the `async` keyword used for?", "answer": "To define asynchronous functions, e.g., `async fn main() { ... }`."}
{"question": "How to await a future in Rust?", "answer": "Use `await` inside an `async` function, e.g., `let result = future.await;`."}
{"question": "What is the `tokio` runtime for?", "answer": "To run asynchronous code, e.g., `tokio::runtime::Runtime::new().unwrap().block_on(main())`."}
{"question": "How to create a channel in Rust?", "answer": "Use `std::sync::mpsc::channel()` for message passing between threads."}
{"question": "What is the `join` method for?", "answer": "To wait for a thread to finish, e.g., `thread.join().unwrap()`."}
{"question": "How to use pattern matching with `match`?", "answer": "`match value { pattern => expr, ... }`."}
{"question": "What is the `?` operator in Rust?", "answer": "Propagates errors in `Result` or `Option` types."}
{"question": "How to define a constant in Rust?", "answer": "Use `const PI: f64 = 3.14;`."}
{"question": "What is the `Box` type for?", "answer": "To allocate data on the heap, e.g., `let b = Box::new(5);`."}
{"question": "How to use a closure in Rust?", "answer": "`let add = |a, b| a + b;`."}
{"question": "What is the `Rc` type for?", "answer": "Reference-counted pointer for shared ownership."}
{"question": "How to create a function that takes a closure?", "answer": "`fn apply<F>(f: F) where F: Fn(i32) -> i32 { ... }`."}
{"question": "What is the `lifetime` annotation used for?", "answer": "To specify how long references are valid, e.g., `fn longest<'a>(s1: &'a str, s2: &'a str) -> &'a str`."}
{"question": "How to use `if let` for pattern matching?", "answer": "`if let Some(x) = value { ... }`."}
{"question": "What is the `while let` loop for?", "answer": "To loop while a pattern matches, e.g., `while let Some(x) = queue.pop() { ... }`."}
{"question": "How to use `match` with enums?", "answer": "`match color { Color::Red => \"red\", ... }`."}
{"question": "What is the `use` keyword for?", "answer": "To bring modules into scope, e.g., `use std::collections::HashMap;`."}
{"question": "How to create a unit struct in Rust?", "answer": "`struct Unit;`."}
{"question": "What is the `derive` attribute used for?", "answer": "To automatically implement traits, e.g., `#[derive(Debug)] struct Point`."}
{"question": "How to handle multiple errors in Rust?", "answer": "Use `Result<T, E>` with `?` or `map_err()`."}
{"question": "What is the `Result` type?", "answer": "Represents success or error, e.g., `Ok(value)` or `Err(error)`."}
{"question": "How to use `Option` with `unwrap_or`?", "answer": "`value.unwrap_or(default)` returns the value or default if `None`."}
{"question": "What is the `as` keyword used for?", "answer": "For type casting, e.g., `let x: i32 = 5.0 as i32;`."}
{"question": "How to create a static variable in Rust?", "answer": "Use `static NAME: Type = value;`."}
{"question": "What is the `drop` trait?", "answer": "Allows custom cleanup when a value goes out of scope."}
{"question": "How to use `match` with wildcards?", "answer": "`_` matches any value, e.g., `match x { 1 => \"one\", _ => \"other\" }`."}
{"question": "What is the `enum` keyword for?", "answer": "To define an enumerated type, e.g., `enum Color { Red, Green }`."}
{"question": "How to use `if` expressions in Rust?", "answer": "`if condition { ... } else { ... }`."}
{"question": "What is the `for` loop syntax in Rust?", "answer": "`for i in 0..5 { ... }` for ranges."}
{"question": "How to use `loop` for infinite loops?", "answer": "`loop { ... }` with `break` to exit."}
{"question": "What is the `match` arm syntax?", "answer": "`pattern => expression`."}
{"question": "How to use `where` clauses in trait bounds?", "answer": "`fn func<T: Trait + OtherTrait>()` or `where T: Trait`."}
{"question": "What is the `RwLock` type?", "answer": "A read-write lock for concurrent access, e.g., `RwLock::new(data)`."}
{"question": "How to use `Arc` for thread-safe sharing?", "answer": "`Arc::new(data)` with `clone()` to share ownership."}
{"question": "What is the `thread::spawn` function?", "answer": "Creates a new thread, e.g., `thread::spawn(|| { ... })`."}
{"question": "How to use `join` to get a thread's return value?", "answer": "`thread.join().unwrap()` returns the value from the thread."}
{"question": "What is the `async fn` syntax?", "answer": "Defines an asynchronous function, e.g., `async fn fetch() -> Result<_, _>`."}
{"question": "How to use `tokio::spawn` for async tasks?", "answer": "`tokio::spawn(async { ... })`."}
{"question": "What is the `await` keyword in Rust?", "answer": "Waits for a future to complete, e.g., `let data = fetch().await;`."}
{"question": "How to use `tokio::main` for async entry points?", "answer": "`#[tokio::main] async fn main() { ... }`."}
{"question": "What is the `Send` trait?", "answer": "Marks types that can be safely sent between threads."}
{"question": "How to use `crossbeam::channel` for thread communication?", "answer": "`let (s, r) = crossbeam::channel::bounded(10);`."}
{"question": "What is the `Sync` trait?", "answer": "Marks types that can be safely shared between threads."}
{"question": "How to use `thread::sleep` in Rust?", "answer": "`std::thread::sleep(std::time::Duration::from_secs(1))`."}
{"question": "What is the `std::time::Instant` for?", "answer": "To measure time intervals, e.g., `let start = Instant::now();`."}
{"question": "How to use `std::thread::available_parallelism`?", "answer": "Returns the number of logical cores, e.g., `let cores = std::thread::available_parallelism().unwrap();`."}
{"question": "What is the `std::sync::mpsc` module?", "answer": "Provides multi-producer, single-consumer channels for threads."}
{"question": "How to use `std::sync::Mutex`?", "answer": "`let m = Mutex::new(data); let mut data = m.lock().unwrap();`."}
{"question": "What is the `std::cell::RefCell` for?", "answer": "Allows interior mutability with runtime checks, e.g., `RefCell::new(data)`."}
{"question": "How to use `std::rc::Rc`?", "answer": "`let rc = Rc::new(data); let clone = Rc::clone(&rc);`."}
{"question": "What is the `std::boxed::Box` type?", "answer": "A smart pointer for heap allocation, e.g., `Box::new(5)`."}
{"question": "How to use `std::vec::Vec`?", "answer": "`let v = Vec::new(); v.push(1);`."}
{"question": "What is the `std::string::String` type?", "answer": "A growable, UTF-8 string, e.g., `let s = String::from(\"hello\");`."}
{"question": "How to use `std::option::Option`?", "answer": "`let x: Option<i32> = Some(5);`."}
{"question": "What is the `std::result::Result` type?", "answer": "Represents success or error, e.g., `Ok(5)` or `Err(\"error\")`."}
{"question": "How to use `std::collections::HashMap`?", "answer": "`let mut h = HashMap::new(); h.insert(\"key\", \"value\");`."}
{"question": "What is the `std::collections::VecDeque` for?", "answer": "A double-ended queue, e.g., `let mut dq = VecDeque::new(); dq.push_back(1);`."}
{"question": "How to use `std::collections::BTreeMap`?", "answer": "A sorted map, e.g., `let mut map = BTreeMap::new(); map.insert(1, \"a\");`."}
{"question": "What is the `std::iter::Iterator` trait?", "answer": "Provides methods like `map`, `filter`, and `fold`."}
{"question": "How to use `std::iter::Iterator::map`?", "answer": "`iter.map(|x| x * 2)`."}
{"question": "What is the `std::iter::Iterator::filter` method?", "answer": "Returns an iterator that includes only elements passing a predicate."}
{"question": "How to use `std::iter::Iterator::collect`?", "answer": "Converts an iterator into a collection, e.g., `vec.iter().collect::<Vec<_>>()`."}
{"question": "What is the `std::fmt::Display` trait?", "answer": "Allows custom formatting for `println!`."}
{"question": "How to implement `Display` for a struct?", "answer": "`impl std::fmt::Display for MyStruct { fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result { ... } }`."}
{"question": "What is the `std::fmt::Debug` trait?", "answer": "For debugging output, e.g., `#[derive(Debug)] struct Point`."}
{"question": "How to use `std::fmt::format`?", "answer": "`format!(\"{}\", value)` for string formatting."}
{"question": "What is the `std::env::args` function?", "answer": "Returns command-line arguments as an iterator."}
{"question": "How to read environment variables in Rust?", "answer": "Use `std::env::var(\"KEY\")`."}
{"question": "What is the `std::fs::File` type?", "answer": "Represents a file, e.g., `File::open(\"file.txt\")`."}
{"question": "How to read a file in Rust?", "answer": "`use std::fs::File; use std::io::Read; let mut file = File::open(\"file.txt\").unwrap(); let mut s = String::new(); file.read_to_string(&mut s).unwrap();`."}
{"question": "What is the `std::path::Path` type?", "answer": "Represents file system paths, e.g., `Path::new(\"/path/to/file\")`."}
{"question": "How to use `std::path::PathBuf`?", "answer": "For mutable path operations, e.g., `PathBuf::from(\"/path\")`."}
{"question": "What is the `std::io::Error` type?", "answer": "Represents I/O errors, e.g., `Err(std::io::Error::new(...))`."}
{"question": "How to handle file I/O errors?", "answer": "Use `?` or `expect()` to propagate or handle them."}
{"question": "What is the `std::process::Command` type?", "answer": "Executes external commands, e.g., `Command::new(\"ls\").spawn()`."}
{"question": "How to use `std::process::exit`?", "answer": "`std::process::exit(0)` to terminate the program."}
{"question": "What is the `std::thread::current()` function?", "answer": "Returns the current thread's ID."}
{"question": "How to use `std::thread::Builder`?", "answer": "`std::thread::Builder::new().spawn(|| { ... }).unwrap()`."}
{"question": "What is the `std::sync::OnceLock`?", "answer": "A thread-safe once-initialized value, e.g., `static LOCK: OnceLock<i32> = OnceLock::new();`."}
{"question": "How to use `std::sync::Once`?", "answer": "`let once = Once::new(); once.call_once(|| { ... });`."}
{"question": "What is the `std::sync::Barrier`?", "answer": "Synchronizes multiple threads, e.g., `Barrier::new(n).wait()`."}
{"question": "How to use `std::sync::Condvar`?", "answer": "`let (lock, cvar) = Condvar::new(); cvar.wait(lock).unwrap()`."}
{"question": "What is the `std::sync::atomic` module?", "answer": "Provides atomic types like `AtomicUsize`."}
{"question": "How to use `std::sync::atomic::AtomicUsize`?", "answer": "`let a = AtomicUsize::new(0); a.fetch_add(1, Ordering::Relaxed);`."}
{"question": "What is the `std::sync::mpsc::Sender`?", "answer": "Sends messages to a channel, e.g., `sender.send(data)`."}
{"question": "How to use `std::sync::mpsc::Receiver`?", "answer": "`receiver.recv().unwrap()` to receive messages."}
{"question": "What is the `std::sync::mpsc::channel` function?", "answer": "Creates a channel, e.g., `let (s, r) = channel();`."}
{"question": "How to use `std::sync::mpsc::try_recv`?", "answer": "`receiver.try_recv()` to check for messages without blocking."}
{"question": "What is the `std::sync::mpsc::SendError`?", "answer": "Occurs when sending to a closed channel."}
{"question": "How to use `std::sync::mpsc::RecvError`?", "answer": "Occurs when receiving from an empty channel."}
{"question": "What is the `std::sync::MutexGuard`?", "answer": "A guard that locks a `Mutex`, e.g., `let guard = mutex.lock().unwrap()`."}
{"question": "How to use `std::sync::Mutex::new`?", "answer": "`let mutex = Mutex::new(data);`."}
{"question": "What is the `std::sync::Once` type?", "answer": "Ensures a block of code runs once, e.g., `Once::new().call_once(|| { ... })`."}
{"question": "How to use `std::sync::OnceLock`?", "answer": "`static LOCK: OnceLock<i32> = OnceLock::new(); let value = LOCK.get_or_init(|| 42);`."}
{"question": "What is the `std::sync::Barrier::new` function?", "answer": "Creates a barrier for thread synchronization, e.g., `Barrier::new(3).wait()`."}
{"question": "How to use `std::sync::Condvar::wait`?", "answer": "`condvar.wait(lock).unwrap()` to wait for a condition."}
{"question": "What is the `std::sync::Condvar::notify_one`?", "answer": "Signals one waiting thread to resume."}
{"question": "How to use `std::sync::Condvar::notify_all`?", "answer": "Signals all waiting threads to resume."}
{"question": "What is the `std::sync::atomic::Ordering` enum?", "answer": "Specifies memory ordering for atomic operations, e.g., `Ordering::Relaxed`."}
{"question": "How to use `std::sync::atomic::AtomicBool`?", "answer": "`let a = AtomicBool::new(true); a.swap(false, Ordering::SeqCst);`."}
{"question": "What is the `std::sync::atomic::AtomicPtr`?", "answer": "A pointer type with atomic operations, e.g., `AtomicPtr::new(ptr)`."}
{"question": "How to use `std::sync::atomic::AtomicIsize`?", "answer": "`let a = AtomicIsize::new(0); a.fetch_add(1, Ordering::Relaxed);`."}
{"question": "What is the `std::sync::atomic::AtomicUsize`?", "answer": "A usize type with atomic operations, e.g., `AtomicUsize::new(0)`."}
{"question": "How to use `std::sync::atomic::AtomicU8`?", "answer": "`let a = AtomicU8::new(0); a.fetch_add(1, Ordering::Relaxed);`."}
{"question": "What is the `std::sync::atomic::AtomicU16`?", "answer": "A 16-bit unsigned integer with atomic operations."}
{"question": "How to use `std::sync::atomic::AtomicU32`?", "answer": "`let a = AtomicU32::new(0); a.fetch_add(1, Ordering::Relaxed);`."}
{"question": "What is the `std::sync::atomic::AtomicU64`?", "answer": "A 64-bit unsigned integer with atomic operations."}
{"question": "How to use `std::sync::atomic::AtomicU128`?", "answer": "`let a = AtomicU128::new(0); a.fetch_add(1, Ordering::Relaxed);`."}
{"question": "What is the `std::sync::atomic::AtomicI8`?", "answer": "A 8-bit signed integer with atomic operations."}
{"question": "How to use `std::sync::atomic::AtomicI16`?", "answer": "`let a = AtomicI16::new(0); a.fetch_add(1, Ordering::Relaxed);`."}
{"question": "What is the `std::sync::atomic::AtomicI32`?", "answer": "A 32-bit signed integer with atomic operations."}
{"question": "How to use `std::sync::atomic::AtomicI64`?", "answer": "`let a = AtomicI64::new(0); a.fetch_add(1, Ordering::Relaxed);`."}
{"question": "What is the `std::sync::atomic::AtomicI128`?", "answer": "A 128-bit signed integer with atomic operations."}
{"question": "What is the difference between let and const in Rust?", "answer": "`let` declares a variable, while `const` defines a constant. `let` variables are immutable by default, but can be made mutable with `mut`. `const` values are always immutable and must have a type specified."}
{"question": "How do you declare a mutable variable in Rust?", "answer": "Use `let mut variable_name = value;`. Example: ```rust let mut x = 5; x = 6; ```"}
{"question": "What are Rust's primitive data types?", "answer": "Integer types (i8/u8, i16/u16, etc.), floating-point types (f32/f64), bool, char, and str."}
{"question": "How to create a function in Rust?", "answer": "Use `fn function_name(parameters) -> return_type { body }`. Example: ```rust fn add(a: i32, b: i32) -> i32 { a + b } ```"}
{"question": "What is the purpose of the 'match' expression?", "answer": "It enables pattern matching against values, handling different cases explicitly. Example: ```rust match x { 1 => \"one\", _ => \"other\" } ```"}
{"question": "How to handle errors using Result?", "answer": "Use `Ok(value)` for success or `Err(error)` for failure. Example: ```rust let result: Result<i32, &str> = Ok(42); ```"}
{"question": "What is the Option enum used for?", "answer": "To represent optional values. It has `Some(value)` or `None`. Example: ```rust let x: Option<i32> = Some(5); ```"}
{"question": "How to use if let for Option?", "answer": "`if let Some(value) = x { ... } else { ... }`. Example: ```rust if let Some(n) = x { println!(\"{}\", n); } ```"}
{"question": "What is a tuple in Rust?", "answer": "A collection of values with fixed size and types. Example: ```rust let pair = (1, \"two\"); ```"}
{"question": "How to define a struct in Rust?", "answer": "Use `struct StructName { field: Type }`. Example: ```rust struct Point { x: i32, y: i32 } ```"}
{"question": "What is a lifetime in Rust?", "answer": "A way to specify how long references are valid. Lifetimes help the borrow checker ensure memory safety."}
{"question": "How to implement a trait for a struct?", "answer": "Use `impl Trait for Struct { ... }`. Example: ```rust impl ToString for Point { fn to_string(&self) -> String { ... } } ```"}
{"question": "What is the Box type used for?", "answer": "To allocate data on the heap. Example: ```rust let b = Box::new(5); ```"}
{"question": "How to use Arc for shared ownership?", "answer": "`Arc<T>` allows multiple ownership with atomic reference counting. Example: ```rust let a = Arc::new(42); ```"}
{"question": "What does the derive attribute do?", "answer": "Automatically implements common traits for a struct. Example: ```rust #[derive(Debug)] struct Point { ... } ```"}
{"question": "How to match on enum variants?", "answer": "Use `match` with each variant. Example: ```rust match result { Ok(v) => v, Err(e) => e } ```"}
{"question": "What is the where clause in generics?", "answer": "Specifies trait bounds for generic parameters. Example: ```rust fn foo<T: Display + Clone>(x: T) where T: Debug { ... } ```"}
{"question": "How to create a custom iterator?", "answer": "Implement the `Iterator` trait with `next()` method. Example: ```rust impl Iterator for MyIter { fn next(&mut self) -> Option<Self::Item> { ... } } ```"}
{"question": "What is the Fn trait in Rust?", "answer": "Represents function-like types. `Fn`, `FnMut`, and `FnOnce` define how a closure captures its environment."}
{"question": "How to use try_from for conversions?", "answer": "Implement `TryFrom<T>` for a type to enable safe conversions. Example: ```rust impl TryFrom<u8> for MyType { type Error = MyError; fn try_from(v: u8) -> Result<Self, Self::Error> { ... } } ```"}
{"question": "What is the Send trait?", "answer": "Marks types that can be safely sent between threads. Types implementing `Send` can be moved across thread boundaries."}
{"question": "How to create a thread in Rust?", "answer": "Use `std::thread::spawn`. Example: ```rust std::thread::spawn(|| { println!(\"Hello from thread\"); }); ```"}
{"question": "What is a Mutex in Rust?", "answer": "A mutual exclusion lock for thread-safe data access. Example: ```rust let m = Mutex::new(0); let mut data = m.lock().unwrap(); ```"}
{"question": "How to use channels for thread communication?", "answer": "Use `std::sync::mpsc::channel()`. Example: ```rust let (tx, rx) = mpsc::channel(); tx.send(42).unwrap(); ```"}
{"question": "What is the async keyword used for?", "answer": "Declares an asynchronous function. Example: ```rust async fn fetch_data() -> Result<String, Error> { ... } ```"}
{"question": "How to use await in async functions?", "answer": "`await` suspends execution until a future completes. Example: ```rust let data = fetch_data().await; ```"}
{"question": "What is the purpose of the 'move' keyword in closures?", "answer": "Forces the closure to take ownership of captured variables. Example: ```rust thread::spawn(move || { ... }); ```"}
{"question": "How to handle panics in Rust?", "answer": "Use `panic!()` macro. Example: ```rust panic!(\"Something went wrong\"); ```"}
{"question": "What is the difference between Vec and array?", "answer": "`Vec` is a dynamic, growable list, while arrays have fixed size. Example: ```rust let v = vec![1,2,3]; let a = [1,2,3]; ```"}
{"question": "How to use the match arm with a range?", "answer": "`match x { 1..=5 => \"in range\", _ => \"out\" }` matches values between 1 and 5 inclusive."}
{"question": "What is the 'as' keyword used for?", "answer": "For type casting. Example: ```rust let x: i32 = 42 as i32; ```"}
{"question": "How to create a reference in Rust?", "answer": "Use `&` to create a reference. Example: ```rust let x = 5; let y = &x; ```"}
{"question": "What is the purpose of the 'self' keyword?", "answer": "Refers to the current instance in methods. Example: ```rust fn greet(&self) { println!(\"Hello, {}\", self.name); } ```"}
{"question": "How to use the 'unwrap' method?", "answer": "Extracts the value from Some/Ok, panics on None/Err. Example: ```rust let x = Some(5).unwrap(); ```"}
{"question": "What is the 'as_ref' method for?", "answer": "Converts a value into a reference. Example: ```rust let s = \"hello\".as_ref(); ```"}
{"question": "How to use the 'if let' syntax?", "answer": "Matches a single pattern and ignores others. Example: ```rust if let Some(x) = value { ... } ```"}
{"question": "What is the 'RwLock' type?", "answer": "A read-write lock that allows multiple readers or one writer. Example: ```rust let rw = RwLock::new(0); ```"}
{"question": "How to handle multiple errors with ? operator?", "answer": "The `?` operator propagates errors. Example: ```rust fn main() -> Result<()> { let data = read_file()?; ... } ```"}
{"question": "What is the purpose of the 'derive' macro?", "answer": "Automatically generates implementations for traits like Debug, Clone, PartialEq."}
{"question": "How to use the 'as_mut' method?", "answer": "Converts a value into a mutable reference. Example: ```rust let s = \"hello\".as_mut(); ```"}
{"question": "What is the 'Option::unwrap_or' method?", "answer": "Returns the value if Some, or a default if None. Example: ```rust let x = None.unwrap_or(42); ```"}
{"question": "How to use the 'while let' loop?", "answer": "Continuously matches a pattern. Example: ```rust while let Some(x) = iter.next() { ... } ```"}
{"question": "What is the 'Box::new' function?", "answer": "Allocates a value on the heap. Example: ```rust let b = Box::new(5); ```"}
{"question": "How to use the 'try' macro?", "answer": "Converts a Result into an Option. Example: ```rust let x = try!(Some(5)); ```"}
{"question": "What is the 'into_iter' method?", "answer": "Converts a collection into an iterator. Example: ```rust for item in vec.into_iter() { ... } ```"}
{"question": "How to use the 'collect' method?", "answer": "Converts an iterator into a collection. Example: ```rust let v: Vec<_> = (0..3).collect(); ```"}
{"question": "What is the 'lazy_static' macro?", "answer": "Allows defining static variables with lazy initialization. Example: ```rust lazy_static! { static ref X: i32 = 42; } ```"}
{"question": "How to use the 'thread_local' macro?", "answer": "Declares a thread-local static variable. Example: ```rust thread_local! { static X: i32 = 42; } ```"}
{"question": "What is the 'crossbeam' crate used for?", "answer": "Provides concurrency utilities like scoped threads and channels. Example: ```rust crossbeam::scope(|scope| { ... }); ```"}
{"question": "How to use the 'tokio' runtime?", "answer": "Run async functions with `tokio::runtime::Runtime::new().unwrap().block_on(async { ... })`."}
{"question": "What is the 'join' method for threads?", "answer": "Waits for a thread to finish. Example: ```rust let handle = thread::spawn(|| { ... }); handle.join().unwrap(); ```"}
{"question": "How to use the 'once_cell' crate?", "answer": "For lazy static initialization. Example: ```rust once_cell::sync::Lazy::new(|| 42); ```"}
{"question": "What is the 'Send' trait?", "answer": "Allows types to be safely sent between threads. Types implementing `Send` can be moved across thread boundaries."}
{"question": "How to use the 'Arc' type?", "answer": "Share ownership across threads. Example: ```rust let a = Arc::new(42); ```"}
{"question": "What is the 'RwLockReadGuard'?", "answer": "A guard that allows read access to a RwLock. Example: ```rust let data = rw.read(); ```"}
{"question": "How to use the 'try_lock' method?", "answer": "Attempts to acquire a lock without blocking. Example: ```rust if let Some(data) = mutex.try_lock() { ... } ```"}
{"question": "What is the 'Future' trait?", "answer": "Represents asynchronous computations. Types implementing `Future` can be awaited."}
{"question": "How to use the 'select' macro in async?", "answer": "Waits for the first future to complete. Example: ```rust select! { future1 => ..., future2 => ... } ```"}
{"question": "What is the 'thread::spawn' function?", "answer": "Creates a new thread. Example: ```rust thread::spawn(|| { println!(\"Hello\"); }); ```"}
{"question": "How to use the 'channel' function?", "answer": "Creates a channel for thread communication. Example: ```rust let (tx, rx) = mpsc::channel(); ```"}
{"question": "What is the 'MutexGuard' type?", "answer": "A guard that allows exclusive access to a Mutex. Example: ```rust let data = mutex.lock().unwrap(); ```"}
{"question": "How to use the 'map' method on Result?", "answer": "Transforms Ok values. Example: ```rust let x = Ok(5).map(|v| v * 2); ```"}
{"question": "What is the 'filter' method for Option?", "answer": "Returns None if the value doesn't satisfy a predicate. Example: ```rust let x = Some(5).filter(|&v| v > 0); ```"}
{"question": "How to use the 'and_then' method on Option?", "answer": "Chains operations that return Option. Example: ```rust let x = Some(5).and_then(|v| Some(v + 1)); ```"}
{"question": "What is the 'or_else' method for Result?", "answer": "Provides a fallback on Err. Example: ```rust let x = Err(5).or_else(|e| Ok(e + 1)); ```"}
{"question": "How to use the 'flatten' method on Option?", "answer": "Removes one level of nesting. Example: ```rust let x = Some(Some(5)).flatten(); ```"}
{"question": "What is the 'coalesce' method for Result?", "answer": "Returns the first Ok value. Example: ```rust let x = Err(5).coalesce(|e| Ok(e + 1)); ```"}
{"question": "How to use the 'zip' method on iterators?", "answer": "Combines two iterators into a single one. Example: ```rust for (a, b) in iter1.zip(iter2) { ... } ```"}
{"question": "What is the 'chain' method for iterators?", "answer": "Concatenates two iterators. Example: ```rust let combined = iter1.chain(iter2); ```"}
{"question": "How to use the 'scan' method on iterators?", "answer": "Accumulates state while iterating. Example: ```rust let sum: i32 = iter.scan(0, |acc, x| { *acc += x; Some(*acc) }); ```"}
{"question": "What is the 'try_fold' method for iterators?", "answer": "Folds with early exit on error. Example: ```rust let result = iter.try_fold(0, |acc, x| Ok(acc + x)); ```"}
{"question": "How to use the 'try_for_each' method?", "answer": "Applies a function that may return an error. Example: ```rust iter.try_for_each(|x| Ok(x + 1))?; ```"}
{"question": "What is the 'into_iter' method for Vec?", "answer": "Consumes the Vec and returns an iterator. Example: ```rust for item in vec.into_iter() { ... } ```"}
{"question": "How to use the 'iter' method on Vec?", "answer": "Returns an iterator over references. Example: ```rust for item in vec.iter() { ... } ```"}
{"question": "What is the 'iter_mut' method for Vec?", "answer": "Returns an iterator over mutable references. Example: ```rust for item in vec.iter_mut() { *item += 1; } ```"}
{"question": "How to use the 'into_iter' for HashMap?", "answer": "Consumes the HashMap and yields (key, value) pairs. Example: ```rust for (k, v) in map.into_iter() { ... } ```"}
{"question": "What is the 'into_values' method for HashMap?", "answer": "Returns an iterator over the values, consuming the map. Example: ```rust for v in map.into_values() { ... } ```"}
{"question": "How to use the 'into_keys' method for HashMap?", "answer": "Returns an iterator over the keys, consuming the map. Example: ```rust for k in map.into_keys() { ... } ```"}
{"question": "What is the 'map' method for HashMap?", "answer": "Transforms values. Example: ```rust let new_map = map.map(|k, v| v + 1); ```"}
{"question": "How to use the 'filter_map' method on Option?", "answer": "Transforms Some values or returns None. Example: ```rust let x = Some(5).filter_map(|v| if v > 0 { Some(v * 2) } else { None }); ```"}
{"question": "What is the 'and' method for Option?", "answer": "Returns None if the current value is None, otherwise returns the provided Option. Example: ```rust let x = Some(5).and(None); ```"}
{"question": "How to use the 'or' method on Option?", "answer": "Returns the current value if Some, otherwise returns the provided Option. Example: ```rust let x = None.or(Some(5)); ```"}
{"question": "What is the 'xor' method for Option?", "answer": "Returns Some if exactly one of the options is Some. Example: ```rust let x = Some(5).xor(None); ```"}
{"question": "How to use the 'zip' method on Result?", "answer": "Combines two Results, returning Err if either is Err. Example: ```rust let x = Ok(5).zip(Ok(\"a\")); ```"}
{"question": "What is the 'and_then' method for Result?", "answer": "Chains operations that return Result. Example: ```rust let x = Ok(5).and_then(|v| Ok(v + 1)); ```"}
{"question": "How to use the 'or_else' method on Result?", "answer": "Provides a fallback on Err. Example: ```rust let x = Err(5).or_else(|e| Ok(e + 1)); ```"}
{"question": "What is the 'coalesce' method for Result?", "answer": "Returns the first Ok value. Example: ```rust let x = Err(5).coalesce(|e| Ok(e + 1)); ```"}
{"question": "How to use the 'flatten' method on Result?", "answer": "Removes one level of nesting. Example: ```rust let x = Ok(Ok(5)).flatten(); ```"}
{"question": "What is the 'map_err' method for Result?", "answer": "Transforms the Err value. Example: ```rust let x = Err(5).map_err(|e| e.to_string()); ```"}
{"question": "How to use the 'with' method on Option?", "answer": "Applies a function to Some values. Example: ```rust let x = Some(5).with(|v| *v + 1); ```"}
{"question": "What is the 'take' method for Option?", "answer": "Returns the Some value and sets the Option to None. Example: ```rust let x = Some(5).take(); ```"}
{"question": "How to use the 'replace' method on Option?", "answer": "Replaces the Some value with a new one. Example: ```rust let x = Some(5).replace(10); ```"}
{"question": "What is the 'as_slice' method for Vec?", "answer": "Returns a slice of the Vec. Example: ```rust let s = vec![1,2,3].as_slice(); ```"}
{"question": "How to use the 'as_mut_slice' method on Vec?", "answer": "Returns a mutable slice. Example: ```rust let s = vec![1,2,3].as_mut_slice(); ```"}
{"question": "What is the 'split_at' method for Vec?", "answer": "Splits the Vec into two at a given index. Example: ```rust let (a, b) = vec![1,2,3].split_at(1); ```"}
{"question": "How to use the 'split_at_mut' method on Vec?", "answer": "Splits into two mutable slices. Example: ```rust let (a, b) = vec![1,2,3].split_at_mut(1); ```"}
{"question": "What is the 'into_boxed_slice' method?", "answer": "Converts a Vec into a Box<dyn Slice>. Example: ```rust let b = vec![1,2,3].into_boxed_slice(); ```"}
{"question": "How to use the 'into_iter' for String?", "answer": "Consumes the String and yields chars. Example: ```rust for c in s.into_iter() { ... } ```"}
{"question": "What is the 'into_bytes' method for String?", "answer": "Converts the String into a Vec<u8>. Example: ```rust let b = s.into_bytes(); ```"}
{"question": "How to use the 'into_boxed_str' method?", "answer": "Converts a String into a Box<str>. Example: ```rust let b = s.into_boxed_str(); ```"}
{"question": "What is the difference between let and const in Rust?", "answer": "`let` declares a variable, while `const` defines a constant. Constants must have a type specified and are evaluated at compile time.\n```rust\nconst MAX: u8 = 100;\nlet x = 42;\n```"}
{"question": "How do you declare a mutable variable?", "answer": "Use `let mut` followed by the variable name.\n```rust\nlet mut y = 5;\ny = 6;\n```"}
{"question": "What are Rust's basic data types?", "answer": "Primitive types like `i32`, `u32`, `f64`, `bool`, `char`, and compound types like `struct`, `enum`, `array`, `tuple`."}
{"question": "What is the purpose of the 'pub' keyword?", "answer": "It makes a module, function, or struct public (visible outside its module)."}
{"question": "How to create a struct with named fields?", "answer": "Use `struct` followed by the name and field definitions.\n```rust\nstruct Point { x: i32, y: i32 }\n```"}
{"question": "What is the 'Self' keyword in structs?", "answer": "It refers to the type of the struct itself, used in method implementations."}
{"question": "How to implement a method on a struct?", "answer": "Use `impl` block with the struct name.\n```rust\nimpl Point {\n    fn new(x: i32, y: i32) -> Self { Self { x, y } }\n}\n```"}
{"question": "What is the 'drop' trait?", "answer": "It allows custom cleanup logic when a value goes out of scope.\n```rust\nimpl Drop for MyStruct { fn drop(&mut self) { /* cleanup */ } }\n```"}
{"question": "What is the 'Option' enum?", "answer": "Represents an optional value: `Some(T)` or `None`."}
{"question": "How to handle panics in Rust?", "answer": "Use `panic!()` macro. To recover, use `Result` or `Option`."}
{"question": "What is the 'Result' type?", "answer": "Represents success (`Ok`) or error (`Err`)."}
{"question": "How to use the 'as' keyword?", "answer": "For type casting. Example: `100 as u8`."}
{"question": "What is a tuple struct?", "answer": "A struct with unnamed fields. Example: `struct Color(u8, u8, u8);`."}
{"question": "How to use the 'use' keyword?", "answer": "Import items into scope. Example: `use std::collections::HashMap;`."}
{"question": "What is the 'mod' keyword?", "answer": "Declares a module. Example: `mod my_module;`."}
{"question": "What is a 'lifetime' parameter?", "answer": "Specifies how long references are valid. Used in function signatures with `<'a>`."}
{"question": "What is the 'Sized' trait?", "answer": "Indicates a type's size is known at compile time. Most types implement it by default."}
{"question": "How to define a trait?", "answer": "Use `trait` keyword. Example: `trait Animal { fn speak(&self); }`."}
{"question": "What is 'impl Trait' syntax?", "answer": "Returns a type that implements the specified trait, without naming it.\n```rust\nfn get_number() -> impl Trait { 42 }\n```"}
{"question": "What is the 'where' clause in generics?", "answer": "Adds constraints to generic parameters. Example: `fn foo<T: Trait + OtherTrait>()` vs `fn foo<T>(T) where T: Trait`."}
{"question": "How to use 'match' with enums?", "answer": "Pattern matches against enum variants.\n```rust\nenum Message { Quit, Move { x: i32, y: i32 } }\nmatch msg { Message::Quit => panic!(), _ => {} }\n```"}
{"question": "What is the 'ref' keyword in patterns?", "answer": "Borrow the value instead of moving it. Example: `let ref x = value;`."}
{"question": "What is the 'Box' type?", "answer": "A smart pointer for heap allocation. Example: `let b = Box::new(5);`."}
{"question": "How to share data between threads?", "answer": "Use `Arc<T>` (atomic reference count) for shared ownership.\n```rust\nuse std::sync::Arc;\nlet data = Arc::new(10);\n```"}
{"question": "What is the 'RwLock' type?", "answer": "Allows multiple readers or one writer. Used for shared mutable data in concurrent code."}
{"question": "How to use channels for thread communication?", "answer": "`std::mpsc::channel()` creates a sender and receiver.\n```rust\nlet (tx, rx) = mpsc::channel();\n```"}
{"question": "What is the 'async' keyword?", "answer": "Declares an asynchronous function. Requires `tokio` or `async-std` runtime.\n```rust\nasync fn main() { /* ... */ }\n```"}
{"question": "What is the 'await' keyword?", "answer": "Suspends execution until an async task completes. Used inside `async` functions.\n```rust\nlet result = my_async_func().await;\n```"}
{"question": "What is the 'Send' trait?", "answer": "Marks types safe to transfer between threads. Most primitive types implement it."}
{"question": "What is a 'closure'?", "answer": "Anonymous functions that can capture environment variables. Example: `|x| x + 1`."}
{"question": "How to use the 'iter' method?", "answer": "Creates an iterator over a collection. Example: `vec.iter()`."}
{"question": "What is the 'map' function for iterators?", "answer": "Transforms each element. Example: `iter.map(|x| x * 2)`."}
{"question": "What is the 'filter' function for iterators?", "answer": "Keeps elements that satisfy a predicate. Example: `iter.filter(|&x| x > 0)`."}
{"question": "What is the 'fold' function for iterators?", "answer": "Accumulates values. Example: `iter.fold(0, |acc, x| acc + x)`."}
{"question": "What is the 'Iterator' trait?", "answer": "Defines the `next()` method for iterating over elements."}
{"question": "What is the 'as_ref' method?", "answer": "Converts a value to a reference. Useful for avoiding copies.\n```rust\nlet s = String::from(\"hello\");\nlet s_ref = s.as_ref();\n```"}
{"question": "What is the 'Cow' type?", "answer": "A clone-on-write smart pointer. Can be `Borrowed` or `Owned`.\n```rust\nuse std::borrow::Cow;\nlet s: Cow<'_, str> = Cow::Borrowed(\"hello\");\n```"}
{"question": "What is the 'PhantomData' struct?", "answer": "A zero-sized type that indicates a generic parameter is used but not stored."}
{"question": "How to use 'macro_rules!'?", "answer": "Defines custom macros with pattern matching. Example: `macro_rules! my_macro { ($x:expr) => { $x } }`."}
{"question": "What is the 'derive' attribute?", "answer": "Automatically implements common traits like `Debug`, `Clone`, or `PartialEq`.\n```rust#[derive(Debug)] struct Point;```"}
{"question": "What is the 'lifetime' elision rule?", "answer": "Rust infers lifetimes in function parameters if they match the return type's lifetime."}
{"question": "What is the 'move' keyword in closures?", "answer": "Forces the closure to take ownership of captured variables.\n```rust\nlet x = 5;\nthread::spawn(move || { println!(\"{}\", x); });\n```"}
{"question": "What is the 'once_cell' crate used for?", "answer": "Provides lazy initialization for static variables.\n```rust\nuse once_cell::sync::OnceCell;\nlet cell = OnceCell::new();\n```"}
{"question": "What is the 'Rc' type?", "answer": "Reference-counted pointer for shared ownership in single-threaded contexts.\n```rust\nuse std::rc::Rc;\nlet rc = Rc::new(10);\n```"}
{"question": "How to handle errors with 'Result'?", "answer": "Use `match` or `?` to propagate errors. Example: `let x = file.read()?;`."}
{"question": "What is the 'try' macro?", "answer": "Simplifies error propagation in functions returning `Result`.\n```rust\nfn main() -> Result<()> {\n    let x = try!(some_function());\n    Ok(())\n}\n```"}
{"question": "What is the 'panic!' macro?", "answer": "Causes a runtime panic. Example: `panic!(\"error message\")`."}
{"question": "What is the 'assert_eq!' macro?", "answer": "Checks if two values are equal, panics otherwise.\n```rust\nassert_eq!(1 + 1, 2);\n```"}
{"question": "What is the 'match' expression?", "answer": "Pattern-matches values against multiple arms. Example: `match x { 1 => \"one\", _ => \"other\" }`."}
{"question": "What is the 'if let' construct?", "answer": "Simplifies matching a single pattern. Example: `if let Some(x) = value { ... }`."}
{"question": "What is the 'Option' type?", "answer": "Represents optional values: `Some(T)` or `None`."}
{"question": "What is the 'Box::new' function?", "answer": "Allocates a value on the heap. Example: `let b = Box::new(5);`."}
{"question": "What is the 'as_mut' method?", "answer": "Converts a value to a mutable reference. Example: `vec.as_mut()`."}
{"question": "What is the 'into_iter' method?", "answer": "Consumes a collection and returns an iterator. Example: `vec.into_iter()`."}
{"question": "What is the 'lifetime' parameter in functions?", "answer": "Specifies how long references are valid. Example: `fn foo<'a>(x: &'a i32) -> &'a i32`."}
{"question": "What is the 'where' clause in generics?", "answer": "Adds trait bounds to generic parameters. Example: `fn foo<T>(t: T) where T: Trait`."}
{"question": "What is the 'static' keyword?", "answer": "Indicates a reference that lives for the entire program. Example: `&'static str`."}
{"question": "What is the 'lifetime' parameter in structs?", "answer": "Specifies how long references in a struct are valid. Example: `struct Data<'a> { ref: &'a i32 }`."}
{"question": "What is the 'Send' trait for threads?", "answer": "Marks types safe to send between threads. `Arc<T>` requires `T: Send`."}
{"question": "What is the 'Sync' trait?", "answer": "Marks types safe to share between threads. `Arc<T>` requires `T: Sync`."}
{"question": "What is the 'Mutex' type?", "answer": "A synchronization primitive for mutual exclusion. Example: `let m = Mutex::new(10);`."}
{"question": "What is the 'RwLock' type?", "answer": "Allows multiple readers or one writer. Example: `let l = RwLock::new(10);`."}
{"question": "How to use 'thread::spawn'?", "answer": "Creates a new thread. Example: `thread::spawn(|| { /* code */ });`."}
{"question": "What is the 'join' method?", "answer": "Waits for a thread to finish. Example: `thread.join().unwrap()`."}
{"question": "What is the 'channel' in Rust concurrency?", "answer": "A way to send and receive values between threads. Example: `let (tx, rx) = mpsc::channel();`."}
{"question": "What is the 'Sender' and 'Receiver' in channels?", "answer": "`Sender` sends values, `Receiver` receives them. Example: `tx.send(10)` and `rx.recv()`."}
{"question": "What is the 'async/await' syntax?", "answer": "Asynchronous function execution. Example: `let result = async_func().await;`."}
{"question": "What is the 'tokio' runtime?", "answer": "A framework for asynchronous programming in Rust. Requires `tokio::main` attribute."}
{"question": "What is the 'Arc' type?", "answer": "Atomic reference-counted pointer for shared ownership across threads.\n```rust\nuse std::sync::Arc;\nlet arc = Arc::new(10);\n```"}
{"question": "What is the 'OnceCell' type?", "answer": "A thread-safe version of `Once` for lazy initialization.\n```rust\nuse once_cell::sync::OnceCell;\nlet cell = OnceCell::new();\n```"}
{"question": "What is the 'RefCell' type?", "answer": "Allows interior mutability with runtime checks. Example: `let c = RefCell::new(10);`."}
{"question": "What is the 'Rc::clone' function?", "answer": "Increments the reference count. Example: `let rc2 = Rc::clone(&rc1);`."}
{"question": "What is the 'Box::leak' function?", "answer": "Converts a `Box<T>` into a `&'static T`, leaking memory.\n```rust\nlet leaked = Box::leak(Box::new(10));\n```"}
{"question": "What is the 'lifetime' parameter in function return types?", "answer": "Specifies the reference's validity. Example: `fn get_str() -> &'static str`."}
{"question": "What is the 'as_ref' method?", "answer": "Converts a `Box<T>` to `&T`. Example: `box.as_ref()`."}
{"question": "What is the 'as_mut' method?", "answer": "Converts a `Box<T>` to `&mut T`. Example: `box.as_mut()`."}
{"question": "What is the 'Cow' type's 'Borrowed' variant?", "answer": "Stores a reference. Example: `Cow::Borrowed(\"str\")`."}
{"question": "What is the 'Cow' type's 'Owned' variant?", "answer": "Stores an owned value. Example: `Cow::Owned(String::new())`."}
{"question": "What is the 'lifetime' parameter in trait methods?", "answer": "Specifies reference validity. Example: `fn foo<'a>(&'a self) -> &'a i32`."}
{"question": "What is the 'lifetime' parameter in function parameters?", "answer": "Specifies how long a reference is valid. Example: `fn foo<'a>(x: &'a i32) -> &'a i32`."}
{"question": "What is the 'lifetime' parameter in struct definitions?", "answer": "Specifies reference validity. Example: `struct Data<'a> { ref: &'a i32 }`."}
{"question": "What is the 'lifetime' parameter in function return types?", "answer": "Specifies the reference's validity. Example: `fn get_ref<'a>() -> &'a i32`."}
{"question": "What is the 'lifetime' parameter in trait bounds?", "answer": "Specifies reference validity. Example: `T: 'a` means `T` has a lifetime of at least 'a."}
{"question": "What is the 'lifetime' parameter in function signatures?", "answer": "Specifies how long a reference is valid. Example: `fn foo<'a>(x: &'a i32) -> &'a i32`."}
{"question": "What is the 'lifetime' parameter in generic types?", "answer": "Specifies reference validity. Example: `struct Foo<'a, T: 'a>`."}
{"question": "What is the syntax for declaring a variable in Rust?", "answer": "let x = 5;"}
{"question": "How do you create a mutable variable in Rust?", "answer": "let mut x = 5;"}
{"question": "What is the difference between 'let' and 'const'?", "answer": "'let' declares a variable, 'const' defines a compile-time constant."}
{"question": "How to print to the console in Rust?", "answer": "println!(\"Hello, world!\");"}
{"question": "What is the type of '5' in Rust?", "answer": "i32"}
{"question": "How to define a function in Rust?", "answer": "fn add(a: i32, b: i32) -> i32 { a + b }"}
{"question": "What is the purpose of 'match' in Rust?", "answer": "To handle multiple possible values of an expression."}
{"question": "How to create a vector in Rust?", "answer": "let v = vec![1, 2, 3];"}
{"question": "What is the 'Option' enum used for?", "answer": "To represent optional values (Some/TNone)."}
{"question": "How to borrow a reference in Rust?", "answer": "let x = 5; let y = &x;"}
{"question": "What is the 'Result' type for?", "answer": "To handle success or error outcomes."}
{"question": "How to use a loop in Rust?", "answer": "loop { println!(\"loop\"); }"}
{"question": "What is the 'Box' type used for?", "answer": "To allocate data on the heap."}
{"question": "How to define a struct in Rust?", "answer": "struct Point { x: i32, y: i32 }"}
{"question": "What is the 'Rc' type for?", "answer": "To enable multiple ownership of heap data."}
{"question": "How to handle panics in Rust?", "answer": "Using 'panic!' or 'unwrap()' to trigger them."}
{"question": "What is the 'as' keyword used for?", "answer": "To cast between types explicitly."}
{"question": "How to create a new thread in Rust?", "answer": "use std::thread; thread::spawn(|| { println!(\"thread\"); });"}
{"question": "What is the 'enum' keyword for?", "answer": "To define a type with named variants."}
{"question": "How to use a while loop in Rust?", "answer": "while x > 0 { x -= 1; }"}
{"question": "What is the 'pub' keyword for?", "answer": "To make items public in a module."}
{"question": "How to use a for loop in Rust?", "answer": "for i in 0..5 { println!(\"{}\", i); }"}
{"question": "What is the 'self' keyword in Rust?", "answer": "Refers to the current type instance in methods."}
{"question": "How to use a closure in Rust?", "answer": "|x| x + 1"}
{"question": "What is the 'use' keyword for?", "answer": "To bring modules or items into scope."}
{"question": "How to handle a panic in a thread?", "answer": "Using 'thread::spawn' with 'unwrap()' or 'expect()'."}
{"question": "What is the 'Vec' type?", "answer": "A dynamic array type from the standard library."}
{"question": "How to create a tuple in Rust?", "answer": "let t = (1, \"a\");"}
{"question": "What is the 'impl' block for?", "answer": "To define methods for a type."}
{"question": "How to use a match arm with a wildcard?", "answer": "_ => ..."}
{"question": "What is the 'lifetime' annotation used for?", "answer": "To specify how long references are valid."}
{"question": "How to use the 'if let' pattern?", "answer": "if let Some(x) = value { ... }"}
{"question": "What is the 'Box::new()' function?", "answer": "Allocates a value on the heap."}
{"question": "How to use a static variable in Rust?", "answer": "static X: i32 = 5;"}
{"question": "What is the 'Arc' type?", "answer": "A thread-safe reference-counted pointer."}
{"question": "How to use a 'for' loop with indexes?", "answer": "for (i, &item) in v.iter().enumerate() { ... }"}
{"question": "What is the 'as_ref()' method?", "answer": "Converts a Box to a reference."}
{"question": "How to use 'thread::join()' in Rust?", "answer": "let handle = thread::spawn(...); handle.join().unwrap();"}
{"question": "What is the 'Result' enum's variants?", "answer": "Ok and Err"}
{"question": "How to use a 'match' guard?", "answer": "match x { y if y > 0 => ..., _ => ... }"}
{"question": "What is the 'Rc::clone()' function?", "answer": "Increments the reference count."}
{"question": "How to use 'tokio::spawn' for async tasks?", "answer": "use tokio; tokio::spawn(async { ... });"}
{"question": "What is the 'async' keyword for?", "answer": "To define asynchronous functions."}
{"question": "How to use 'await' in async code?", "answer": "let result = future.await;"}
{"question": "What is the 'Mutex' type used for?", "answer": "To synchronize access to shared data."}
{"question": "How to create a channel in Rust?", "answer": "use std::sync::mpsc; let (tx, rx) = mpsc::channel();"}
{"question": "What is the 'Send' trait?", "answer": "Marks a type as safe to send between threads."}
{"question": "How to use 'thread::sleep' in Rust?", "answer": "use std::thread; use std::time::Duration; thread::sleep(Duration::from_secs(1));"}
{"question": "What is the 'Fn' trait?", "answer": "Defines a function type for closures."}
{"question": "How to use 'crossbeam' for thread-safe data structures?", "answer": "use crossbeam::channel; let (s, r) = channel::unbounded();"}
{"question": "What is the 'thread_local!' macro?", "answer": "Declares a thread-local variable."}
{"question": "How to use 'std::sync::mpsc' channels?", "answer": "Send and receive values between threads."}
{"question": "What is the 'RefCell' type?", "answer": "Allows for interior mutability."}
{"question": "How to use 'tokio::task' for async tasks?", "answer": "use tokio::task; task::spawn(async { ... });"}
{"question": "What is the 'Future' trait?", "answer": "Represents asynchronous computations."}
{"question": "How to use 'async/await' in a function?", "answer": "async fn my_func() { let x = await my_async_func(); }"}
{"question": "What is the 'OnceLock' type?", "answer": "A thread-safe lazy initializer."}
{"question": "How to use 'std::thread::available_parallelism'?", "answer": "Returns the number of available CPU cores."}
{"question": "What is the 'thread::Builder' used for?", "answer": "Customize thread attributes before spawning."}
{"question": "How to use 'std::sync::Barrier'?", "answer": "Synchronizes multiple threads at a point."}
{"question": "What is the 'thread::panicking()' function?", "answer": "Checks if the current thread is panicking."}
{"question": "How to use 'std::sync::MutexGuard'?", "answer": "A guard that locks a Mutex."}
{"question": "What is the 'thread::spawn' function's return type?", "answer": "JoinHandle"}
{"question": "How to use 'std::sync::atomic' types?", "answer": "For atomic operations on shared data."}
{"question": "What is the 'thread::current()' function?", "answer": "Returns the current thread's ID."}
{"question": "How to use 'std::sync::Condvar'?", "answer": "To wait for a condition in a thread."}
{"question": "What is the 'thread::yield_now()' function?", "answer": "Yields the current thread's execution."}
{"question": "How to use 'std::sync::RwLock'?", "answer": "Allows shared or exclusive access to data."}
{"question": "What is the 'thread::spawn' function's closure capture?", "answer": "Moves ownership of captured variables."}
{"question": "How to use 'std::sync::mpsc::Receiver'?", "answer": "Receives values from a channel."}
{"question": "What is the difference between 'let' and 'const' in Rust?", "answer": "'let' declares a variable (mutable by default), while 'const' defines a compile-time constant. 'const' requires a type annotation and is immutable by default."}
{"question": "How do you create a mutable variable in Rust?", "answer": "Use 'let mut variable_name = value;' to declare a mutable variable."}
{"question": "What is the purpose of the 'match' expression?", "answer": "It enables pattern matching, allowing to handle different possible values of a variable exhaustively."}
{"question": "What is a 'tuple' in Rust?", "answer": "A collection of values with fixed size and mixed types, e.g., (1, \"a\")."}
{"question": "How do you define a function in Rust?", "answer": "Use 'fn function_name(parameters) -> return_type { ... }'. Example: fn add(a: i32, b: i32) -> i32 { a + b }"}
{"question": "What is the 'Option' type used for?", "answer": "It represents an optional value, either Some(T) or None."}
{"question": "How to access elements in a slice?", "answer": "Use indexing: let element = slice[index]; or iterate with for loop."}
{"question": "What is the 'Result' type in Rust?", "answer": "It represents success (Ok(T)) or failure (Err(E)) outcomes, commonly used for error handling."}
{"question": "How to create a struct in Rust?", "answer": "Use 'struct StructName { field: Type }'. Example: struct Point { x: i32, y: i32 }"}
{"question": "What is the 'self' keyword in Rust methods?", "answer": "It refers to the instance of the struct, used as the first parameter in method definitions."}
{"question": "How to handle panics in Rust?", "answer": "Use 'panic!()' to trigger a panic. To recover, use 'std::panic::catch_unwind()'."}
{"question": "What is a 'lifetime' in Rust?", "answer": "A concept to ensure references are valid for the correct duration, preventing dangling references."}
{"question": "How to implement a trait for a type?", "answer": "Use 'impl Trait for Type { ... }'. Example: impl Display for MyStruct { ... }"}
{"question": "What is the 'Box' type used for?", "answer": "It allows heap allocation for values, useful for large data or recursive types."}
{"question": "How to use a 'for' loop in Rust?", "answer": "'for item in collection { ... }'. Iterates over elements or ranges."}
{"question": "What is the 'pub' keyword in Rust?", "answer": "It makes a function, struct, or module public, accessible from other crates."}
{"question": "How to create a vector in Rust?", "answer": "Use 'vec![elements]' or 'Vec::new()'. Example: let v = vec![1, 2, 3];"}
{"question": "What is the 'as' keyword used for?", "answer": "It converts one type to another, e.g., 5 as u8 or 'a' as char."}
{"question": "How to handle multiple errors in Rust?", "answer": "Use 'Result<T, E>' with 'map_err()' or 'and_then()' for chaining error handling."}
{"question": "What is the 'use' keyword for?", "answer": "Imports items from modules, e.g., 'use std::collections::HashMap;'."}
{"question": "How to create a thread in Rust?", "answer": "Use 'std::thread::spawn(|| { ... })'. Example: thread::spawn(|| { println!(\"Hello\"); })"}
{"question": "What is the 'match' arm syntax?", "answer": "Each arm is 'pattern => expression'. Must cover all possible cases."}
{"question": "How to define a constant in Rust?", "answer": "Use 'const CONSTANT_NAME: Type = value;'. Example: const PI: f64 = 3.14159;"}
{"question": "What is the 'ref' keyword in pattern matching?", "answer": "It creates a reference to the value instead of moving it. Example: match x { ref y => ... }"}
{"question": "How to use 'if let' in Rust?", "answer": "Simplifies 'match' for a single case. Example: if let Some(value) = option { ... }"}
{"question": "What is the 'enum' type in Rust?", "answer": "It defines a type with a fixed set of variants, e.g., enum Color { Red, Green, Blue }"}
{"question": "How to create a static variable in Rust?", "answer": "Use 'static VARIABLE: Type = value;'. Must be 'static lifetime and immutable."}
{"question": "What is the 'as_ref()' method used for?", "answer": "Converts a value into a reference, e.g., String to &str."}
{"question": "How to use 'while let' in Rust?", "answer": "Loops while a pattern matches. Example: while let Some(item) = queue.pop() { ... }"}
{"question": "What is the 'Drop' trait?", "answer": "Allows custom cleanup when a value goes out of scope. Implement 'drop(&mut self)'."}
{"question": "How to create a slice from a vector?", "answer": "Use 'vector[start..end]'. Example: let slice = vec![1,2,3][1..3];"}
{"question": "What is the 'lifetime elision' in Rust?", "answer": "A set of rules that allows omitting explicit lifetimes in function signatures."}
{"question": "How to use 'match' with enums?", "answer": "Each enum variant is a pattern. Example: match color { Color::Red => ... }"}
{"question": "What is the 'Rust' ownership system?", "answer": "It ensures memory safety by tracking which variable owns a resource, preventing data races."}
{"question": "How to create a reference in Rust?", "answer": "Use '&variable' to create an immutable reference, or '&mut variable' for mutable."}
{"question": "What is the 'Send' trait in Rust?", "answer": "It indicates a type can be safely sent to another thread. Required for thread communication."}
{"question": "How to use 'if let' with 'Option'?", "answer": "Checks if Some(...) and binds the value. Example: if let Some(x) = optional { ... }"}
{"question": "What is the 'Sync' trait in Rust?", "answer": "It indicates a type can be safely shared between threads. Required for thread-safe data."}
{"question": "How to create an array in Rust?", "answer": "Use '[element, ...]' with fixed size. Example: let arr = [1, 2, 3];"}
{"question": "What is the 'panic!' macro used for?", "answer": "It triggers a runtime panic, causing the program to crash. Used for unrecoverable errors."}
{"question": "How to use 'for' loops with ranges?", "answer": "'for i in 0..5 { ... }' iterates from 0 to 4."}
{"question": "What is the 'lifetime parameter' in Rust?", "answer": "It specifies the scope of a reference, e.g., 'fn foo<'a>(x: &'a i32) -> &'a i32'."}
{"question": "How to handle errors with 'Result'?", "answer": "Use 'match' or 'if let' to check Ok or Err. Example: match result { Ok(v) => ..., Err(e) => ... }"}
{"question": "What is the 'Rust' 'move' keyword in closures?", "answer": "It forces the closure to take ownership of captured variables, useful for threads."}
{"question": "How to create a function that returns a 'Result'?", "answer": "Define the return type as 'Result<T, E>'. Example: fn divide(a: i32, b: i32) -> Result<i32, String> { ... }"}
{"question": "What is the 'Rust' 'asynchronous' programming model?", "answer": "Uses 'async' and 'await' to write non-blocking code, with 'futures' and 'tokio' crates."}
{"question": "How to use 'thread::spawn' with a closure?", "answer": "'thread::spawn(move || { ... })' creates a new thread. 'move' captures variables by value."}
{"question": "What is the 'Rust' 'Arc' type?", "answer": "A thread-safe reference-counted pointer, used for shared ownership across threads."}
{"question": "How to use 'Mutex' in Rust?", "answer": "'Mutex<T>' allows safe shared mutable access. Use 'lock()' to acquire the guard."}
{"question": "What is the 'Rust' 'channel' for concurrency?", "answer": "'std::sync::mpsc::channel()' creates a multi-producer, single-consumer channel for thread communication."}
{"question": "How to use 'Rust' 'async' functions?", "answer": "Define with 'async fn function() { ... }'. Use 'await' to wait for futures."}
{"question": "What is the 'Rust' 'future' trait?", "answer": "Represents a value that may not be available yet. Used with 'async' and 'await'."}
{"question": "How to share data between threads safely?", "answer": "Use 'Arc<Mutex<T>>' for shared ownership and mutual exclusion."}
{"question": "What is the 'Rust' 'join' method for threads?", "answer": "'handle.join()' waits for a thread to finish. Returns the thread's result."}
{"question": "How to use 'Rust' 'once_cell' for lazy initialization?", "answer": "'once_cell::sync::OnceCell' provides thread-safe lazy initialization."}
{"question": "What is the 'Rust' 'thread_local' macro?", "answer": "Declares a thread-local variable, accessible only within the thread it was created."}
{"question": "How to create a 'Rust' 'thread pool'?", "answer": "Use 'rayon' or 'tokio' crates. Example: ThreadPool::new(4).execute(|| { ... })"}
{"question": "What is the 'Rust' 'atomic' type?", "answer": "Provides atomic operations for shared data, e.g., 'AtomicUsize' for thread-safe counters."}
{"question": "How to use 'Rust' 'crossbeam' for concurrency?", "answer": "'crossbeam::scope' allows scoped threads, and 'crossbeam::channel' provides channels."}
{"question": "What is the 'Rust' 'lifetime bound' in generics?", "answer": "Specifies that a reference must live as long as a generic parameter. Example: 'fn foo<'a, T: 'a>(x: &'a T) -> &'a T'."}
{"question": "How to use 'Rust' 'trait object' pointers?", "answer": "Use 'Box<dyn Trait>' for dynamic dispatch. Example: let obj: Box<dyn Animal> = Box::new(Dog);"}
{"question": "What is the 'Rust' 'lifetime' elision rules?", "answer": "The compiler infers lifetimes based on input/output parameters. For example, 'fn foo(x: &i32) -> &i32' implies the output reference lives as long as the input."}
{"question": "How to implement a custom 'Display' trait?", "answer": "Define 'fn fmt(&self, f: &mut Formatter) -> Result'. Example: impl fmt::Display for MyStruct { ... }"}
{"question": "What is the 'Rust' 'derive' macro used for?", "answer": "Automatically generates implementations for traits like 'Debug', 'Clone', or 'Eq'."}
{"question": "How to use 'Rust' 'match' with 'ref mut' in a struct?", "answer": "'match struct { ref mut field => ... }' allows borrowing a mutable field."}
{"question": "What is the 'Rust' 'lifetime' parameter in function signatures?", "answer": "It specifies the scope of references. Example: 'fn print<'a>(x: &'a str) { ... }'."}
{"question": "How to use 'Rust' 'try' macro for error propagation?", "answer": "'try!' propagates errors from 'Result' types. Example: let value = some_result?;"}
{"question": "What is the 'Rust' 'Send' and 'Sync' traits?", "answer": "'Send' allows types to be moved between threads; 'Sync' allows shared references across threads."}
{"question": "How to create a 'Rust' 'channel' for communication?", "answer": "Use 'std::sync::mpsc::channel()' to create a channel. 'sender.send()' and 'receiver.recv()' for messages."}
{"question": "What is the 'Rust' 'thread' module used for?", "answer": "It provides functions to create and manage threads, like 'thread::spawn()'."}
{"question": "How to use 'Rust' 'once_cell' for lazy initialization?", "answer": "'once_cell::OnceCell' allows initializing a value once, safe for multiple accesses."}
{"question": "What is the 'Rust' 'atomic' type for?", "answer": "It provides atomic operations for shared data, ensuring thread safety without locks."}
{"question": "How to use 'Rust' 'crossbeam' for scoped threads?", "answer": "'crossbeam::scope' allows threads to borrow data from the parent scope safely."}
{"question": "What is the 'Rust' 'async' trait?", "answer": "It defines asynchronous functions and methods, enabling non-blocking I/O."}
{"question": "How to use 'Rust' 'future' combinators?", "answer": "Methods like 'map()', 'and_then()', and 'or_else()' chain asynchronous operations."}
{"question": "What is the 'Rust' 'tokio' runtime?", "answer": "It is an asynchronous runtime for building event-driven applications."}
{"question": "How to create a 'Rust' 'thread' with a closure?", "answer": "'thread::spawn(move || { ... })' creates a new thread with a closure."}
{"question": "What is the 'Rust' 'Arc' type for?", "answer": "'Arc<T>' provides shared ownership with atomic reference counting, safe for threads."}
{"question": "How to use 'Rust' 'Mutex' for thread safety?", "answer": "'Mutex<T>' ensures only one thread can access the data at a time. Use 'lock()' to acquire the guard."}
{"question": "What is the 'Rust' 'channel' for?", "answer": "'channel' allows sending and receiving data between threads, e.g., 'mpsc' for multi-producer, single-consumer."}
{"question": "How to use 'Rust' 'async' functions with 'await'?", "answer": "Define with 'async fn', then use 'await' to wait for the future to resolve."}
{"question": "What is the 'Rust' 'future' trait?", "answer": "'Future' represents a value that will be available later, used with 'async' and 'await'."}
{"question": "How to handle 'Rust' 'panic' in threads?", "answer": "Use 'thread::spawn(...).join()' to catch panics. Example: handle.join().unwrap_or_else(|e| { ... })"}
{"question": "What is the 'Rust' 'lifetime' parameter in structs?", "answer": "It specifies how long references in a struct are valid. Example: struct Data<'a> { ref: &'a i32 }"}
{"question": "How to use 'Rust' 'thread_local' variables?", "answer": "'thread_local!()' macro defines a variable that is unique to each thread."}
{"question": "What is the 'Rust' 'rayon' crate used for?", "answer": "'rayon' provides data parallelism, enabling easy parallelization of iterators."}
{"question": "How to create a 'Rust' 'thread pool'?", "answer": "Use 'rayon::ThreadPool' or 'tokio::task::spawn' for async task pools."}
{"question": "What is the 'Rust' 'once_cell' crate?", "answer": "'once_cell' provides utilities for lazy initialization, like 'OnceCell' and 'Lazy'."}
{"question": "How to use 'Rust' 'crossbeam' channels?", "answer": "'crossbeam::channel' offers channels with more flexible APIs than standard library."}
{"question": "What is the 'Rust' 'async' block?", "answer": "'async' block creates a future, e.g., async { ... }."}
{"question": "How to use 'Rust' 'future' combinators?", "answer": "Methods like 'map()' transform the result of a future. Example: future.map(|x| x * 2)"}
{"question": "What is the purpose of 'let' in Rust?", "answer": "Declares variables, e.g., 'let x = 5;'."}
{"question": "How do you declare a constant in Rust?", "answer": "Using 'const', e.g., 'const PI: f64 = 3.14;'."}
{"question": "What is the difference between 'mut' and 'const'?", "answer": "'mut' allows mutation, 'const' defines compile-time constants."}
{"question": "How to create a new thread in Rust?", "answer": "Use 'std::thread::spawn', e.g., 'let handle = thread::spawn(|| { ... });'."}
{"question": "What is a 'match' expression?", "answer": "A control flow construct that compares values against patterns."}
{"question": "How to handle panics in Rust?", "answer": "Use 'panic!' macro, but prefer 'Result' or 'Option' for error handling."}
{"question": "What does the 'Option' enum represent?", "answer": "Optional values: 'Some(T)' or 'None'."}
{"question": "How to use 'unwrap()' on an Option?", "answer": "Returns the value if 'Some', else panics. Example: 'let x = some_value.unwrap();'."}
{"question": "What is the 'Result' type used for?", "answer": "Represents success ('Ok(T)') or error ('Err(E)') outcomes."}
{"question": "How to define a struct in Rust?", "answer": "Using 'struct', e.g., 'struct Point { x: i32, y: i32 };'."}
{"question": "What is the 'main' function's signature?", "answer": "'fn main() -> () { ... }' or with arguments: 'fn main(args: Vec<String>) -> ()'."}
{"question": "How to create a vector?", "answer": "Use 'vec![1, 2, 3]' or 'Vec::new()'."}
{"question": "What is the 'pub' keyword for?", "answer": "Marks items as public, accessible from other modules."}
{"question": "How to handle errors with 'Result'?", "answer": "Use 'match' or the '?' operator to propagate errors."}
{"question": "What is 'self' in method definitions?", "answer": "Refers to the instance of the struct, e.g., 'fn method(&self)'."}
{"question": "What is the 'fn' keyword used for?", "answer": "Declares functions, e.g., 'fn add(a: i32, b: i32) -> i32 { a + b }'."}
{"question": "How to create a tuple?", "answer": "Use parentheses, e.g., 'let t = (1, \"two\");'."}
{"question": "What is the 'drop' trait?", "answer": "Allows custom cleanup when a value goes out of scope."}
{"question": "How to use 'println!' macro?", "answer": "Prints formatted text, e.g., 'println!(\"Hello {}\", name);'."}
{"question": "What is the 'as' keyword for?", "answer": "Type casting, e.g., 'let x: i32 = 5.0 as i32;'."}
{"question": "What is 'Arc' in Rust?", "answer": "Atomically reference counted smart pointer for thread-safe sharing."}
{"question": "How to share data between threads safely?", "answer": "Use 'Arc<Mutex<T>>' for shared ownership and mutual exclusion."}
{"question": "What is the 'Send' trait?", "answer": "Marks types that can be safely sent between threads."}
{"question": "What is the 'Sync' trait?", "answer": "Marks types that can be safely shared between threads."}
{"question": "How to define an enum?", "answer": "Using 'enum', e.g., 'enum Color { Red, Green, Blue };'."}
{"question": "What is a 'trait' in Rust?", "answer": "A blueprint for methods, e.g., 'trait Animal { fn speak(); }'."}
{"question": "How to implement a trait for a struct?", "answer": "Use 'impl Trait for Struct', e.g., 'impl ToString for Point { ... }'."}
{"question": "What is 'lifetime elision'?", "answer": "Rust infers lifetimes in function signatures automatically."}
{"question": "How to use 'if let'?", "answer": "Checks for a single pattern, e.g., 'if let Some(x) = value { ... }'."}
{"question": "What is 'derive' attribute?", "answer": "Automatically implements traits like 'Debug', e.g., '#[derive(Debug)]'."}
{"question": "How to create a static variable?", "answer": "Use 'static', e.g., 'static NAME: i32 = 5;'."}
{"question": "What is 'RwLock' used for?", "answer": "Allows multiple readers or one writer, for shared data access."}
{"question": "How to use 'Mutex' in threads?", "answer": "Wrap data in 'Mutex', then lock it with 'lock().unwrap()'."}
{"question": "What is 'match' arm?", "answer": "Each case in a 'match' expression, e.g., 'Color::Red => ...'."}
{"question": "How to use 'where' in generics?", "answer": "Specifies trait bounds, e.g., 'fn foo<T>(t: T) where T: Trait { ... }'."}
{"question": "What is 'async' function?", "answer": "Declares an asynchronous function, requiring 'await' for execution."}
{"question": "How to run an async function?", "answer": "Use 'tokio::runtime::Runtime::new().unwrap().block_on(main())'."}
{"question": "What is 'join' in async?", "answer": "Combines multiple futures, e.g., 'tokio::join!(f1, f2)'."}
{"question": "What is 'mpsc' in Rust?", "answer": "Multiple producer, single consumer channel for thread communication."}
{"question": "How to create a channel?", "answer": "Use 'mpsc::channel()', e.g., 'let (s, r) = mpsc::channel();'."}
{"question": "How to send data through a channel?", "answer": "Use 'sender.send(data)', e.g., 's.send(42).unwrap();'."}
{"question": "How to receive data from a channel?", "answer": "Use 'receiver.recv()', e.g., 'let x = r.recv().unwrap();'."}
{"question": "What is 'Box' in Rust?", "answer": "A smart pointer for heap allocation, e.g., 'let b = Box::new(5);'."}
{"question": "How to use 'Box' for trait objects?", "answer": "'let b: Box<dyn Trait> = Box::new(Struct);'."}
{"question": "What is 'lifetime' in Rust?", "answer": "Ensures references are valid for the correct scope."}
{"question": "How to specify a lifetime in a function?", "answer": "Use 'fn foo<'a>(x: &'a i32) -> &'a i32 { ... }'."}
{"question": "What is a 'generic' function?", "answer": "A function with type parameters, e.g., 'fn max<T: PartialOrd>(a: T, b: T) -> T'."}
{"question": "How to use 'use' to import modules?", "answer": "'use crate::module::Item;' or 'use self::module::Item;'."}
{"question": "What is 'panic!' macro?", "answer": "Causes a runtime panic, e.g., 'panic!(\"error message\");'."}
{"question": "How to handle 'None' in Option?", "answer": "Use 'match' or 'if let', e.g., 'if let Some(x) = opt { ... }'."}
{"question": "What is 'Ok' in Result?", "answer": "'Ok(T)' indicates success, e.g., 'Ok(42)'."}
{"question": "How to use 'Result' with 'expect'?", "answer": "'result.expect(\"message\")' panics with message on Err."}
{"question": "What is 'Vec' in Rust?", "answer": "A dynamic array, e.g., 'let v = vec![1, 2, 3];'."}
{"question": "How to iterate over a Vec?", "answer": "Use 'for item in &v { ... }' or 'v.iter()'."}
{"question": "What is 'impl Trait' in function return types?", "answer": "Returns a type that implements the trait, e.g., 'fn get() -> impl Iterator'."}
{"question": "How to use 'as' for type conversion?", "answer": "Converts between types, e.g., 'let x: i32 = 5.0 as i32;'."}
{"question": "What is 'pub use' for?", "answer": "Re-exports items from another module, e.g., 'pub use crate::mod::Item;'."}
{"question": "How to create a slice?", "answer": "Use 'slice[start..end]', e.g., 'let s = &arr[1..3];'."}
{"question": "What is 'str' type?", "answer": "A string slice, e.g., 'let s: &str = \"hello\";'."}
{"question": "How to convert a String to &str?", "answer": "Use 'as_str()', e.g., 'let s = \"hello\".to_string(); let t = s.as_str();'."}
{"question": "What is 'Cow' in Rust?", "answer": "Copy-on-write smart pointer, e.g., 'Cow::Borrowed(s)' or 'Cow::Owned(s.to_string())'."}
{"question": "How to use 'Cow' for efficiency?", "answer": "Avoids copying by borrowing when possible, e.g., 'fn process(s: Cow<'_, str>)'."}
{"question": "What is 'Deref' trait?", "answer": "Allows dereferencing, e.g., 'impl Deref for MyType { ... }'."}
{"question": "How to implement 'Deref'?", "answer": "Define 'deref()' method, e.g., 'fn deref(&self) -> &Self::Target'."}
{"question": "What is 'Into' trait?", "answer": "Converts from one type to another, e.g., 'fn into(self) -> T'."}
{"question": "How to use 'Into' for conversion?", "answer": "Implement 'into()' method, e.g., 'let s: String = \"hello\".into();'."}
{"question": "What is 'From' trait?", "answer": "Converts from another type, e.g., 'impl From<&str> for String'."}
{"question": "How to use 'From' for conversion?", "answer": "Implement 'from()' method, e.g., 'let s = String::from(\"hello\");'."}
{"question": "What is 'Iterator' trait?", "answer": "Provides 'next()' method for iterating, e.g., 'for item in iter { ... }'."}
{"question": "How to implement 'Iterator'?", "answer": "Define 'next()' method, e.g., 'impl Iterator for MyIter { fn next(&mut self) -> Option<Self::Item>'."}
{"question": "What is 'Option::map'?", "answer": "Transforms Some values, e.g., 'opt.map(|x| x + 1)'."}
{"question": "How to use 'Option::and_then'?", "answer": "Chains operations, e.g., 'opt.and_then(|x| Some(x + 1))'."}
{"question": "What is 'Result::map'?", "answer": "Transforms Ok values, e.g., 'res.map(|x| x * 2)'."}
{"question": "How to use 'Result::and_then'?", "answer": "Chains Result operations, e.g., 'res.and_then(|x| Ok(x + 1))'."}
{"question": "What is 'Box::new'?", "answer": "Allocates data on the heap, e.g., 'let b = Box::new(5);'."}
{"question": "How to use 'Box' for dynamic dispatch?", "answer": "'Box<dyn Trait>' allows polymorphic behavior."}
{"question": "What is 'Rc' in Rust?", "answer": "Reference counted pointer for single-threaded sharing, e.g., 'let rc = Rc::new(5);'."}
{"question": "How to clone an 'Rc'?", "answer": "Use 'rc.clone()', e.g., 'let rc2 = rc.clone();'."}
{"question": "What is 'RefCell' used for?", "answer": "Allows interior mutability, e.g., 'let c = RefCell::new(5); let mut data = c.borrow_mut();'."}
{"question": "How to use 'RefCell' in single-threaded code?", "answer": "Wrap data in 'RefCell', then use 'borrow()' or 'borrow_mut()'."}
{"question": "What is 'thread::spawn'?", "answer": "Creates a new thread, e.g., 'thread::spawn(|| { ... })'."}
{"question": "How to join a thread?", "answer": "Call 'handle.join()' to wait for completion, returns Result."}
{"question": "What is 'thread::sleep'?", "answer": "Pauses execution, e.g., 'thread::sleep(Duration::from_secs(1))'."}
{"question": "How to use 'thread::sleep'?", "answer": "Import 'std::time::Duration', then 'thread::sleep(Duration::from_secs(1))'."}
{"question": "What is 'tokio' crate?", "answer": "Asynchronous runtime for Rust, used with 'async/await'."}
{"question": "How to run async code with 'tokio'?", "answer": "Use 'tokio::runtime::Runtime::new().unwrap().block_on(main())'."}
{"question": "What is 'async/await'?", "answer": "Asynchronous programming syntax, e.g., 'async fn main() { ... }'."}
{"question": "How to use 'async/await'?", "answer": "Define 'async' functions and 'await' futures, e.g., 'let data = fetch().await;'."}
{"question": "What is the difference between let and const in Rust?", "answer": "`let` declares a variable, while `const` defines a constant. Constants require a type and are evaluated at compile time. Example: ```rust\nconst PI: f64 = 3.14;\n```"}
{"question": "How do you declare a mutable variable in Rust?", "answer": "Use `let mut` followed by the variable name. Example: ```rust\nlet mut x = 5;\nx = 6;\n```"}
{"question": "What is Rust's ownership system?", "answer": "Rust enforces unique ownership of values. When a variable is assigned, the original loses ownership. Example: ```rust\nlet s1 = String::from(\"hello\");\nlet s2 = s1;\n// s1 is no longer valid here\n```"}
{"question": "How do you create a struct in Rust?", "answer": "Use `struct` followed by the name and fields. Example: ```rust\nstruct Point { x: i32, y: i32 }\n```"}
{"question": "What is the purpose of the 'match' expression?", "answer": "It enables pattern matching. All possible cases must be covered. Example: ```rust\nmatch value {\n    1 => \"one\",\n    _ => \"other\",\n}\n```"}
{"question": "How do you handle errors in Rust?", "answer": "Use `Result` or `Option` types. Example: ```rust\nlet result: Result<i32, &str> = Ok(42);\nmatch result {\n    Ok(v) => println!(\"Value: {}\", v),\n    Err(e) => println!(\"Error: {}\", e),\n}\n```"}
{"question": "What is a Rust enum?", "answer": "An enum defines a type with multiple variants. Example: ```rust\nenum Direction { Up, Down, Left, Right }\n```"}
{"question": "How do you implement a trait for a type?", "answer": "Use `impl Trait for Type`. Example: ```rust\ntrait MyTrait {\n    fn my_method(&self);\n}\nimpl MyTrait for i32 {\n    fn my_method(&self) { println!(\"{}\", self);\n}\n}\n```"}
{"question": "What is the role of the 'self' keyword in methods?", "answer": "`self` refers to the instance of the type. `&self` is a reference, `self` consumes the value, and `&mut self` allows mutation."}
{"question": "How do you create a thread in Rust?", "answer": "Use `std::thread::spawn`. Example: ```rust\nstd::thread::spawn(|| {\n    println!(\"Hello from thread\");\n});\n```"}
{"question": "What is a slice in Rust?", "answer": "A slice is a reference to a portion of a collection. Example: ```rust\nlet s = \"hello\";\nlet slice = &s[0..2]; // \"he\"\n```"}
{"question": "How do you use the 'if let' syntax?", "answer": "It simplifies matching a single case. Example: ```rust\nif let Some(x) = value {\n    println!(\"Found: {}\", x);\n}\n```"}
{"question": "What is the 'Box' type used for?", "answer": "`Box` provides heap allocation. Example: ```rust\nlet b = Box::new(5);\n```"}
{"question": "How do you define a function in Rust?", "answer": "Use `fn` followed by the name and parameters. Example: ```rust\nfn add(a: i32, b: i32) -> i32 {\n    a + b\n}\n```"}
{"question": "What is a closure in Rust?", "answer": "A closure is an anonymous function. Example: ```rust\nlet add = |a, b| a + b;\n```"}
{"question": "How do you create a vector in Rust?", "answer": "Use `Vec::new()` or the `vec!` macro. Example: ```rust\nlet v = vec![1, 2, 3];\n```"}
{"question": "What is the 'Option' enum used for?", "answer": "It represents optional values. `Some(T)` or `None`. Example: ```rust\nlet x: Option<i32> = Some(5);\n```"}
{"question": "How do you use the 'as' keyword?", "answer": "It converts types. Example: ```rust\nlet x = 5 as f64;\n```"}
{"question": "What is the 'Result' type in Rust?", "answer": "It represents success or error. `Ok(T)` or `Err(E)`. Example: ```rust\nResult<i32, String>\n```"}
{"question": "How do you handle panics in Rust?", "answer": "Use `panic!()` macro. Example: ```rust\npanic!(\"Something went wrong\");\n```"}
{"question": "What is the 'pub' keyword used for?", "answer": "It makes items public. Example: ```rust\npub fn my_function() {}\n```"}
{"question": "How do you use the 'match' expression with enums?", "answer": "Match each variant. Example: ```rust\nmatch color {\n    Color::Red => \"red\",\n    _ => \"other\",\n}\n```"}
{"question": "What is the 'Rust' borrow checker?", "answer": "It enforces memory safety by tracking references. Prevents dangling pointers and data races."}
{"question": "How do you create a reference in Rust?", "answer": "Use `&` to create a reference. Example: ```rust\nlet x = 5;\nlet y = &x;\n```"}
{"question": "What is the 'lifetime' parameter in Rust?", "answer": "It specifies how long a reference is valid. Example: ```rust\nfn longest<'a>(s1: &'a str, s2: &'a str) -> &'a str {\n    if s1.len() > s2.len() { s1 } else { s2 }\n}\n```"}
{"question": "How do you use the 'use' keyword?", "answer": "It brings items into scope. Example: ```rust\nuse std::collections::HashMap;\n```"}
{"question": "What is the 'Arc' type in Rust?", "answer": "`Arc` is a thread-safe reference-counted pointer. Example: ```rust\nuse std::sync::Arc;\nlet a = Arc::new(5);\n```"}
{"question": "How do you create a static variable in Rust?", "answer": "Use `static` with a type. Example: ```rust\nstatic PI: f64 = 3.14;\n```"}
{"question": "What is the 'impl' block for?", "answer": "It defines methods for a type. Example: ```rust\nimpl String {\n    fn new() -> Self { ... }\n}\n```"}
{"question": "How do you use the 'for' loop in Rust?", "answer": "Iterate over ranges or collections. Example: ```rust\nfor i in 0..5 {\n    println!(\"{}\", i);\n}\n```"}
{"question": "What is the 'Rust' standard library?", "answer": "It provides core functionality like collections, I/O, and threads. Accessed via `use std::...`."}
{"question": "How do you create a tuple in Rust?", "answer": "Use parentheses with comma-separated values. Example: ```rust\nlet t = (1, \"hello\");\n```"}
{"question": "What is the 'Rust' module system?", "answer": "Organizes code into namespaces. Example: ```rust\nmod my_module {\n    pub fn my_function() {}\n}\n```"}
{"question": "How do you use the 'as' operator for type casting?", "answer": "Converts one type to another. Example: ```rust\nlet x: u8 = 255;\nlet y: u16 = x as u16;\n```"}
{"question": "What is the 'Rust' 'if' expression?", "answer": "It evaluates to a value. Example: ```rust\nlet x = if y > 0 { 1 } else { 0 };\n```"}
{"question": "How do you use the 'while' loop?", "answer": "Loops while a condition is true. Example: ```rust\nlet mut i = 0;\nwhile i < 5 {\n    println!(\"{}\", i);\n    i += 1;\n}\n```"}
{"question": "What is the 'Rust' 'for' loop with ranges?", "answer": "Iterates over a range. Example: ```rust\nfor i in 1..=5 {\n    println!(\"{}\", i);\n}\n```"}
{"question": "How do you use the 'match' expression with patterns?", "answer": "Matches values against patterns. Example: ```rust\nmatch x {\n    0 => \"zero\",\n    1 => \"one\",\n    _ => \"other\",\n}\n```"}
{"question": "What is the 'Rust' 'let' binding?", "answer": "Declares a variable. Example: ```rust\nlet x = 5;\n```"}
{"question": "How do you use the 'ref' keyword in pattern matching?", "answer": "Binds a reference. Example: ```rust\nmatch x {\n    ref y => println!(\"{}\", y),\n}\n```"}
{"question": "What is the 'Rust' 'Box' type?", "answer": "Allocates data on the heap. Example: ```rust\nlet b = Box::new(5);\n```"}
{"question": "How do you use the 'as' keyword for type conversion?", "answer": "Converts between types. Example: ```rust\nlet x = 5.5 as u8; // 5\n```"}
{"question": "What is the 'Rust' 'Result' type?", "answer": "Represents success or error. Example: ```rust\nResult<T, E>\n```"}
{"question": "How do you create a static array in Rust?", "answer": "Use `let arr = [1, 2, 3];`. Fixed size, stored on the stack."}
{"question": "What is the 'Rust' 'Option' type?", "answer": "Represents optional values. `Some(T)` or `None`. Example: ```rust\nlet x: Option<i32> = None;\n```"}
{"question": "How do you use the 'use' statement for imports?", "answer": "Brings items into scope. Example: ```rust\nuse std::collections::HashMap;\n```"}
{"question": "What is the 'Rust' 'impl' block for structs?", "answer": "Defines methods for a struct. Example: ```rust\nimpl Point {\n    fn new(x: i32, y: i32) -> Self { ... }\n}\n```"}
{"question": "How do you use the 'pub' keyword for visibility?", "answer": "Makes items public. Example: ```rust\npub struct MyStruct;\n```"}
{"question": "What is the 'Rust' 'Box' type used for?", "answer": "Heap allocation. Example: ```rust\nlet b = Box::new(5);\n```"}
{"question": "How do you handle multiple errors in Rust?", "answer": "Use `?` operator to propagate errors. Example: ```rust\nfn main() -> Result<(), Box<dyn Error>> {\n    let data = read_file()?;\n    Ok(());\n}\n```"}
{"question": "What is the 'Rust' 'Arc' type?", "answer": "Thread-safe reference counting. Example: ```rust\nuse std::sync::Arc;\nlet a = Arc::new(5);\n```"}
{"question": "How do you create a thread-safe shared variable?", "answer": "Use `Arc<Mutex<T>>`. Example: ```rust\nuse std::sync::{Arc, Mutex};\nlet data = Arc::new(Mutex::new(0));\n```"}
{"question": "What is the 'Rust' 'Mutex' type?", "answer": "Provides mutual exclusion. Example: ```rust\nuse std::sync::Mutex;\nlet m = Mutex::new(5);\n```"}
{"question": "How do you use the 'thread::spawn' function?", "answer": "Creates a new thread. Example: ```rust\nstd::thread::spawn(|| {\n    println!(\"Thread\");\n});\n```"}
{"question": "What is the 'Rust' 'Send' trait?", "answer": "Marks types safe to send between threads. Example: ```rust\nimpl Send for MyType {}\n```"}
{"question": "How do you use the 'as' keyword for type casting?", "answer": "Converts between types. Example: ```rust\nlet x: u8 = 255;\nlet y: u16 = x as u16;\n```"}
{"question": "What is the 'Rust' 'Result' type?", "answer": "Represents success or error. Example: ```rust\nResult<i32, String>\n```"}
{"question": "How do you use the 'if let' syntax for Option?", "answer": "Matches `Some` values. Example: ```rust\nif let Some(x) = value {\n    println!(\"{}\", x);\n}\n```"}
{"question": "What is the 'Rust' 'Option' enum?", "answer": "Represents optional values. `Some(T)` or `None`. Example: ```rust\nlet x: Option<i32> = Some(5);\n```"}
{"question": "How do you use the 'match' expression with enums?", "answer": "Matches each variant. Example: ```rust\nmatch color {\n    Color::Red => \"red\",\n    _ => \"other\",\n}\n```"}
{"question": "What is the 'Rust' 'pub' keyword?", "answer": "Controls visibility. Example: ```rust\npub fn my_function() {}\n```"}
{"question": "How do you use the 'use' keyword for imports?", "answer": "Brings items into scope. Example: ```rust\nuse std::vec::Vec;\n```"}
{"question": "What is the 'Rust' 'impl' block?", "answer": "Defines methods for a type. Example: ```rust\nimpl String {\n    fn new() -> Self { ... }\n}\n```"}
{"question": "How do you create a static array in Rust?", "answer": "Use `let arr = [1, 2, 3];`. Fixed size, stack-allocated."}
{"question": "What is the 'Rust' 'Box' type?", "answer": "Heap allocation. Example: ```rust\nlet b = Box::new(5);\n```"}
{"question": "How do you handle errors with the 'Result' type?", "answer": "Use `match` or `?` operator. Example: ```rust\nlet result: Result<i32, &str> = Ok(42);\nmatch result {\n    Ok(v) => println!(\"Value: {}\", v),\n    Err(e) => println!(\"Error: {}\", e),\n}\n```"}
{"question": "What is the 'Rust' 'Arc' type?", "answer": "Thread-safe reference counting. Example: ```rust\nuse std::sync::Arc;\nlet a = Arc::new(5);\n```"}
{"question": "How do you share data between threads?", "answer": "Use `Arc` with `Mutex`. Example: ```rust\nuse std::sync::{Arc, Mutex};\nlet data = Arc::new(Mutex::new(0));\n```"}
{"question": "What is the 'Rust' 'Mutex' type?", "answer": "Enforces exclusive access. Example: ```rust\nuse std::sync::Mutex;\nlet m = Mutex::new(5);\n```"}
{"question": "How do you use the 'thread::spawn' function?", "answer": "Creates a new thread. Example: ```rust\nstd::thread::spawn(|| {\n    println!(\"Thread\");\n});\n```"}
{"question": "What is the 'Rust' 'Send' trait?", "answer": "Allows types to be sent between threads. Example: ```rust\nimpl Send for MyType {}\n```"}
{"question": "How do you use the 'as' keyword for type conversion?", "answer": "Converts between types. Example: ```rust\nlet x = 5.5 as u8; // 5\n```"}
{"question": "What is the 'Rust' 'Result' type?", "answer": "Represents success or error. Example: ```rust\nResult<T, E>\n```"}
{"question": "How do you use the 'if let' syntax for Option?", "answer": "Matches `Some` values. Example: ```rust\nif let Some(x) = value {\n    println!(\"{}\", x);\n}\n```"}
{"question": "What is the 'Rust' 'Option' enum?", "answer": "Represents optional values. `Some(T)` or `None`. Example: ```rust\nlet x: Option<i32> = None;\n```"}
{"question": "How do you use the 'match' expression with enums?", "answer": "Matches each variant. Example: ```rust\nmatch color {\n    Color::Blue => \"blue\",\n    _ => \"other\",\n}\n```"}
{"question": "What is the 'Rust' 'pub' keyword?", "answer": "Exports items. Example: ```rust\npub struct MyStruct;\n```"}
{"question": "How do you use the 'use' keyword for imports?", "answer": "Brings items into scope. Example: ```rust\nuse std::collections::HashMap;\n```"}
{"question": "What is the 'Rust' 'impl' block for structs?", "answer": "Defines methods. Example: ```rust\nimpl Point {\n    fn new(x: i32, y: i32) -> Self { ... }\n}\n```"}
{"question": "How do you create a static array in Rust?", "answer": "Use `let arr = [1, 2, 3];`. Fixed size, stack-allocated."}
{"question": "What is the 'Rust' 'Box' type?", "answer": "Heap-allocated value. Example: ```rust\nlet b = Box::new(5);\n```"}
{"question": "How do you handle errors with the 'Result' type?", "answer": "Use `match` or `?`. Example: ```rust\nlet result: Result<i32, String> = Ok(42);\nmatch result {\n    Ok(v) => println!(\"Value: {}\", v),\n    Err(e) => println!(\"Error: {}\", e),\n}\n```"}
{"question": "What is the 'Rust' 'Arc' type?", "answer": "Shared ownership with reference counting. Example: ```rust\nuse std::sync::Arc;\nlet a = Arc::new(5);\n```"}
{"question": "How do you share data between threads?", "answer": "Use `Arc<Mutex<T>>`. Example: ```rust\nuse std::sync::{Arc, Mutex};\nlet data = Arc::new(Mutex::new(0));\n```"}
{"question": "What is the 'Rust' 'Mutex' type?", "answer": "Enforces exclusive access. Example: ```rust\nuse std::sync::Mutex;\nlet m = Mutex::new(5);\n```"}
{"question": "How do you create a thread in Rust?", "answer": "Use `std::thread::spawn`. Example: ```rust\nstd::thread::spawn(|| {\n    println!(\"Thread\");\n});\n```"}
{"question": "What is the 'Rust' 'Send' trait?", "answer": "Marks types safe for thread transfer. Example: ```rust\nimpl Send for MyType {}\n```"}
{"question": "How do you use the 'as' operator for type conversion?", "answer": "Converts between types. Example: ```rust\nlet x = 5.5 as u8; // 5\n```"}
{"question": "What is the 'Rust' 'Result' type?", "answer": "Represents success or error. Example: ```rust\nResult<i32, &str>\n```"}
{"question": "How do you use the 'if let' syntax for Option?", "answer": "Matches `Some` values. Example: ```rust\nif let Some(x) = value {\n    println!(\"{}\", x);\n}\n```"}
{"question": "What is the 'Rust' 'Option' enum?", "answer": "Represents optional values. `Some(T)` or `None`. Example: ```rust\nlet x: Option<i32> = Some(5);\n```"}
{"question": "How do you use the 'match' expression with enums?", "answer": "Matches variants. Example: ```rust\nmatch color {\n    Color::Green => \"green\",\n    _ => \"other\",\n}\n```"}
{"question": "What is the 'Rust' 'pub' keyword?", "answer": "Exports items. Example: ```rust\npub fn my_function() {}\n```"}
{"question": "How do you use the 'use' keyword for imports?", "answer": "Brings items into scope. Example: ```rust\nuse std::vec::Vec;\n```"}
{"question": "What is the 'Rust' 'impl' block?", "answer": "Defines methods. Example: ```rust\nimpl String {\n    fn new() -> Self { ... }\n}\n```"}
{"question": "How do you create a static array in Rust?", "answer": "Use `let arr = [1, 2, 3];`. Fixed size, stack-allocated."}
{"question": "What is the 'Rust' 'Box' type?", "answer": "Heap allocation. Example: ```rust\nlet b = Box::new(5);\n```"}
{"question": "How do you handle errors with the 'Result' type?", "answer": "Use `match` or `?`. Example: ```rust\nlet result: Result<i32, String> = Ok(42);\nmatch result {\n    Ok(v) => println!(\"Value: {}\", v),\n    Err(e) => println!(\"Error: {}\", e),\n}\n```"}
{"question": "What is the 'Rust' 'Arc' type?", "answer": "Shared ownership. Example: ```rust\nuse std::sync::Arc;\nlet a = Arc::new(5);\n```"}
{"question": "How do you share data between threads?", "answer": "Use `Arc<Mutex<T>>`. Example: ```rust\nuse std::sync::{Arc, Mutex};\nlet data = Arc::new(Mutex::new(0));\n```"}
{"question": "What is the 'Rust' 'Mutex' type?", "answer": "Exclusive access. Example: ```rust\nuse std::sync::Mutex;\nlet m = Mutex::new(5);\n```"}
{"question": "What is the difference between let and const in Rust?", "answer": "`let` declares a variable (mutable with `mut`), while `const` defines a constant. Constants must have a type annotation and are evaluated at compile time. Example: ```rust\nconst PI: f64 = 3.14;\nlet x = 5;\n```"}
{"question": "How do you declare a mutable variable in Rust?", "answer": "Use `let mut variable_name = value;`. Example: ```rust\nlet mut count = 0;\ncount += 1;\n```"}
{"question": "What are Rust's primitive data types?", "answer": "Includes `i8`, `u8`, `i16`, `u16`, `i32`, `u32`, `i64`, `u64`, `isize`, `usize`, `f32`, `f64`, `bool`, `char`, and `str`."}
{"question": "What is the purpose of the match expression?", "answer": "Matches a value against patterns and executes code based on the matching pattern. Example: ```rust\nmatch x {\n    1 => println!(\"One\"),\n    _ => println!(\"Other\"),\n}\n```"}
{"question": "How to handle panics in Rust?", "answer": "Use `panic!()` macro. Example: ```rust\npanic!(\"An error occurred\");\n```"}
{"question": "What is a Rust struct?", "answer": "A custom data type with named fields. Example: ```rust\nstruct Point { x: i32, y: i32 }\n```"}
{"question": "How to create a tuple in Rust?", "answer": "Use parentheses with comma-separated values. Example: ```rust\nlet pair = (1, \"a\");\n```"}
{"question": "What is the difference between a vector and a slice?", "answer": "A vector (`Vec<T>`) owns its data, while a slice (`&[T]`) references external data. Slices are immutable by default."}
{"question": "How to implement a trait for a struct?", "answer": "Use `impl Trait for Struct`. Example: ```rust\nimpl Display for Point {\n    fn fmt(&self, f: &mut Formatter) -> Result {\n        write!(f, \"({}, {})\", self.x, self.y)\n    }\n}\n```"}
{"question": "What is a lifetime in Rust?", "answer": "A concept to ensure references are valid for the correct scope. Lifetimes are annotated with `'a` and help the borrow checker."}
{"question": "How to use the Option enum?", "answer": "`Option<T>` represents optional values. Use `Some(T)` or `None`. Example: ```rust\nlet x: Option<i32> = Some(5);\n```"}
{"question": "What is the role of the Sync trait?", "answer": "Allows types to be safely shared between threads. Types implementing `Sync` can be accessed concurrently."}
{"question": "How to share data between threads safely?", "answer": "Use `Arc<T>` (atomic reference count) with `Mutex<T>` or `RwLock<T>`. Example: ```rust\nArc::new(Mutex::new(0))\n```"}
{"question": "What is the purpose of the Send trait?", "answer": "Allows types to be sent between threads. `Send` is automatically implemented for most types."}
{"question": "How to spawn a thread in Rust?", "answer": "Use `std::thread::spawn`. Example: ```rust\nthread::spawn(|| { /* code */ });\n```"}
{"question": "What is a closure in Rust?", "answer": "A function-like structure that can capture its environment. Syntax: ```rust|arg| expr```"}
{"question": "How to use the Result enum?", "answer": "`Result<T, E>` represents success or error. Use `Ok(T)` or `Err(E)`. Example: ```rust\nlet x: Result<i32, &str> = Ok(5);\n```"}
{"question": "What is the difference between `&` and `Box<T>`?", "answer": "`&` is a reference, while `Box<T>` is a heap-allocated pointer. `Box` owns the data, `&` borrows it."}
{"question": "How to create a channel in Rust?", "answer": "Use `std::sync::mpsc::channel()`. Example: ```rust\nlet (tx, rx) = mpsc::channel();\n```"}
{"question": "What is the borrow checker in Rust?", "answer": "Enforces ownership and borrowing rules at compile time to prevent data races and dangling references."}
{"question": "How to handle errors with `?` operator?", "answer": "Propagates errors from functions that return `Result` or `Option`. Example: ```rust\nfn main() -> Result<()> {\n    let data = read_file()?;\n    Ok(())\n}\n```"}
{"question": "How to use pattern matching with `match`?", "answer": "Matches values against patterns. Example: ```rust\nmatch value {\n    0 => \"zero\",\n    1 => \"one\",\n    _ => \"other\",\n}\n```"}
{"question": "What is the `use` keyword for?", "answer": "Brings items into scope. Example: ```rust\nuse std::collections::HashMap;\n```"}
{"question": "How to create an array in Rust?", "answer": "Use square brackets with fixed size. Example: ```rust\nlet arr = [1, 2, 3];\n```"}
{"question": "What is the `as` keyword used for?", "answer": "Converts between types. Example: ```rust\nlet x: i32 = 5.0 as i32;\n```"}
{"question": "How to define a function in Rust?", "answer": "Use `fn function_name(parameters) -> return_type { ... }`. Example: ```rust\nfn add(a: i32, b: i32) -> i32 { a + b }\n```"}
{"question": "What is the `self` keyword in Rust?", "answer": "Refers to the current instance in method definitions. Example: ```rust\nimpl MyStruct {\n    fn new() -> Self { Self { ... } }\n}\n```"}
{"question": "How to use the `if let` construct?", "answer": "Matches a single pattern. Example: ```rust\nif let Some(x) = value { /* handle Some */ }\n```"}
{"question": "What is the `while let` loop?", "answer": "Continues looping while a pattern matches. Example: ```rust\nwhile let Some(x) = rx.recv() { /* process x */ }\n```"}
{"question": "How to use the `?` operator in async functions?", "answer": "Propagates errors from `Result` or `Option`. Example: ```rust\nlet data = async_function()?;\n```"}
{"question": "What is the `async` keyword for?", "answer": "Declares an asynchronous function. Example: ```rust\nasync fn fetch_data() -> Result<String> { ... }\n```"}
{"question": "How to await a future in Rust?", "answer": "Use `await!` macro. Example: ```rust\nlet result = await!(async_task);\n```"}
{"question": "What is the `tokio` runtime?", "answer": "A runtime for asynchronous programs. Example: ```rust\n#[tokio::main]\nasync fn main() { ... }\n```"}
{"question": "How to use `Arc` in Rust?", "answer": "Provides shared ownership with atomic reference counting. Example: ```rust\nlet data = Arc::new(5);\n```"}
{"question": "What is the `RwLock` type?", "answer": "Allows multiple readers or one writer. Example: ```rust\nlet data = RwLock::new(0);\n```"}
{"question": "How to use `RefCell` for interior mutability?", "answer": "`RefCell` enables runtime borrowing checks. Example: ```rust\nlet data = RefCell::new(0);\n```"}
{"question": "What is the `Box` type?", "answer": "A smart pointer for heap-allocated data. Example: ```rust\nlet x = Box::new(5);\n```"}
{"question": "How to use `Cow` (Copy on Write)?", "answer": "Efficiently handles owned or borrowed data. Example: ```rust\nlet s: Cow<str> = Cow::Borrowed(\"hello\");\n```"}
{"question": "What is the `PhantomData` type?", "answer": "A marker type for generic parameters. Example: ```rust\nstruct MyStruct<T> { data: Box<T>, _marker: PhantomData<T> }\n```"}
{"question": "How to use `#[derive(Clone)]`?", "answer": "Automatically implements the `Clone` trait. Example: ```rust\n#[derive(Clone)]\nstruct Point { x: i32, y: i32 }\n```"}
{"question": "What is the `Sized` trait?", "answer": "Indicates a type's size is known at compile time. Used in trait bounds. Example: ```rust\ntrait MyTrait where Self: Sized { ... }\n```"}
{"question": "How to use the `?` operator with `Result`?", "answer": "Short-circuits on `Err`. Example: ```rust\nfn read_file() -> Result<String> { Ok(std::fs::read_to_string(\"file\")?) }\n```"}
{"question": "What is the `as_ref()` method?", "answer": "Converts a `Box<T>` to `&T`. Example: ```rust\nlet x = Box::new(5);\nlet y: &i32 = x.as_ref();\n```"}
{"question": "How to use `match` with enums?", "answer": "Matches variants. Example: ```rust\nenum Color { Red, Green, Blue }\nmatch color { Color::Red => ... }\n```"}
{"question": "What is the `Option::unwrap()` method?", "answer": "Returns the value inside `Some`, panics on `None`. Example: ```rust\nlet x = Some(5).unwrap();\n```"}
{"question": "How to use `Option::map()`?", "answer": "Transforms the value inside `Some`. Example: ```rust\nlet x = Some(5).map(|n| n * 2);\n```"}
{"question": "What is the `Iterator` trait?", "answer": "Provides methods like `map`, `filter`, and `collect`. Example: ```rust\nlet nums = vec![1,2,3];\nlet squared: Vec<_> = nums.iter().map(|x| x*x).collect();\n```"}
{"question": "How to use `RwLockWriteGuard`?", "answer": "Provides exclusive access to data. Example: ```rust\nlet mut data = lock.write();\ndata.value = 5;\n```"}
{"question": "What is the `Send` trait?", "answer": "Marks types that can be safely sent to another thread. Automatically implemented for most types."}
{"question": "How to use `thread::join()`?", "answer": "Waits for a thread to finish. Example: ```rust\nthread::spawn(|| { ... }).join().unwrap();\n```"}
{"question": "What is the `Arc::clone()` method?", "answer": "Increments the reference count. Example: ```rust\nlet arc = Arc::new(5);\nlet arc2 = arc.clone();\n```"}
{"question": "How to use `MutexGuard`?", "answer": "Provides exclusive access to data. Example: ```rust\nlet mut data = lock.lock().unwrap();\ndata.value = 5;\n```"}
{"question": "What is the `async fn` syntax?", "answer": "Defines an asynchronous function. Example: ```rust\nasync fn fetch() -> String { ... }\n```"}
{"question": "How to use `tokio::spawn`?", "answer": "Spawns an async task. Example: ```rust\ntokio::spawn(async { ... });\n```"}
{"question": "What is the `Future` trait?", "answer": "Represents a value that may become available later. Implemented by async functions."}
{"question": "How to use `tokio::time::sleep`?", "answer": "Suspends execution for a duration. Example: ```rust\tokio::time::sleep(Duration::from_secs(1)).await;\n```"}
{"question": "What is the `channel` function in `std::sync::mpsc`?", "answer": "Creates a channel for thread communication. Example: ```rust\nlet (tx, rx) = mpsc::channel();\n```"}
{"question": "How to use `thread::available_parallelism`?", "answer": "Returns the number of logical cores. Example: ```rust\nlet cores = thread::available_parallelism().unwrap();\n```"}
{"question": "What is the `thread_local!` macro?", "answer": "Declares a thread-local variable. Example: ```rust\nthread_local! { static X: RefCell<i32> = RefCell::new(0); }\n```"}
{"question": "How to use `OnceLock`?", "answer": "A lazy initializer that can be set once. Example: ```rust\nstatic INIT: OnceLock<i32> = OnceLock::new();\n```"}
{"question": "What is the `crossbeam` crate used for?", "answer": "Provides concurrency utilities like channels and scoped threads. Example: ```rust\ncrossbeam::scope(|scope| { ... });\n```"}
{"question": "How to use `crossbeam::channel`?", "answer": "Provides crossbeam channels for thread communication. Example: ```rust\nlet (tx, rx) = crossbeam::channel::unbounded();\n```"}
{"question": "What is the `std::sync::mpsc` module?", "answer": "Provides multi-producer, single-consumer channels. Example: ```rust\nlet (tx, rx) = mpsc::channel();\n```"}
{"question": "How to use `std::sync::atomic`?", "answer": "Provides atomic types like `AtomicUsize`. Example: ```rust\nlet x = AtomicUsize::new(0);\n```"}
{"question": "What is the `std::cell::Once` type?", "answer": "A cell that can be set once. Example: ```rust\nlet once = Once::new();\nonce.call_once(|| { /* init */ });\n```"}
{"question": "How to use `std::thread::scope`?", "answer": "Creates a scoped thread. Example: ```rust\nthread::scope(|scope| { scope.spawn(|| { ... }); });\n```"}
{"question": "What is the `std::sync::Barrier`?", "answer": "Synchronizes multiple threads. Example: ```rust\nlet barrier = Barrier::new(3);\nbarrier.wait();\n```"}
{"question": "How to use `std::sync::Condvar`?", "answer": "Waits for a condition. Example: ```rust\nlet (lock, cvar) = Condvar::new();\nlet _ = lock.lock();\ncvar.wait(lock).unwrap();\n```"}
{"question": "What is the `std::sync::Mutex`?", "answer": "A mutual exclusion lock. Example: ```rust\nlet lock = Mutex::new(0);\nlet mut data = lock.lock().unwrap();\n```"}
{"question": "How to use `std::sync::RwLock`?", "answer": "Allows shared or exclusive access. Example: ```rust\nlet lock = RwLock::new(0);\nlet data = lock.read().unwrap();\n```"}
{"question": "What is the `std::sync::Once` type?", "answer": "Ensures a block is executed once. Example: ```rust\nstatic INIT: Once = Once::new();\nINIT.call_once(|| { /* init */ });\n```"}
{"question": "How to use `std::sync::atomic::AtomicBool`?", "answer": "Provides atomic boolean operations. Example: ```rust\nlet flag = AtomicBool::new(false);\nflag.store(true, Ordering::SeqCst);\n```"}
{"question": "What is the `std::sync::mpsc::Sender`?", "answer": "Sends values to a channel. Example: ```rust\ntx.send(5).unwrap();\n```"}
{"question": "How to use `std::sync::mpsc::Receiver`?", "answer": "Receives values from a channel. Example: ```rust\nlet value = rx.recv().unwrap();\n```"}
{"question": "What is the `std::sync::mpsc::channel` function?", "answer": "Creates a channel. Example: ```rust\nlet (tx, rx) = mpsc::channel();\n```"}
{"question": "How to use `std::sync::mpsc::try_recv`?", "answer": "Attempts to receive without blocking. Example: ```rust\nlet value = rx.try_recv();\n```"}
{"question": "What is the `std::sync::mpsc::Sender::send` method?", "answer": "Sends a value to the channel. Example: ```rust\ntx.send(5).unwrap();\n```"}
{"question": "How to use `std::sync::mpsc::Receiver::recv`?", "answer": "Blocks until a value is received. Example: ```rust\nlet value = rx.recv().unwrap();\n```"}
{"question": "What is the `std::sync::OnceLock` type?", "answer": "A thread-safe once initializer. Example: ```rust\nstatic INIT: OnceLock<i32> = OnceLock::new();\n```"}
{"question": "How to use `std::sync::OnceLock::get_or_init`?", "answer": "Returns the value or initializes it. Example: ```rust\nlet value = INIT.get_or_init(|| 42);\n```"}
{"question": "What is the `std::sync::MutexGuard`?", "answer": "A guard for `Mutex` that locks the data. Example: ```rust\nlet mut data = lock.lock().unwrap();\n```"}
{"question": "How to use `std::sync::Mutex::new`?", "answer": "Creates a new mutex. Example: ```rust\nlet lock = Mutex::new(0);\n```"}
{"question": "What is the `std::sync::RwLock::new`?", "answer": "Creates a new read-write lock. Example: ```rust\nlet lock = RwLock::new(0);\n```"}
{"question": "How to use `std::sync::RwLockWriteGuard`?", "answer": "Provides exclusive access. Example: ```rust\nlet mut data = lock.write().unwrap();\n```"}
{"question": "What is the `std::sync::Once::new`?", "answer": "Creates a new once. Example: ```rust\nstatic INIT: Once = Once::new();\n```"}
{"question": "How to use `std::sync::Once::call_once`?", "answer": "Executes a closure once. Example: ```rust\nINIT.call_once(|| { /* init */ });\n```"}
{"question": "What is the `std::sync::Barrier::new`?", "answer": "Creates a barrier for thread synchronization. Example: ```rust\nlet barrier = Barrier::new(3);\n```"}
{"question": "How to use `std::sync::Barrier::wait`?", "answer": "Blocks until all threads reach the barrier. Example: ```rust\nbarrier.wait();\n```"}
{"question": "What is the `std::sync::Condvar::new`?", "answer": "Creates a condition variable. Example: ```rust\nlet (lock, cvar) = Condvar::new();\n```"}
{"question": "How to use `std::sync::Condvar::wait`?", "answer": "Waits for a condition. Example: ```rust\ncvar.wait(lock).unwrap();\n```"}
{"question": "What is the `std::sync::Condvar::notify_one`?", "answer": "Wakes one waiting thread. Example: ```rust\ncvar.notify_one();\n```"}
{"question": "How to use `std::sync::Condvar::notify_all`?", "answer": "Wakes all waiting threads. Example: ```rust\ncvar.notify_all();\n```"}
{"question": "What is the `std::sync::atomic::Ordering` enum?", "answer": "Specifies memory ordering for atomic operations. Values: `Relaxed`, `SeqCst`, `Acquire`, `Release`, `AcqRel`, `SeqCst`."}
{"question": "How to use `std::sync::atomic::AtomicUsize::new`?", "answer": "Creates a new atomic usize. Example: ```rust\nlet x = AtomicUsize::new(0);\n```"}
{"question": "What is the `std::sync::atomic::AtomicUsize::fetch_add`?", "answer": "Atomically adds a value. Example: ```rust\nx.fetch_add(1, Ordering::SeqCst);\n```"}
{"question": "How to use `std::sync::atomic::AtomicUsize::load`?", "answer": "Loads the value. Example: ```rust\nlet value = x.load(Ordering::SeqCst);\n```"}
{"question": "What is the syntax for declaring a variable in Rust?", "answer": "let x = 5;\n```rust\nlet x = 5;\n```"}
{"question": "How to declare a mutable variable in Rust?", "answer": "let mut x = 5;\n```rust\nlet mut x = 5;\n```"}
{"question": "What is the difference between `let` and `const`?", "answer": "`let` defines a variable, `const` defines a compile-time constant.\n```rust\nconst MAX: i32 = 100;\n```"}
{"question": "What are the basic data types in Rust?", "answer": "i32, u32, f64, bool, char, etc.\n```rust\nlet x: i32 = 5;\n```"}
{"question": "How to define a function in Rust?", "answer": "fn function_name(parameters) -> return_type { body }\n```rust\nfn add(a: i32, b: i32) -> i32 { a + b }\n```"}
{"question": "What is the purpose of `&` in function parameters?", "answer": "It denotes a reference, allowing borrowing without ownership transfer.\n```rust\nfn print_value(x: &i32) { println!(\"{}\", x); }\n```"}
{"question": "How to create a struct in Rust?", "answer": "struct StructName { field: Type }\n```rust\nstruct Point { x: i32, y: i32 }\n```"}
{"question": "What is the difference between struct and enum?", "answer": "Structs group data, enums represent a value that can be one of several variants."}
{"question": "How to use pattern matching in Rust?", "answer": "With `match` expression to compare values against patterns.\n```rust\nmatch value {\n    Pattern => action,\n    _ => default,\n}\n```"}
{"question": "What is the `Option` type used for?", "answer": "Represents optional values (Some or None).\n```rust\nlet x: Option<i32> = Some(5);\n```"}
{"question": "How to handle errors in Rust?", "answer": "Use `Result` type and `?` operator for propagation.\n```rust\nfn divide(a: i32, b: i32) -> Result<i32, String> {\n    if b == 0 { Err(\"division by zero\".to_string()) }\n    else { Ok(a / b) }\n}\n```"}
{"question": "What is a closure in Rust?", "answer": "Anonymous function that can capture its environment.\n```rust\nlet add = |a: i32, b: i32| a + b;\n```"}
{"question": "How to define a trait in Rust?", "answer": "trait TraitName { fn method(); }\n```rust\ntrait MyTrait {\n    fn my_method(&self);\n}\n```"}
{"question": "What is the `use` keyword for?", "answer": "Brings modules into scope.\n```rust\nuse std::collections::HashMap;\n```"}
{"question": "How to create a new thread in Rust?", "answer": "std::thread::spawn(|| { ... });\n```rust\nstd::thread::spawn(|| {\n    println!(\"Hello from thread!\");\n});\n```"}
{"question": "What is the `Arc` type used for?", "answer": "Thread-safe shared ownership with reference counting.\n```rust\nuse std::sync::Arc;\n```"}
{"question": "How to use `match` with `Option`?", "answer": "Match on Some and None variants.\n```rust\nmatch opt {\n    Some(x) => println!(\"Found: {}\", x),\n    None => println!(\"Not found\"),\n}\n```"}
{"question": "What is the `Rc` type used for?", "answer": "Single-threaded shared ownership with reference counting.\n```rust\nuse std::rc::Rc;\n```"}
{"question": "How to implement a trait for a type?", "answer": "impl Trait for Type { ... }\n```rust\nimpl MyTrait for MyStruct {\n    fn my_method(&self) { /* implementation */ }\n}\n```"}
{"question": "What is the `self` keyword in methods?", "answer": "Refers to the instance of the struct.\n```rust\nfn method(&self) { /* uses self */ }\n```"}
{"question": "How to create a vector in Rust?", "answer": "vec![elements]\n```rust\nlet v = vec![1, 2, 3];\n```"}
{"question": "What is the difference between `Vec` and `array`?", "answer": "`Vec` is dynamic, `array` has fixed size.\n```rust\nlet arr = [1, 2, 3];\n```"}
{"question": "How to iterate over a vector?", "answer": "for item in &vec { ... }\n```rust\nfor item in &vec { println!(\"{}\", item); }\n```"}
{"question": "What is the `iter()` method used for?", "answer": "Creates an iterator over elements.\n```rust\nfor item in vec.iter() { /* ... */ }\n```"}
{"question": "How to use `if let` for pattern matching?", "answer": "Check for a specific pattern and ignore others.\n```rust\nif let Some(x) = value { /* handle Some */ }\n```"}
{"question": "What is the `while let` loop used for?", "answer": "Loop while a pattern matches.\n```rust\nwhile let Some(x) = queue.pop() { /* process x */ }\n```"}
{"question": "How to define a custom error type?", "answer": "Use `enum` with `#[derive(Debug)]`.\n```rust\n#[derive(Debug)]\nenum Error { InvalidInput, NotFound }\n```"}
{"question": "What is the `?` operator in Rust?", "answer": "Propagates errors in functions returning `Result`.\n```rust\nfn read_file() -> Result<String, std::io::Error> {\n    let content = std::fs::read_to_string(\"file.txt\")?;\n    Ok(content)\n}\n```"}
{"question": "How to use `Box` for heap allocation?", "answer": "Box::new(value)\n```rust\nlet b = Box::new(5);\n```"}
{"question": "What is the `drop` trait used for?", "answer": "Custom cleanup behavior for types.\n```rust\nimpl Drop for MyStruct {\n    fn drop(&mut self) { /* cleanup */ }\n}\n```"}
{"question": "How to create a tuple in Rust?", "answer": "(value1, value2, ...)\n```rust\nlet t = (1, \"text\");\n```"}
{"question": "What is the `match` expression used for?", "answer": "Compare a value against patterns.\n```rust\nmatch x {\n    1 => \"one\",\n    _ => \"other\",\n}\n```"}
{"question": "How to use `Result` for error handling?", "answer": "`Ok(value)` or `Err(error)`.\n```rust\nlet result: Result<i32, &str> = Ok(42);\n```"}
{"question": "What is the `pub` keyword for?", "answer": "Makes items public.\n```rust\npub fn public_function() { /* ... */ }\n```"}
{"question": "How to use `const` in Rust?", "answer": "Define compile-time constants.\n```rust\nconst PI: f64 = 3.14;\n```"}
{"question": "What is the `static` keyword used for?", "answer": "Declares static variables with fixed memory address.\n```rust\nstatic COUNT: i32 = 0;\n```"}
{"question": "How to use `unsafe` blocks?", "answer": "Bypass Rust's safety checks.\n```rust\nunsafe {\n    let x = *ptr;\n}\n```"}
{"question": "What is the `Send` trait?", "answer": "Indicates a type can be safely sent between threads.\n```rust\nimpl Send for MyType {}\n```"}
{"question": "How to use `Arc` with a mutex?", "answer": "Arc<Mutex<T>> for thread-safe shared mutable state.\n```rust\nuse std::sync::{Arc, Mutex};\n```"}
{"question": "What is the `RwLock` type?", "answer": "Allows multiple readers or one writer.\n```rust\nuse std::sync::RwLock;\n```"}
{"question": "How to create a channel in Rust?", "answer": "std::sync::mpsc::channel()\n```rust\nlet (sender, receiver) = std::sync::mpsc::channel();\n```"}
{"question": "What is the `join` method for threads?", "answer": "Waits for a thread to finish.\n```rust\nthread.join().unwrap();\n```"}
{"question": "How to use `thread::spawn` with a closure?", "answer": "thread::spawn(move || { ... });\n```rust\nstd::thread::spawn(move || {\n    println!(\"Hello\");\n});\n```"}
{"question": "What is the `lifetime` annotation used for?", "answer": "Specifies how long references are valid.\n```rust\nfn longest<'a>(s1: &'a str, s2: &'a str) -> &'a str { /* ... */ }\n```"}
{"question": "How to implement a trait for a struct?", "answer": "impl Trait for Struct { ... }\n```rust\nimpl MyTrait for Point {\n    fn my_method(&self) { /* ... */ }\n}\n```"}
{"question": "What is the `derive` attribute for?", "answer": "Automatically implements traits like Debug, Clone.\n```rust\n#[derive(Debug)]\nstruct MyStruct;\n```"}
{"question": "How to use `Option::unwrap()`?", "answer": "Returns the value or panics if None.\n```rust\nlet x = Some(5).unwrap();\n```"}
{"question": "What is the `Result::ok()` method?", "answer": "Converts Result to Option.\n```rust\nlet opt = Ok(42).ok();\n```"}
{"question": "How to use `match` with `Result`?", "answer": "Match on Ok and Err variants.\n```rust\nmatch result {\n    Ok(x) => println!(\"Success: {}\", x),\n    Err(e) => println!(\"Error: {}\", e),\n}\n```"}
{"question": "What is the `async` keyword used for?", "answer": "Defines an asynchronous function.\n```rust\nasync fn async_function() { /* ... */ }\n```"}
{"question": "How to create an asynchronous function?", "answer": "Use `async fn`.\n```rust\nasync fn fetch_data() -> String { /* ... */ }\n```"}
{"question": "What is the `await` keyword in Rust?", "answer": "Waits for an async task to complete.\n```rust\nlet data = fetch_data().await;\n```"}
{"question": "How to use `tokio` for concurrency?", "answer": "Use `tokio::spawn` for async tasks.\n```rust\nuse tokio::spawn;\n```"}
{"question": "What is the `Mutex` type used for?", "answer": "Thread-safe shared mutable access.\n```rust\nuse std::sync::Mutex;\n```"}
{"question": "How to share data between threads?", "answer": "Use `Arc` for shared ownership and `Mutex` for mutability.\n```rust\nArc<Mutex<i32>>\n```"}
{"question": "What is the `Send` trait?", "answer": "Marks types that can be safely sent between threads.\n```rust\nimpl Send for MyType {}\n```"}
{"question": "How to handle race conditions?", "answer": "Use synchronization primitives like Mutex.\n```rust\nlet data = Mutex::new(0);\n```"}
{"question": "What is the `RwLock` type?", "answer": "Allows multiple readers or exclusive writers.\n```rust\nuse std::sync::RwLock;\n```"}
{"question": "How to use `RwLock` for reading?", "answer": "`read()` method for shared access.\n```rust\nlet data = rwlock.read().unwrap();\n```"}
{"question": "What is the `channel` type in Rust?", "answer": "For message passing between threads.\n```rust\nuse std::sync::mpsc::channel;\n```"}
{"question": "How to send data through a channel?", "answer": "Use `sender.send(data)`.\n```rust\nsender.send(42).unwrap();\n```"}
{"question": "What is the `join_handle` in threads?", "answer": "Returns a handle to wait for thread completion.\n```rust\nlet handle = std::thread::spawn(|| {});\nhandle.join().unwrap();\n```"}
{"question": "How to use `if let` with `Result`?", "answer": "Check for Ok and ignore Err.\n```rust\nif let Ok(x) = result { /* handle Ok */ }\n```"}
{"question": "What is the `while let` loop for?", "answer": "Loop while a pattern matches.\n```rust\nwhile let Some(x) = receiver.recv() { /* process x */ }\n```"}
{"question": "How to define a custom trait?", "answer": "trait TraitName { fn method(); }\n```rust\ntrait MyTrait {\n    fn my_method(&self);\n}\n```"}
{"question": "What is the `self` parameter in methods?", "answer": "Refers to the instance of the struct.\n```rust\nfn method(&self) { /* ... */ }\n```"}
{"question": "How to use `Box` for dynamic dispatch?", "answer": "`Box<dyn Trait>` for trait objects.\n```rust\nlet obj: Box<dyn MyTrait> = Box::new(MyStruct);\n```"}
{"question": "What is the `PhantomData` type used for?", "answer": "Indicates a type has no data but needs a lifetime.\n```rust\nuse std::marker::PhantomData;\n```"}
{"question": "How to implement `Drop` for a struct?", "answer": "Define `drop` method.\n```rust\nimpl Drop for MyStruct {\n    fn drop(&mut self) { /* cleanup */ }\n}\n```"}
{"question": "What is the `lifetime` parameter in functions?", "answer": "Specifies reference validity.\n```rust\nfn example<'a>(x: &'a str) -> &'a str { x }\n```"}
{"question": "How to use `Rc` for shared ownership?", "answer": "`Rc<T>` for reference-counted pointers.\n```rust\nlet rc = Rc::new(5);\n```"}
{"question": "What is the `RefCell` type used for?", "answer": "Runtime borrow checking for single-threaded mutable access.\n```rust\nuse std::cell::RefCell;\n```"}
{"question": "How to use `RefCell` with `borrow_mut()`?", "answer": "`borrow_mut()` for exclusive mutable access.\n```rust\nlet mut data = refcell.borrow_mut();\n```"}
{"question": "What is the `once_cell` crate used for?", "answer": "Lazy initialization of static variables.\n```rust\nuse once_cell::sync::Lazy;\n```"}
{"question": "How to use `lazy_static` for static variables?", "answer": "`lazy_static!` macro for lazy initialization.\n```rust\nlazy_static! {\n    static ref MY_STATIC: i32 = 42;\n}\n```"}
{"question": "What is the `crossbeam` crate used for?", "answer": "Concurrent data structures and utilities.\n```rust\nuse crossbeam::channel::unbounded;\n```"}
{"question": "How to use `crossbeam::scope` for scoped threads?", "answer": "`crossbeam::scope` for thread-local data.\n```rust\ncrossbeam::scope(|scope| {\n    scope.spawn(|| { /* ... */ });\n});\n```"}
{"question": "What is the `thread_local!` macro?", "answer": "Declares thread-local static variables.\n```rust\nthread_local! {\n    static MY_TLS: RefCell<i32> = RefCell::new(0);\n}\n```"}
{"question": "How to use `std::sync::mpsc` channels?", "answer": "`mpsc::channel()` for multi-producer, single-consumer.\n```rust\nlet (tx, rx) = std::sync::mpsc::channel();\n```"}
{"question": "What is the `std::sync::mpsc::Sender` type?", "answer": "Sends messages to a channel.\n```rust\nuse std::sync::mpsc::Sender;\n```"}
{"question": "How to use `std::sync::mpsc::Receiver`?", "answer": "Receives messages from a channel.\n```rust\nuse std::sync::mpsc::Receiver;\n```"}
{"question": "What is the `std::sync::Mutex` type?", "answer": "Enforces exclusive access to shared data.\n```rust\nuse std::sync::Mutex;\n```"}
{"question": "How to lock a Mutex?", "answer": "`lock()` method returns a guard.\n```rust\nlet data = mutex.lock().unwrap();\n```"}
{"question": "What is the `std::sync::OnceLock` type?", "answer": "Thread-safe once initialization.\n```rust\nuse std::sync::OnceLock;\n```"}
{"question": "How to use `OnceLock::get()`?", "answer": "Retrieve the value after initialization.\n```rust\nlet value = once_lock.get().unwrap();\n```"}
{"question": "What is the `std::sync::Barrier` used for?", "answer": "Synchronizes multiple threads.\n```rust\nuse std::sync::Barrier;\n```"}
{"question": "How to use `Barrier::wait()`?", "answer": "Blocks until all threads reach the barrier.\n```rust\nbarrier.wait();\n```"}
{"question": "What is the `std::sync::Condvar` type?", "answer": "For waiting on conditions in threads.\n```rust\nuse std::sync::Condvar;\n```"}
{"question": "How to use `Condvar::wait()`?", "answer": "Waits until a condition is met.\n```rust\nlet (lock, cvar) = Condvar::new();\nlet _guard = lock.lock();\ncvar.wait(_guard).unwrap();\n```"}
{"question": "What is the `std::future::Future` trait?", "answer": "Represents asynchronous computations.\n```rust\nuse std::future::Future;\n```"}
{"question": "How to use `async`/`await` in functions?", "answer": "`async` defines the function, `await` waits for completion.\n```rust\nasync fn example() {\n    let result = fetch().await;\n}\n```"}
{"question": "What is the `tokio::task::spawn` function?", "answer": "Spawns an asynchronous task.\n```rust\ntokio::task::spawn(async { /* ... */ });\n```"}
{"question": "How to use `tokio::join` for multiple tasks?", "answer": "`tokio::join!(task1, task2)` to await multiple.\n```rust\ntokio::join!(task1, task2);\n```"}
{"question": "What is the `futures` crate used for?", "answer": "Provides asynchronous programming utilities.\n```rust\nuse futures::executor::block_on;\n```"}
{"question": "How to use `futures::executor::block_on`?", "answer": "Runs an async function to completion.\n```rust\nfutures::executor::block_on(async { /* ... */ });\n```"}
{"question": "What is the `std::pin::Pin` type?", "answer": "Ensures a type is not moved while referenced.\n```rust\nuse std::pin::Pin;\n```"}
{"question": "How to use `Pin` with `Box`?", "answer": "`Pin<Box<T>>` for pinned allocations.\n```rust\nlet pinned = Pin::new(Box::new(5));\n```"}
{"question": "What is the difference between 'let' and 'const' in Rust?", "answer": "'let' declares a variable (mutable by default), while 'const' defines a compile-time constant. Constants require type annotations and are immutable by default."}
{"question": "How do you declare a mutable variable in Rust?", "answer": "Use 'let mut variable = value;' to declare a mutable variable."}
{"question": "What is the default data type for integer literals in Rust?", "answer": "The default is 'i32' for signed integers and 'u32' for unsigned integers on 32-bit systems, 'i64'/'u64' on 64-bit."}
{"question": "Explain the concept of ownership in Rust.", "answer": "Ownership governs memory management. Each value has a single owner, and when the owner goes out of scope, the value is dropped. Moves transfer ownership, while borrows allow temporary access."}
{"question": "What is the purpose of the 'mut' keyword?", "answer": "It makes a variable's value mutable, allowing reassignment after initialization."}
{"question": "How does Rust handle string concatenation?", "answer": "Use the 'format!' macro or the '+' operator with 'String' types. For example: let s = format!(\"{} {}\", \"hello\", \"world\");"}
{"question": "What is a slice in Rust?", "answer": "A slice is a reference to a portion of a collection, like a string or array. Example: let s = &arr[1..3];"}
{"question": "How do you create a tuple with three elements?", "answer": "Use parentheses: let t = (1, \"a\", true);"}
{"question": "What is the difference between an array and a vector?", "answer": "Arrays have fixed size and stack allocation; vectors are dynamic and heap-allocated. Example: let arr = [1,2,3]; let vec = vec![1,2,3];"}
{"question": "How do you define a function in Rust?", "answer": "Use 'fn function_name(parameters) -> return_type { ... }'. Example: fn add(a: i32, b: i32) -> i32 { a + b }"}
{"question": "What is the 'match' expression used for?", "answer": "It matches a value against patterns and executes code based on the matching pattern."}
{"question": "How do you handle errors in Rust using 'Result'?", "answer": "Use 'Ok' for success and 'Err' for failure. Example: let result: Result<i32, &str> = Ok(42);"}
{"question": "What is the 'Option' enum used for?", "answer": "It represents optional values: 'Some(value)' or 'None'."}
{"question": "How do you use 'if let' for pattern matching?", "answer": "'if let' checks for a specific pattern and ignores others. Example: if let Some(x) = value { ... }"}
{"question": "What is the 'as' keyword used for in Rust?", "answer": "It converts types explicitly. Example: let x: u8 = 42i32 as u8;"}
{"question": "How do you create a struct with named fields?", "answer": "Use struct Syntax: struct Point { x: i32, y: i32 };"}
{"question": "What is the 'self' keyword in methods?", "answer": "It refers to the instance of the struct. Example: fn greet(&self) { ... }"}
{"question": "How do you implement a trait for a custom type?", "answer": "Use 'impl Trait for Type { ... }'. Example: impl ToString for MyType { ... }"}
{"question": "What is a closure in Rust?", "answer": "A closure is an anonymous function. Example: let add = |a, b| a + b;"}
{"question": "How do you use 'for' loops in Rust?", "answer": "Use 'for item in collection { ... }'. Example: for i in 0..5 { println!(\"{}\", i); }"}
{"question": "What is the 'use' keyword used for?", "answer": "It brings modules or items into scope. Example: use std::collections::HashMap;"}
{"question": "How do you create a module in Rust?", "answer": "Use 'mod module_name;' or 'mod module_name { ... }' to define a module."}
{"question": "What is the 'pub' keyword used for?", "answer": "It makes items public, allowing access from other modules."}
{"question": "How do you handle panics in Rust?", "answer": "Use 'panic!' to trigger a panic. Handle with 'catch_unwind' or 'assert!'. Example: panic!(\"error\");"}
{"question": "What is the 'Box' type used for?", "answer": "It allocates data on the heap. Example: let b = Box::new(5);"}
{"question": "How do you use 'Rc' for reference counting?", "answer": "Use 'Rc::new()' to create a reference-counted pointer. Example: let rc = Rc::new(42);"}
{"question": "What is the 'Arc' type used for?", "answer": "'Arc' provides thread-safe reference counting. Example: let arc = Arc::new(42);"}
{"question": "How do you define an enum in Rust?", "answer": "Use 'enum EnumName { Variant1, Variant2 }'. Example: enum Color { Red, Green, Blue }"}
{"question": "What is the 'derive' attribute used for?", "answer": "It automatically implements traits for enums/structs. Example: #[derive(Debug)] struct Point;"}
{"question": "How do you use 'match' with enums?", "answer": "Match on enum variants. Example: match color { Color::Red => \"red\", _ => \"other\" }"}
{"question": "What is the 'as_ref' method used for?", "answer": "It converts a type to a reference. Example: let s = \"hello\".as_ref();"}
{"question": "How do you implement a custom trait?", "answer": "Define the trait and then 'impl' it for a type. Example: trait MyTrait { fn my_method(); } impl MyTrait for i32 { ... }"}
{"question": "What is the 'lifetime' parameter in Rust?", "answer": "It specifies how long references are valid. Example: fn longest<'a>(s1: &'a str, s2: &'a str) -> &'a str"}
{"question": "How do you use 'where' clauses in generics?", "answer": "Specify trait bounds. Example: fn foo<T>(t: T) where T: Display { ... }"}
{"question": "What is the 'into_iter' method used for?", "answer": "It consumes the collection and returns an iterator. Example: for item in vec.into_iter() { ... }"}
{"question": "How do you use 'iter' on a vector?", "answer": "'iter()' returns an iterator over references. Example: for &item in vec.iter() { ... }"}
{"question": "What is the 'map' function in iterators?", "answer": "It transforms each element. Example: nums.iter().map(|x| x * 2).collect()"}
{"question": "How do you use 'filter' in iterators?", "answer": "It selects elements that match a predicate. Example: nums.iter().filter(|&x| x % 2 == 0).collect()"}
{"question": "What is the 'collect' method used for?", "answer": "It gathers iterator elements into a collection. Example: vec.iter().collect::<Vec<_>>()"}
{"question": "How do you handle multiple errors with 'Result'?", "answer": "Use 'Result<T, E>' where E can be a tuple or a custom error type."}
{"question": "What is the 'panic!' macro used for?", "answer": "It causes a runtime panic. Example: panic!(\"Something went wrong\");"}
{"question": "How do you use 'thread::spawn' to create a thread?", "answer": "Example: thread::spawn(|| { println!(\"Hello from thread\"); });"}
{"question": "What is the 'Send' trait in Rust?", "answer": "It indicates a type can be safely sent to another thread. Types like 'i32' implement 'Send' by default."}
{"question": "How do you share data between threads safely?", "answer": "Use 'Arc<Mutex<T>>' for shared ownership and mutual exclusion."}
{"question": "What is the 'Sync' trait in Rust?", "answer": "'Sync' allows a type to be safely shared between threads. Most primitive types implement 'Sync'."}
{"question": "How do you use channels to communicate between threads?", "answer": "Use 'mpsc::channel()' to create a channel. Example: let (tx, rx) = mpsc::channel();"}
{"question": "What is the 'Arc<Mutex<T>>' pattern used for?", "answer": "It provides thread-safe shared ownership with exclusive access. Example: Arc::new(Mutex::new(42))"}
{"question": "How do you write an asynchronous function in Rust?", "answer": "Use 'async fn' to define an async function. Example: async fn fetch_data() -> Result<String, Error> { ... }"}
{"question": "What is the 'async' keyword used for?", "answer": "It marks a function or block as asynchronous, allowing 'await' inside."}
{"question": "How do you await a future in Rust?", "answer": "Use 'await!' inside an async function. Example: let result = fetch_data().await;"}
{"question": "What is the 'Box' type used for?", "answer": "It allocates data on the heap. Example: let b = Box::new(5);"}
{"question": "How do you use 'Rc' for reference counting?", "answer": "Use 'Rc::new()' to create a reference-counted pointer. Example: let rc = Rc::new(42);"}
{"question": "What is the 'Arc' type used for?", "answer": "'Arc' provides thread-safe reference counting. Example: let arc = Arc::new(42);"}
{"question": "How do you define an enum in Rust?", "answer": "Use 'enum EnumName { Variant1, Variant2 }'. Example: enum Color { Red, Green, Blue }"}
{"question": "What is the 'derive' attribute used for?", "answer": "It automatically implements traits for enums/structs. Example: #[derive(Debug)] struct Point;"}
{"question": "How do you use 'match' with enums?", "answer": "Match on enum variants. Example: match color { Color::Red => \"red\", _ => \"other\" }"}
{"question": "What is the 'as_ref' method used for?", "answer": "It converts a type to a reference. Example: let s = \"hello\".as_ref();"}
{"question": "How do you implement a custom trait?", "answer": "Define the trait and then 'impl' it for a type. Example: trait MyTrait { fn my_method(); } impl MyTrait for i32 { ... }"}
{"question": "What is the 'lifetime' parameter in Rust?", "answer": "It specifies how long references are valid. Example: fn longest<'a>(s1: &'a str, s2: &'a str) -> &'a str"}
{"question": "How do you use 'where' clauses in generics?", "answer": "Specify trait bounds. Example: fn foo<T>(t: T) where T: Display { ... }"}
{"question": "What is the 'into_iter' method used for?", "answer": "It consumes the collection and returns an iterator. Example: for item in vec.into_iter() { ... }"}
{"question": "How do you use 'iter' on a vector?", "answer": "'iter()' returns an iterator over references. Example: for &item in vec.iter() { ... }"}
{"question": "What is the 'map' function in iterators?", "answer": "It transforms each element. Example: nums.iter().map(|x| x * 2).collect()"}
{"question": "How do you use 'filter' in iterators?", "answer": "It selects elements that match a predicate. Example: nums.iter().filter(|&x| x % 2 == 0).collect()"}
{"question": "What is the 'collect' method used for?", "answer": "It gathers iterator elements into a collection. Example: vec.iter().collect::<Vec<_>>()"}
{"question": "How do you handle multiple errors with 'Result'?", "answer": "Use 'Result<T, E>' where E can be a tuple or a custom error type."}
{"question": "What is the 'panic!' macro used for?", "answer": "It causes a runtime panic. Example: panic!(\"Something went wrong\");"}
{"question": "How do you use 'thread::spawn' to create a thread?", "answer": "Example: thread::spawn(|| { println!(\"Hello from thread\"); });"}
{"question": "What is the 'Send' trait in Rust?", "answer": "It indicates a type can be safely sent to another thread. Types like 'i32' implement 'Send' by default."}
{"question": "How do you share data between threads safely?", "answer": "Use 'Arc<Mutex<T>>' for shared ownership and mutual exclusion."}
{"question": "What is the 'Sync' trait in Rust?", "answer": "'Sync' allows a type to be safely shared between threads. Most primitive types implement 'Sync'."}
{"question": "How do you use channels to communicate between threads?", "answer": "Use 'mpsc::channel()' to create a channel. Example: let (tx, rx) = mpsc::channel();"}
{"question": "What is the 'Arc<Mutex<T>>' pattern used for?", "answer": "It provides thread-safe shared ownership with exclusive access. Example: Arc::new(Mutex::new(42))"}
{"question": "How do you write an asynchronous function in Rust?", "answer": "Use 'async fn' to define an async function. Example: async fn fetch_data() -> Result<String, Error> { ... }"}
{"question": "What is the 'async' keyword used for?", "answer": "It marks a function or block as asynchronous, allowing 'await' inside."}
{"question": "How do you await a future in Rust?", "answer": "Use 'await!' inside an async function. Example: let result = fetch_data().await;"}
{"question": "What is the difference between 'let' and 'const' in Rust?", "answer": "'let' declares a variable, which can be reassigned. 'const' defines a compile-time constant, which is immutable and must have a type specified.\n\n```rust\nlet x = 5;\nconst Y: i32 = 10;\n```"}
{"question": "How do you create a mutable variable in Rust?", "answer": "Use 'let mut' followed by the variable name and value.\n\n```rust\nlet mut count = 0;\n```"}
{"question": "What is the purpose of the 'match' expression?", "answer": "It compares a value against patterns and executes code based on the matching pattern.\n\n```rust\nmatch value {\n    1 => println!(\"One\"),\n    _ => println!(\"Other\"),\n}\n```"}
{"question": "What is the 'Rust' borrow checker?", "answer": "A compiler feature that enforces ownership and borrowing rules to prevent data races and ensure memory safety.\n\n```rust\nlet s = String::from(\"hello\");\nlet s2 = s;\n// println!(\"s: {}\", s); // Error: 's' is no longer valid\n```"}
{"question": "How to handle errors in Rust?", "answer": "Use 'Result' or 'Option' types, or the '?' operator to propagate errors.\n\n```rust\nfn divide(a: i32, b: i32) -> Result<i32, String> {\n    if b == 0 { Err(\"Division by zero\".to_string()) }\n    else { Ok(a / b) }\n}\n```"}
{"question": "What is a 'trait' in Rust?", "answer": "A trait defines shared functionality for types. It's like an interface in other languages.\n\n```rust\ntrait Animal {\n    fn sound(&self);\n}\n```"}
{"question": "How to implement a trait for a struct?", "answer": "Use 'impl Trait for Struct' block.\n\n```rust\nstruct Dog;\nimpl Animal for Dog {\n    fn sound(&self) { println!(\"Woof!\"); }\n}\n```"}
{"question": "What is the 'Box' type used for?", "answer": "It allocates data on the heap and provides a pointer to it.\n\n```rust\nlet b = Box::new(5);\n```"}
{"question": "What is the 'Rust' ownership system?", "answer": "It ensures each value has a single owner, with rules for moving, borrowing, and dropping.\n\n```rust\nlet s1 = String::from(\"hello\");\nlet s2 = s1; // s1 is moved to s2\n// println!(\"s1: {}\", s1); // Error: 's1' is invalid\n```"}
{"question": "How to share data between threads?", "answer": "Use 'Arc<T>' (Atomic Reference Counted) for safe shared ownership.\n\n```rust\nuse std::sync::Arc;\nlet data = Arc::new(10);\n```"}
{"question": "What is the 'Send' trait?", "answer": "It indicates a type can be safely sent between threads.\n\n```rust\nimpl Send for MyType {}\n```"}
{"question": "How to create a thread in Rust?", "answer": "Use 'std::thread::spawn' with a closure.\n\n```rust\nstd::thread::spawn(|| {\n    println!(\"Running in thread\");\n});\n```"}
{"question": "What is a 'lifetime' in Rust?", "answer": "A lifetime specifies how long references are valid. It's used to avoid dangling references.\n\n```rust\nfn longest<'a>(s1: &'a str, s2: &'a str) -> &'a str {\n    // ...\n}\n```"}
{"question": "How to use 'if let' in Rust?", "answer": "It simplifies checking a single pattern in an 'Option' or 'Result'.\n\n```rust\nif let Some(x) = value {\n    println!(\"Found: {}\", x);\n}\n```"}
{"question": "What is the 'Rust' 'panic!' macro?", "answer": "It causes the current thread to panic and unwind, typically used for unrecoverable errors.\n\n```rust\npanic!(\"This is a panic\");\n```"}
{"question": "How to define a function in Rust?", "answer": "Use 'fn' followed by the function name, parameters, and body.\n\n```rust\nfn add(a: i32, b: i32) -> i32 {\n    a + b\n}\n```"}
{"question": "What is the 'Result' type?", "answer": "It represents either success (Ok) or failure (Err), used for error handling.\n\n```rust\nlet result: Result<i32, &str> = Ok(42);\n```"}
{"question": "How to use 'match' with enums?", "answer": "Each variant is matched, and the code for that variant is executed.\n\n```rust\nenum Message { Quit, Move { x: i32, y: i32 } }\nmatch msg {\n    Message::Quit => println!(\"Quit\"),\n    Message::Move { x, y } => println!(\"Move to ({}, {})\", x, y),\n}\n```"}
{"question": "What is the 'Rust' 'Vec' type?", "answer": "A dynamic array that can grow or shrink at runtime.\n\n```rust\nlet v = vec![1, 2, 3];\n```"}
{"question": "How to use 'RefCell' for interior mutability?", "answer": "It allows borrowing with runtime checks instead of compile-time.\n\n```rust\nuse std::cell::RefCell;\nlet data = RefCell::new(10);\nlet mut data_borrow = data.borrow_mut();\n*data_borrow += 1;\n```"}
{"question": "What is the 'Rust' 'as' keyword?", "answer": "It converts between types, but can cause panics if the conversion is invalid.\n\n```rust\nlet x: i32 = 5;\nlet y: u8 = x as u8;\n```"}
{"question": "How to use 'thread::join' in Rust?", "answer": "It waits for a thread to finish and returns its result.\n\n```rust\nlet handle = std::thread::spawn(|| 42);\nlet result = handle.join().unwrap();\n```"}
{"question": "What is the 'Rust' 'Option' type?", "answer": "It represents a value that may be present (Some) or absent (None).\n\n```rust\nlet maybe_num: Option<i32> = Some(5);\n```"}
{"question": "How to create a slice in Rust?", "answer": "Use a range with a reference to a collection.\n\n```rust\nlet arr = [1, 2, 3];\nlet slice = &arr[1..3]; // [2, 3]\n```"}
{"question": "What is the 'Rust' 'Rc' type?", "answer": "A reference-counted pointer for shared ownership in single-threaded contexts.\n\n```rust\nuse std::rc::Rc;\nlet rc = Rc::new(10);\n```"}
{"question": "How to use 'while let' in Rust?", "answer": "It loops while a pattern matches, useful for iterating over 'Option' values.\n\n```rust\nwhile let Some(x) = iter.next() {\n    println!(\"{}\", x);\n}\n```"}
{"question": "What is the 'Rust' 'pub' keyword?", "answer": "It makes a function, struct, or module public (visible outside the crate).\n\n```rust\npub fn my_function() {}\n```"}
{"question": "How to use 'match' with 'Result'?", "answer": "It handles Ok and Err variants explicitly.\n\n```rust\nmatch result {\n    Ok(value) => println!(\"Success: {}\", value),\n    Err(e) => println!(\"Error: {}\", e),\n}\n```"}
{"question": "What is the 'Rust' 'self' keyword?", "answer": "It refers to the current instance in method definitions.\n\n```rust\nimpl MyStruct {\n    fn my_method(&self) {}\n}\n```"}
{"question": "How to use 'Rust' macros?", "answer": "Define with 'macro_rules!' or use built-in macros like 'println!'.\n\n```rust\nmacro_rules! say_hello {\n    () => { println!(\"Hello!\"); }\n}\n```"}
{"question": "What is the 'Rust' 'use' keyword?", "answer": "It brings items (functions, types, modules) into scope.\n\n```rust\nuse std::collections::HashMap;\n```"}
{"question": "How to handle multiple errors in Rust?", "answer": "Use 'Result<T, E>' where E is a type that can represent multiple error variants.\n\n```rust\nenum MyError { Parse, IO }\n```"}
{"question": "What is the 'Rust' 'static' lifetime?", "answer": "It indicates a reference that lives for the entire program duration.\n\n```rust\nfn static_ref() -> &'static str {\n    \"Hello, world!\"\n}\n```"}
{"question": "How to use 'Rust' 'Box' for trait objects?", "answer": "It allows storing different types that implement the same trait on the heap.\n\n```rust\nlet b: Box<dyn Animal> = Box::new(Dog);\n```"}
{"question": "What is the 'Rust' 'derive' attribute?", "answer": "It automatically generates implementations for common traits like 'Debug', 'Clone', etc.\n\n```rust\n#[derive(Debug)]\nstruct Point { x: i32, y: i32 }\n```"}
{"question": "How to use 'Rust' 'iter' and 'into_iter'?", "answer": "'iter' borrows elements, 'into_iter' consumes the collection.\n\n```rust\nlet v = vec![1, 2, 3];\nfor i in v.iter() { /* ... */ }\nfor i in v.into_iter() { /* ... */ }\n```"}
{"question": "What is the 'Rust' 'as_ref' method?", "answer": "It converts a 'Box<T>' to a '&T' without consuming the box.\n\n```rust\nlet b = Box::new(5);\nlet r = b.as_ref();\n```"}
{"question": "How to use 'Rust' 'thread_local'?", "answer": "It creates a variable that is unique to each thread.\n\n```rust\nthread_local! {\n    static COUNTER: RefCell<i32> = RefCell::new(0);\n}\n```"}
{"question": "What is the 'Rust' 'drop' trait?", "answer": "It allows custom cleanup code when a value goes out of scope.\n\n```rust\nimpl Drop for MyStruct {\n    fn drop(&mut self) { /* cleanup */ }\n}\n```"}
{"question": "How to use 'Rust' 'Option::unwrap'?", "answer": "It returns the value inside 'Some', panics if 'None'.\n\n```rust\nlet x = Some(5).unwrap();\n```"}
{"question": "What is the 'Rust' 'Result::ok' method?", "answer": "It converts 'Result<T, E>' to 'Option<T>' by discarding the error.\n\n```rust\nlet ok = Ok(5).ok(); // Some(5)\n```"}
{"question": "How to use 'Rust' 'Arc' for shared ownership?", "answer": "It allows multiple threads to own a value safely.\n\n```rust\nuse std::sync::Arc;\nlet a = Arc::new(10);\nlet b = a.clone();\n```"}
{"question": "What is the 'Rust' 'Ref' type?", "answer": "It provides an immutable reference to data inside 'RefCell'.\n\n```rust\nuse std::cell::RefCell;\nlet data = RefCell::new(10);\nlet r = data.borrow();\n```"}
{"question": "How to use 'Rust' 'thread::spawn' with data?", "answer": "Move data into the closure to transfer ownership to the thread.\n\n```rust\nlet data = 5;\nstd::thread::spawn(move || {\n    println!(\"Data: {}\", data);\n});\n```"}
{"question": "What is the 'Rust' 'as_mut' method?", "answer": "It converts a 'Box<T>' to a '&mut T' without consuming the box.\n\n```rust\nlet b = Box::new(5);\nlet m = b.as_mut();\n```"}
{"question": "How to use 'Rust' 'Result::err'?", "answer": "It converts 'Result<T, E>' to 'Option<E>' by discarding the success value.\n\n```rust\nlet err = Err(\"msg\").err(); // Some(\"msg\")\n```"}
{"question": "What is the 'Rust' 'lifetime' elision?", "answer": "It allows omitting explicit lifetime annotations in common cases.\n\n```rust\nfn first_word(s: &str) -> &str { /* ... */ }\n```"}
{"question": "How to use 'Rust' 'thread::available_parallelism'?", "answer": "It returns the number of logical CPUs available for parallelism.\n\n```rust\nif let Some(h) = std::thread::available_parallelism() {\n    println!(\"CPUs: {}\", h);\n}\n```"}
{"question": "What is the 'Rust' 'pub use' statement?", "answer": "It re-exports items from another module, making them public in the current scope.\n\n```rust\npub use other::MyStruct;\n```"}
{"question": "How to use 'Rust' 'Option::as_ref'?", "answer": "'Option::as_ref' converts 'Option<T>' to 'Option<&T>' without consuming it.\n\n```rust\nlet opt = Some(5);\nlet ref_opt = opt.as_ref(); // Some(&5)\n```"}
{"question": "What is the 'Rust' 'Send' trait?", "answer": "It indicates a type can be safely sent between threads.\n\n```rust\nimpl Send for MyType {}\n```"}
{"question": "How to use 'Rust' 'RefCell::try_borrow'?", "answer": "'try_borrow' returns a 'Result' instead of panicking on failure.\n\n```rust\nuse std::cell::RefCell;\nlet data = RefCell::new(10);\nif let Ok(r) = data.try_borrow() { /* ... */ }\n```"}
{"question": "What is the 'Rust' 'Rc::clone'?", "answer": "It increments the reference count for 'Rc<T>' shared ownership.\n\n```rust\nlet rc1 = Rc::new(10);\nlet rc2 = Rc::clone(&rc1);\n```"}
{"question": "How to use 'Rust' 'thread::sleep'?", "answer": "It pauses the current thread for a specified duration.\n\n```rust\nuse std::time::Duration;\nstd::thread::sleep(Duration::from_secs(1));\n```"}
{"question": "What is the 'Rust' 'Result::is_ok'?", "answer": "'is_ok' checks if a 'Result' is 'Ok' without unwrapping.\n\n```rust\nlet res = Ok(5);\nif res.is_ok() { /* ... */ }\n```"}
{"question": "How to use 'Rust' 'Option::is_some'?", "answer": "'is_some' checks if an 'Option' contains a value.\n\n```rust\nlet opt = Some(5);\nif opt.is_some() { /* ... */ }\n```"}
{"question": "What is the 'Rust' 'Mutex' type?", "answer": "It provides mutual exclusion for shared data across threads.\n\n```rust\nuse std::sync::Mutex;\nlet m = Mutex::new(10);\nlet mut data = m.lock().unwrap();\n*data += 1;\n```"}
{"question": "How to use 'Rust' 'thread::available_parallelism'?", "answer": "It returns the number of logical CPUs available for parallelism.\n\n```rust\nif let Some(h) = std::thread::available_parallelism() {\n    println!(\"CPUs: {}\", h);\n}\n```"}
{"question": "What is the 'Rust' 'Rc::strong_count'?", "answer": "'Rc::strong_count' returns the number of references to an 'Rc<T>'.\n\n```rust\nlet rc = Rc::new(10);\nprintln!(\"Count: {}\", Rc::strong_count(&rc));\n```"}
{"question": "How to use 'Rust' 'RefCell::borrow_mut'?", "answer": "'borrow_mut' provides a mutable reference to the inner value.\n\n```rust\nuse std::cell::RefCell;\nlet data = RefCell::new(10);\nlet mut data_mut = data.borrow_mut();\n*data_mut += 1;\n```"}
{"question": "What is the 'Rust' 'Box::new'?", "answer": "'Box::new' allocates a value on the heap and returns a pointer to it.\n\n```rust\nlet b = Box::new(5);\n```"}
{"question": "How to use 'Rust' 'Option::as_mut'?", "answer": "'Option::as_mut' converts 'Option<T>' to 'Option<&mut T>' without consuming it.\n\n```rust\nlet mut opt = Some(5);\nif let Some(x) = opt.as_mut() { *x += 1; }\n```"}
{"question": "What is the 'Rust' 'Rc::downgrade'?", "answer": "'Rc::downgrade' creates a non-owning 'Weak' reference to an 'Rc<T>'.\n\n```rust\nlet rc = Rc::new(10);\nlet weak = Rc::downgrade(&rc);\n```"}
{"question": "How to use 'Rust' 'thread::spawn' with a closure?", "answer": "Pass a closure to 'spawn' to execute code in a new thread.\n\n```rust\nstd::thread::spawn(|| {\n    println!(\"Thread\");\n});\n```"}
{"question": "What is the 'Rust' 'Result::is_err'?", "answer": "'is_err' checks if a 'Result' is 'Err' without unwrapping.\n\n```rust\nlet res = Err(\"msg\");\nif res.is_err() { /* ... */ }\n```"}
{"question": "How to use 'Rust' 'Option::take'?", "answer": "'take' removes the value from 'Option' and returns it.\n\n```rust\nlet mut opt = Some(5);\nlet x = opt.take(); // Some(5), opt is now None\n```"}
{"question": "What is the 'Rust' 'Rc::weak_count'?", "answer": "'Rc::weak_count' returns the number of weak references to an 'Rc<T>'.\n\n```rust\nlet rc = Rc::new(10);\nlet weak = Rc::downgrade(&rc);\nprintln!(\"Weak count: {}\", Rc::weak_count(&rc));\n```"}
{"question": "How to use 'Rust' 'RefCell::try_borrow_mut'?", "answer": "'try_borrow_mut' returns a 'Result' for mutable access.\n\n```rust\nuse std::cell::RefCell;\nlet data = RefCell::new(10);\nif let Ok(mut r) = data.try_borrow_mut() { *r += 1; }\n```"}
{"question": "What is the 'Rust' 'Rc' type?", "answer": "A reference-counted pointer for shared ownership in single-threaded contexts.\n\n```rust\nuse std::rc::Rc;\nlet rc = Rc::new(10);\n```"}
{"question": "How to use 'Rust' 'thread::current'?", "answer": "'thread::current' returns the current thread's handle.\n\n```rust\nlet id = std::thread::current().id();\n```"}
{"question": "What is the 'Rust' 'Box' type?", "answer": "It allocates data on the heap and provides a pointer to it.\n\n```rust\nlet b = Box::new(5);\n```"}
{"question": "How to use 'Rust' 'Option::unwrap_or'?", "answer": "'unwrap_or' returns the value if 'Some', else the provided default.\n\n```rust\nlet x = None.unwrap_or(5); // 5\n```"}
{"question": "What is the 'Rust' 'Result::unwrap'?", "answer": "'unwrap' returns the value if 'Ok', panics if 'Err'.\n\n```rust\nlet x = Ok(5).unwrap();\n```"}
{"question": "How to use 'Rust' 'RefCell::borrow'?", "answer": "'borrow' provides an immutable reference to the inner value.\n\n```rust\nuse std::cell::RefCell;\nlet data = RefCell::new(10);\nlet r = data.borrow();\n```"}
{"question": "What is the 'Rust' 'Rc::clone'?", "answer": "'Rc::clone' increments the reference count for 'Rc<T>'.\n\n```rust\nlet rc1 = Rc::new(10);\nlet rc2 = Rc::clone(&rc1);\n```"}
{"question": "How to use 'Rust' 'Option::unwrap'?", "answer": "'unwrap' returns the value if 'Some', panics if 'None'.\n\n```rust\nlet x = Some(5).unwrap();\n```"}
{"question": "What is the 'Rust' 'MutexGuard'?", "answer": "A temporary, mutable reference to the data protected by a 'Mutex'.\n\n```rust\nuse std::sync::Mutex;\nlet m = Mutex::new(10);\nlet mut data = m.lock().unwrap();\n```"}
{"question": "How to use 'Rust' 'thread::JoinHandle'?", "answer": "'JoinHandle' is returned by 'spawn' and allows waiting for the thread to finish.\n\n```rust\nlet handle = std::thread::spawn(|| 42);\nhandle.join().unwrap();\n```"}
{"question": "What is the 'Rust' 'Rc::try_unwrap'?", "answer": "'try_unwrap' converts 'Rc<T>' to 'T' if it's the only reference.\n\n```rust\nlet rc = Rc::new(10);\nlet t = Rc::try_unwrap(rc).unwrap();\n```"}
{"question": "How to use 'Rust' 'RefCell::into_inner'?", "answer": "'into_inner' extracts the value from 'RefCell' if no references are active.\n\n```rust\nuse std::cell::RefCell;\nlet data = RefCell::new(10);\nlet value = data.into_inner();\n```"}
{"question": "What is the 'Rust' 'Rc' vs 'Arc'?", "answer": "'Rc' is for single-threaded shared ownership; 'Arc' is thread-safe.\n\n```rust\nuse std::rc::Rc;\nuse std::sync::Arc;\n```"}
{"question": "How to use 'Rust' 'Option::map'?", "answer": "'map' applies a function to the value if 'Some', else returns 'None'.\n\n```rust\nlet x = Some(5).map(|n| n * 2); // Some(10)\n```"}
{"question": "What is the 'Rust' 'Result::map'?", "answer": "'map' transforms the 'Ok' value, leaving 'Err' unchanged.\n\n```rust\nlet res = Ok(5).map(|n| n * 2); // Ok(10)\n```"}
{"question": "How to use 'Rust' 'Option::and_then'?", "answer": "'and_then' chains operations that return 'Option' types.\n\n```rust\nlet x = Some(5).and_then(|n| Some(n + 1)); // Some(6)\n```"}
{"question": "What is the 'Rust' 'Result::and_then'?", "answer": "'and_then' chains operations that return 'Result' types.\n\n```rust\nlet res = Ok(5).and_then(|n| Ok(n + 1)); // Ok(6)\n```"}
{"question": "How to use 'Rust' 'Option::unwrap_or_default'?", "answer": "'unwrap_or_default' returns the value if 'Some', else the default value.\n\n```rust\nlet x = None.unwrap_or_default(); // 0 for i32\n```"}
{"question": "What is the 'Rust' 'RefCell::borrow_mut'?", "answer": "'borrow_mut' provides a mutable reference to the inner value.\n\n```rust\nuse std::cell::RefCell;\nlet data = RefCell::new(10);\nlet mut r = data.borrow_mut();\n* r += 1;\n```"}
{"question": "How to use 'Rust' 'Mutex::lock'?", "answer": "'lock' acquires the mutex, returning a 'MutexGuard'.\n\n```rust\nuse std::sync::Mutex;\nlet m = Mutex::new(10);\nlet mut data = m.lock().unwrap();\n* data += 1;\n```"}
{"question": "What is the 'Rust' 'Rc::into_inner'?", "answer": "'into_inner' extracts the value from 'Rc<T>' if it's the only reference.\n\n```rust\nlet rc = Rc::new(10);\nlet t = Rc::into_inner(rc);\n```"}
{"question": "How to use 'Rust' 'thread::scope'?", "answer": "'thread::scope' allows creating scoped threads that borrow data from the parent.\n\n```rust\nstd::thread::scope(|s| {\n    s.spawn(|| { /* ... */ });\n});\n```"}
{"question": "What is the 'Rust' 'Box::leak'?", "answer": "'Box::leak' converts a 'Box<T>' into a '&T' that lives forever.\n\n```rust\nlet x = Box::new(5);\nlet leaked = Box::leak(x);\n```"}
{"question": "How to use 'Rust' 'Option::filter'?", "answer": "'filter' keeps the value if the predicate returns true, else 'None'.\n\n```rust\nlet x = Some(5).filter(|&n| n > 3); // Some(5)\n```"}
{"question": "What is the 'Rust' 'Result::filter'?", "answer": "'filter' keeps the 'Ok' value if the predicate returns true, else 'Err'.\n\n```rust\nlet res = Ok(5).filter(|&n| n > 3); // Ok(5)\n```"}
{"question": "What is the difference between let and const in Rust?", "answer": "`let` declares a variable (immutable by default), while `const` defines a compile-time constant. Variables can be mutable with `mut`, but constants are always immutable."}
{"question": "How do you declare a mutable variable in Rust?", "answer": "Use `let mut variable_name = value;`. Example: `let mut x = 5; x = 6;`"}
{"question": "What are Rust's primitive data types?", "answer": "Integer types (i8, u8, i16, etc.), floating-point (f32, f64), bool, char, and str."}
{"question": "How to create a function in Rust?", "answer": "Use `fn function_name(parameters) -> return_type { body }`. Example: `fn add(a: i32, b: i32) -> i32 { a + b }`"}
{"question": "What is a tuple in Rust?", "answer": "A grouped collection of values with fixed size and types. Example: `let pair = (1, \"a\");`"}
{"question": "How to use match in Rust?", "answer": "`match expression { pattern => result, ... }`. Example: `match x { 1 => \"one\", _ => \"other\" }`"}
{"question": "What is Rust's ownership system?", "answer": "Rust tracks variable ownership to manage memory. Only one owner at a time; data is dropped when the owner goes out of scope."}
{"question": "What is the purpose of the 'mut' keyword?", "answer": "Allows a variable to be modified after declaration. Example: `let mut x = 5; x += 1;`"}
{"question": "How to handle errors with Result?", "answer": "Use `Ok` for success and `Err` for failure. Example: `let result: Result<i32, &str> = Ok(42);`"}
{"question": "What is a slice in Rust?", "answer": "A reference to a portion of a collection. Example: `let s = &arr[1..3];`"}
{"question": "How to create a struct in Rust?", "answer": "Use `struct StructName { field: Type }`. Example: `struct Point { x: i32, y: i32 }`"}
{"question": "What is a closure in Rust?", "answer": "An anonymous function. Example: `let add = |a, b| a + b;`"}
{"question": "How to declare an array in Rust?", "answer": "`let array = [1, 2, 3];` or `let array = [0; 5];` for repeated values."}
{"question": "What is the Option type?", "answer": "Represents optional values. `Some(T)` or `None`. Example: `let x: Option<i32> = Some(5);`"}
{"question": "How to use a match arm with a wildcard?", "answer": "Use `_` as the pattern. Example: `match x { 1 => \"one\", _ => \"other\" }`"}
{"question": "What is the difference between Box and Vec?", "answer": "`Box` is a single heap-allocated value. `Vec` is a dynamic array. Example: `let b = Box::new(5);` vs `let v = vec![1, 2, 3];`"}
{"question": "How to use the 'if let' syntax?", "answer": "`if let pattern = expression { ... }`. Example: `if let Some(x) = value { println!(\"{}\", x); }`"}
{"question": "What is the 'use' keyword for?", "answer": "Brings items into scope. Example: `use std::collections::HashMap;`"}
{"question": "How to define a function with multiple parameters?", "answer": "List parameters with types. Example: `fn sum(a: i32, b: i32) -> i32 { a + b }`"}
{"question": "What is the 'as' keyword used for?", "answer": "Type casting. Example: `let x: i32 = 5u8 as i32;`"}
{"question": "How to implement a trait for a struct?", "answer": "`impl Trait for Struct { ... }`. Example:\n```rust\nimpl ToString for Point {\n    fn to_string(&self) -> String {\n        format!(\"({}, {})\", self.x, self.y)\n    }\n}\n```"}
{"question": "What is a lifetime parameter?", "answer": "Specifies how long references are valid. Example: `fn longest<'a>(s1: &'a str, s2: &'a str) -> &'a str`"}
{"question": "How to use generics in functions?", "answer": "Add type parameters. Example: `fn identity<T>(x: T) -> T { x }`"}
{"question": "What is the Iterator trait?", "answer": "Provides methods like `map`, `filter`, and `collect`. Example: `(0..5).map(|x| x * 2).collect::<Vec<_>>()`"}
{"question": "How to handle multiple errors with ? operator?", "answer": "The `?` operator propagates errors. Example: `fn read_file() -> Result<String, io::Error> { let data = std::fs::read_to_string(\"file\")?; Ok(data) }`"}
{"question": "How to use match with enums?", "answer": "`match enum_value { Enum::Variant => ... }`. Example: `match color { Red => \"red\", Blue => \"blue\" }`"}
{"question": "What is the Box type used for?", "answer": "Heap allocation. Example: `let b = Box::new(5);`"}
{"question": "How to create a custom error type?", "answer": "Implement `std::error::Error`. Example:\n```rust\n#[derive(Debug)]\nstruct MyError;\nimpl std::error::Error for MyError {}\n```"}
{"question": "What is the 'where' clause in generics?", "answer": "Specifies trait bounds. Example: `fn process<T: Display + Clone>(x: T) where T: Debug { ... }`"}
{"question": "How to use as_ref and as_mut?", "answer": "Converts a value to a reference. Example: `let s = \"hello\".as_ref();`"}
{"question": "What is the Deref trait?", "answer": "Allows dereferencing with `*`. Example: `impl Deref for MyType { type Target = i32; fn deref(&self) -> &i32 { ... } }`"}
{"question": "How to use map on an Option?", "answer": "`option.map(|x| x * 2)`. Example: `Some(3).map(|x| x + 1)` returns `Some(4)`."}
{"question": "What is the Result type?", "answer": "Represents success or failure. `Ok(T)` or `Err(E)`. Example: `Result<i32, String>`"}
{"question": "How to use match with patterns?", "answer": "`match value { pattern => ... }`. Example: `match x { 0 => \"zero\", 1 => \"one\", _ => \"other\" }`"}
{"question": "What is the Rc type?", "answer": "Reference-counted pointer. Allows multiple ownership. Example: `let rc = Rc::new(5);`"}
{"question": "How to use Arc for shared ownership?", "answer": "`Arc<T>` is thread-safe. Example: `let arc = Arc::new(5);`"}
{"question": "What is the PhantomData type?", "answer": "A zero-sized type for generic parameters. Example: `struct MyStruct<T> { data: Box<T>, _marker: PhantomData<T> }`"}
{"question": "How to use try_from and try_into?", "answer": "Converts between types with error handling. Example: `let x: i32 = 5u8.try_into().unwrap();`"}
{"question": "What is the From trait?", "answer": "Converts from another type. Example: `impl From<String> for MyType { fn from(s: String) -> Self { ... } }`"}
{"question": "What is the purpose of the 'Send' trait?", "answer": "Marks types that can be safely sent between threads. Automatically implemented for types without non-Send data."}
{"question": "How to create a thread in Rust?", "answer": "Use `std::thread::spawn`. Example:\n```rust\nstd::thread::spawn(|| {\n    println!(\"Hello from thread\");\n});\n```"}
{"question": "What is a Mutex in Rust?", "answer": "A mutual exclusion lock. Example: `let m = Mutex::new(5); let mut data = m.lock().unwrap();`"}
{"question": "How to use channel for thread communication?", "answer": "`let (tx, rx) = mpsc::channel();`. Example: `tx.send(42).unwrap();` and `rx.recv().unwrap()`"}
{"question": "What is the JoinHandle type?", "answer": "Returns from `spawn`. Used to wait for a thread's completion. Example: `let handle = std::thread::spawn(...); handle.join().unwrap();`"}
{"question": "How to use async and await?", "answer": "`async` defines an async function. `await` suspends execution. Example:\n```rust\nasync fn fetch() -> Result<String, reqwest::Error> {\n    let res = reqwest::get(\"url\").await?;\n    res.text().await\n}\n```"}
{"question": "What is the Future trait?", "answer": "Represents asynchronous computations. `await` is used to resolve it."}
{"question": "How to use tokio for async?", "answer": "Run async functions with `tokio::main`. Example:\n```rust\n#[tokio::main]\nasync fn main() {\n    let data = fetch().await;\n}\n```"}
{"question": "What is the crossbeam crate used for?", "answer": "Provides concurrency utilities like channels and synchronization primitives."}
{"question": "How to use RwLock for shared access?", "answer": "`RwLock<T>` allows multiple readers or one writer. Example: `let lock = RwLock::new(5); let data = lock.read().unwrap();`"}
{"question": "What is the 'Copy' trait?", "answer": "Allows values to be copied instead of moved. Types like i32 implement it by default."}
{"question": "How to use the 'match' expression with guards?", "answer": "Add `if condition` after a pattern. Example: `match x { 0 => \"zero\", y if y > 0 => \"positive\" }`"}
{"question": "What is a 'static lifetime?", "answer": "Indicates a reference that lives for the entire program. Example: `fn example<'static>(s: &'static str)`"}
{"question": "How to use the 'as' keyword for type casting?", "answer": "Converts between types. Example: `let x: u8 = 5i32 as u8;`"}
{"question": "What is the 'derive' attribute?", "answer": "Automatically implements traits. Example: `#[derive(Debug)] struct Point { x: i32 }`"}
{"question": "How to use the 'match' expression with ref patterns?", "answer": "`ref` borrows the value. Example: `match x { ref y => println!(\"{}\", y) }`"}
{"question": "What is the 'Option::unwrap_or' method?", "answer": "Returns the value or a default. Example: `Some(5).unwrap_or(0)` returns `5`."}
{"question": "How to use the 'Result::map_err' method?", "answer": "Transforms an Err. Example: `Ok(5).map_err(|e| e.to_string())`"}
{"question": "What is the 'Box::new' function?", "answer": "Allocates a value on the heap. Example: `let b = Box::new(5);`"}
{"question": "How to use the 'Vec::push' method?", "answer": "Adds an element to the end. Example: `let mut v = vec![1]; v.push(2);`"}
{"question": "What is the 'str' type?", "answer": "A string slice, a reference to UTF-8 data. Example: `let s: &str = \"hello\";`"}
{"question": "How to use the 'match' expression with wildcards?", "answer": "`_` matches any value. Example: `match x { _ => \"any\" }`"}
{"question": "What is the 'Rc::clone' method?", "answer": "Increments the reference count. Example: `let rc1 = Rc::new(5); let rc2 = Rc::clone(&rc1);`"}
{"question": "How to use the 'Arc::clone' method?", "answer": "Thread-safe reference count increment. Example: `let arc1 = Arc::new(5); let arc2 = Arc::clone(&arc1);`"}
{"question": "What is the 'Option::is_none' method?", "answer": "Returns true if the Option is None. Example: `None.is_none()` returns `true`."}
{"question": "How to use the 'Result::ok' method?", "answer": "Extracts Ok value. Example: `Ok(5).ok()` returns `Some(5)`."}
{"question": "What is the 'Box::leak' function?", "answer": "Converts a Box to a raw pointer, preventing deallocation. Use with caution."}
{"question": "How to use the 'Vec::iter' method?", "answer": "Returns an iterator. Example: `vec![1, 2].iter().for_each(|x| println!(\"{}\", x));`"}
{"question": "How to use the 'match' expression with enum variants?", "answer": "`match enum_value { Enum::Variant => ... }`. Example: `match color { Color::Red => ... }`"}
{"question": "What is the 'Rc::weak_count' method?", "answer": "Returns the number of weak references. Example: `let count = rc.weak_count();`"}
{"question": "How to use the 'Arc::try_unwrap' method?", "answer": "Converts Arc to Box if unique. Example: `let boxed = Arc::try_unwrap(arc).unwrap();`"}
{"question": "What is the 'Option::as_ref' method?", "answer": "Returns a reference to the Some value. Example: `Some(5).as_ref()` gives `Some(&5)`."}
{"question": "How to use the 'Result::and' method?", "answer": "Chains Ok values. Example: `Ok(5).and(Ok(6))` returns `Ok(6)`."}
{"question": "How to use the 'match' expression with multiple patterns?", "answer": "`match x { 1 | 2 => \"one or two\" }`"}
{"question": "What is the 'Send' trait?", "answer": "Allows a type to be sent between threads. Automatically implemented for types without non-Send data."}
{"question": "How to use the 'thread::spawn' function?", "answer": "Creates a new thread. Example:\n```rust\nstd::thread::spawn(|| {\n    println!(\"Hello\");\n});\n```"}
{"question": "What is a 'channel' in Rust?", "answer": "Transports values between threads. Example: `let (tx, rx) = mpsc::channel();`"}
{"question": "How to use the 'Mutex::lock' method?", "answer": "Acquires the lock. Example: `let mut data = mutex.lock().unwrap();`"}
{"question": "What is the 'RwLock::read' method?", "answer": "Acquires a read lock. Example: `let data = rwlock.read().unwrap();`"}
{"question": "How to use the 'async' keyword?", "answer": "Declares an async function. Example: `async fn fetch() { ... }`"}
{"question": "What is the 'Future' trait?", "answer": "Represents asynchronous computations. `await` resolves it."}
{"question": "How to use the 'await' keyword?", "answer": "Suspends execution until a Future completes. Example: `let data = fetch().await;`"}
{"question": "What is the 'tokio::main' attribute?", "answer": "Runs an async main function. Example:\n```rust\n#[tokio::main]\nasync fn main() {\n    fetch().await;\n}\n```"}
{"question": "What is the 'crossbeam::channel' module?", "answer": "Provides crossbeam channels for thread communication."}
{"question": "How to use the 'Arc::new' function?", "answer": "Creates a new Arc. Example: `let arc = Arc::new(5);`"}
{"question": "What is the 'Box::into_raw' function?", "answer": "Converts a Box to a raw pointer. Example: `let ptr = Box::into_raw(Box::new(5));`"}
{"question": "How to use the 'Vec::into_iter' method?", "answer": "Consumes the Vec and returns an iterator. Example: `vec![1, 2].into_iter().for_each(|x| println!(\"{}\", x));`"}
{"question": "How to use the 'Option::or' method?", "answer": "Returns the Option or another. Example: `None.or(Some(5))` returns `Some(5)`."}
{"question": "What is the 'Result::or' method?", "answer": "Returns the Result or another. Example: `Err(\"error\").or(Ok(5))` returns `Ok(5)`."}
{"question": "What is the difference between 'let' and 'const' in Rust?", "answer": "'let' declares a variable, which can be reassigned, while 'const' defines a compile-time constant. Example: let x = 5; const Y: i32 = 10;"}
{"question": "How do you create a mutable variable in Rust?", "answer": "Use 'let mut' followed by the variable name. Example: let mut count = 0;"}
{"question": "What is the purpose of the 'match' expression in Rust?", "answer": "It enables pattern matching against a value, handling different cases. Example: match value { 1 => \"one\", _ => \"other\" };"}
{"question": "What is a 'tuple' in Rust?", "answer": "A fixed-size collection of values. Example: let point = (3, 4);"}
{"question": "How do you define a struct with named fields in Rust?", "answer": "struct Point { x: i32, y: i32 };"}
{"question": "What is the 'Option' type used for?", "answer": "To represent values that may be absent. It has variants 'Some' and 'None'."}
{"question": "What is the 'Result' type in Rust?", "answer": "A generic type for handling success or error values. Example: Ok(42) or Err(\"error\")"}
{"question": "How do you handle panics in Rust?", "answer": "Use 'panic!' to trigger a panic, and 'unwrap()' or 'expect()' to handle 'Result' or 'Option' failures."}
{"question": "What is the 'Box' type used for?", "answer": "Heap allocation. Example: let b = Box::new(5);"}
{"question": "What is the 'Rc' type in Rust?", "answer": "Reference-counted pointer for shared ownership. Not thread-safe."}
{"question": "How do you implement a trait for a type in Rust?", "answer": "Use 'impl Trait for Type'. Example: impl Display for Point { ... }"}
{"question": "What is the 'as' keyword used for in Rust?", "answer": "Type casting. Example: let x: i32 = 3.14 as i32;"}
{"question": "What is the 'drop' trait in Rust?", "answer": "Allows custom cleanup logic when a value goes out of scope."}
{"question": "What is the 'lifetime' system in Rust?", "answer": "Ensures references are valid for the correct duration. Lifetimes are annotated with ' as in 'fn foo<'a>(x: &'a i32) -> &'a i32'."}
{"question": "What is the 'move' keyword in Rust closures?", "answer": "Forces the closure to take ownership of captured variables."}
{"question": "How do you create a new thread in Rust?", "answer": "Use 'std::thread::spawn'. Example: std::thread::spawn(|| { ... });"}
{"question": "What is the 'Send' trait in Rust?", "answer": "Indicates a type can be safely sent between threads."}
{"question": "What is the 'Sync' trait in Rust?", "answer": "Indicates a type can be safely shared between threads."}
{"question": "How do you share data between threads safely?", "answer": "Use 'Arc' (Atomic Reference Counted) for shared ownership."}
{"question": "What is the 'Mutex' type in Rust?", "answer": "A mutual exclusion lock for thread-safe data access. Example: let m = Mutex::new(0);"}
{"question": "How do you create a channel for message passing in Rust?", "answer": "Use 'std::sync::mpsc::channel()'. Example: let (tx, rx) = mpsc::channel();"}
{"question": "What is the 'if let' syntax used for?", "answer": "To handle a single case of a 'Option' or 'Result' type."}
{"question": "What is the 'where' clause in Rust?", "answer": "Specifies trait bounds for generic types. Example: fn foo<T: Trait> where T: AnotherTrait { ... }"}
{"question": "How do you create a slice in Rust?", "answer": "Use '[]' with a reference. Example: let s = &arr[1..3];"}
{"question": "What is the 'as_ref' method in Rust?", "answer": "Converts a value to a reference. For example, 'String::as_ref()' returns a '&str'."}
{"question": "What is the 'as_mut' method in Rust?", "answer": "Converts a value to a mutable reference. Example: 'Vec::as_mut()' returns a '&mut Vec'."}
{"question": "How do you use 'match' with enums in Rust?", "answer": "Pattern match each variant. Example: match color { Color::Red => \"red\", _ => \"other\" };"}
{"question": "What is the 'Box::new()' function used for?", "answer": "Allocates a value on the heap. Example: let b = Box::new(5);"}
{"question": "What is the 'Deref' trait in Rust?", "answer": "Allows custom dereferencing behavior. Example: 'impl Deref for MyType { ... }'"}
{"question": "How do you create a new 'Vec' in Rust?", "answer": "Use 'Vec::new()' or the vec! macro. Example: let v = vec![1, 2, 3];"}
{"question": "What is the 'iter()' method in Rust?", "answer": "Returns an iterator over a collection. Example: for item in vec.iter() { ... }"}
{"question": "What is the 'into_iter()' method in Rust?", "answer": "Consumes the collection and returns an iterator. Example: for item in vec.into_iter() { ... }"}
{"question": "What is the 'map' function in Rust?", "answer": "Transforms each element in an iterator. Example: iter.map(|x| x * 2)"}
{"question": "What is the 'filter' function in Rust?", "answer": "Selects elements that satisfy a predicate. Example: iter.filter(|x| x % 2 == 0)"}
{"question": "What is the 'collect()' function in Rust?", "answer": "Converts an iterator into a collection. Example: iter.collect::<Vec<_>>()"}
{"question": "What is the 'Result::ok()' method in Rust?", "answer": "Extracts the 'Ok' value or returns 'None'. Example: let x = result.ok();"}
{"question": "What is the 'Result::err()' method in Rust?", "answer": "Extracts the 'Err' value or returns 'None'. Example: let e = result.err();"}
{"question": "What is the 'Option::unwrap()' method in Rust?", "answer": "Returns the 'Some' value or panics. Example: let x = opt.unwrap();"}
{"question": "What is the 'Option::expect()' method in Rust?", "answer": "Returns the 'Some' value or panics with a message. Example: let x = opt.expect(\"message\")"}
{"question": "What is the 'Arc' type in Rust?", "answer": "Atomic reference-counted pointer for thread-safe shared ownership."}
{"question": "How do you lock a 'Mutex' in Rust?", "answer": "Use 'lock()' which returns a 'MutexGuard'. Example: let guard = mutex.lock().unwrap();"}
{"question": "What is the 'RwLock' type in Rust?", "answer": "A read-write lock that allows multiple readers or a single writer."}
{"question": "How do you create an asynchronous function in Rust?", "answer": "Use 'async fn'. Example: async fn fetch() -> Result<()> { ... }"}
{"question": "What is the 'await' keyword in Rust?", "answer": "Waits for the completion of an async task. Example: let data = fetch().await;"}
{"question": "What is the 'tokio' runtime used for?", "answer": "To run asynchronous code. Example: tokio::runtime::Runtime::new().unwrap().block_on(async { ... })"}
{"question": "How do you handle errors in async functions?", "answer": "Use 'Result' or 'Option' with 'await' and 'match'."}
{"question": "What is the 'Future' trait in Rust?", "answer": "Represents a value that may not be available yet. Async functions return a 'Future'."}
{"question": "What is the 'join' method on a thread in Rust?", "answer": "Waits for the thread to finish. Example: thread.join().unwrap()"}
{"question": "What is the 'thread::yield_now()' function used for?", "answer": "Yields the current thread to the scheduler."}
{"question": "How do you create a thread-safe shared variable?", "answer": "Use 'Arc<Mutex<T>>' for shared ownership and exclusive access."}
{"question": "What is the 'crossbeam' crate used for?", "answer": "Provides concurrency utilities like channels and scoped threads."}
{"question": "What is the 'thread_local!' macro in Rust?", "answer": "Declares a thread-local variable. Example: thread_local! { static X: i32 = 0; }"}
{"question": "What is the 'Send' trait's role in concurrency?", "answer": "Ensures a type can be safely sent between threads."}
{"question": "What is the 'Sync' trait's role in concurrency?", "answer": "Ensures a type can be safely shared between threads."}
{"question": "How do you use 'Arc' with 'Mutex' for thread safety?", "answer": "'Arc<Mutex<T>>' provides shared ownership and exclusive access. Example: let data = Arc::new(Mutex::new(0));"}
{"question": "What is the 'once_cell' crate used for?", "answer": "Provides lazy initialization for values. Example: once_cell::sync::Lazy::new(|| 42)"}
{"question": "What is the 'crossbeam_channel' crate used for?", "answer": "Provides channels for message passing between threads."}
{"question": "How do you use 'thread::scoped' in Rust?", "answer": "Creates a thread with a closure that can borrow from the parent. Example: thread::scoped(|| { ... })"}
{"question": "What is the 'rayon' crate used for?", "answer": "Provides data parallelism for Rust. Example: vec.par_iter().map(|x| x * 2).collect()"}
{"question": "What is the 'std::panic::catch_unwind' function used for?", "answer": "Catches panics in a thread. Example: let result = std::panic::catch_unwind(|| { ... });"}
{"question": "What is the 'std::cell::RefCell' type used for?", "answer": "Allows interior mutability. Example: let c = RefCell::new(0);"}
{"question": "What is the 'std::cell::Cell' type used for?", "answer": "Allows interior mutability without borrowing. Example: let c = Cell::new(0);"}
{"question": "How do you use 'std::sync::Once' in Rust?", "answer": "Ensures a block of code runs once. Example: static INIT: Once = Once::new(); INIT.call_once(|| { ... });"}
{"question": "What is the 'std::sync::Barrier' type used for?", "answer": "Synchronizes multiple threads. Example: let barrier = Barrier::new(3); barrier.wait();"}
{"question": "What is the 'std::sync::Condvar' type used for?", "answer": "Allows threads to wait for a condition. Example: let (lock, cvar) = Condvar::new(); cvar.wait(lock).unwrap();"}
{"question": "What is the 'std::sync::atomic' module used for?", "answer": "Provides atomic types for concurrent access. Example: AtomicUsize::new(0)"}
{"question": "What is the difference between 'let' and 'const' in Rust?", "answer": "'let' declares a variable, which can be mutable. 'const' defines a compile-time constant. Example: `let x = 5; const Y: i32 = 10;`."}
{"question": "How to create a mutable vector in Rust?", "answer": "Use `let mut v = Vec::new();` or `let mut v = vec![1, 2, 3];`."}
{"question": "What are the basic data types in Rust?", "answer": "Primitive types: i32, u32, f64, bool, char. Compound types: arrays, tuples, structs."}
{"question": "How to create a vector with initial values?", "answer": "Use `vec![1, 2, 3]` or `Vec::from([1, 2, 3])`."}
{"question": "What is the purpose of the 'match' expression?", "answer": "It enables pattern matching, ensuring exhaustive checks. Example: `match x { 1 => ..., _ => ... }`."}
{"question": "How to define a function in Rust?", "answer": "Use `fn function_name(parameters) -> return_type { ... }`. Example: `fn add(a: i32, b: i32) -> i32 { a + b }`."}
{"question": "What is the 'Option' type used for?", "answer": "To represent optional values (Some or None). Example: `let x: Option<i32> = Some(5);`."}
{"question": "How to use a 'for' loop in Rust?", "answer": "`for i in 0..5 { ... }` iterates over a range. Use `iter()` for collections."}
{"question": "What is the 'Result' type?", "answer": "Represents success (Ok) or error (Err). Example: `Result<T, E>` for return values."}
{"question": "How to create a tuple in Rust?", "answer": "`let t = (1, 2, 3);` or `let t = (1, \"a\");`."}
{"question": "How to implement a trait for a struct?", "answer": "Use `impl Trait for Struct { ... }`. Example: `impl Display for Point { fn fmt(...) { ... } }`."}
{"question": "What are lifetimes in Rust?", "answer": "They specify how long references are valid. Example: `fn longest<'a>(s1: &'a str, s2: &'a str) -> &'a str`."}
{"question": "How to use macros in Rust?", "answer": "Define with `macro_rules!`, or use built-in macros like `println!`. Example: `macro_rules! my_macro { ($($x:expr),*) => { ... } }`."}
{"question": "What is the 'Box' type?", "answer": "A smart pointer for heap allocation. Example: `let b = Box::new(5);`."}
{"question": "How to use 'if let' for pattern matching?", "answer": "`if let Some(x) = value { ... }` handles a single pattern."}
{"question": "What is the 'Rc' type?", "answer": "A reference-counted pointer for shared ownership. Not thread-safe. Example: `let rc = Rc::new(5);`."}
{"question": "How to use 'match' with enums?", "answer": "`match enum_value { Enum::Variant1 => ..., Enum::Variant2 => ... }`."}
{"question": "What is the 'derive' attribute?", "answer": "Automatically implements traits for a struct. Example: `#[derive(Debug)] struct Point;`."}
{"question": "How to use 'where' clauses in traits?", "answer": "Adds constraints to generic types. Example: `fn foo<T: Trait> where T: AnotherTrait { ... }`."}
{"question": "What is the 'as_ref' method?", "answer": "Converts a value to a reference. Example: `s.as_ref()` for a String."}
{"question": "How to create a new thread?", "answer": "Use `thread::spawn(|| { ... })`. Example: `thread::spawn(|| { println!(\"Hello\"); })`."}
{"question": "What is a 'Mutex' and how is it used?", "answer": "A mutual exclusion lock. Use `mutex.lock().unwrap()` to get a guard. Example: `let m = Mutex::new(5);`."}
{"question": "How to share data between threads?", "answer": "Use `Arc<Mutex<T>>` for thread-safe shared ownership. Example: `Arc::new(Mutex::new(5))`."}
{"question": "What is the 'Arc' type?", "answer": "A thread-safe reference counter. Example: `Arc::new(5)`."}
{"question": "How to use channels for communication?", "answer": "`let (sender, receiver) = channel();` sends and receives values. Example: `sender.send(42)`."}
{"question": "What is 'thread::spawn'?", "answer": "Creates a new thread. Example: `thread::spawn(|| { ... })`."}
{"question": "How to use 'async' and 'await'?", "answer": "Define an async function with `async fn`, then `await` a future. Example: `let result = async_function().await;`."}
{"question": "What is the 'Send' trait?", "answer": "Marks types that can be safely sent between threads. Example: `impl Send for MyType`."}
{"question": "How to use 'join' on a thread?", "answer": "`thread.join().unwrap()` waits for the thread to finish. Example: `let handle = thread::spawn(...); handle.join();`."}
{"question": "What is 'thread_local'?", "answer": "Creates a variable unique to each thread. Example: `thread_local!(static X: RefCell<i32> = RefCell::new(0));`."}
{"question": "What is the difference between 'Vec' and 'VecDeque'?", "answer": "'Vec' is a dynamic array, 'VecDeque' is a double-ended queue. Example: `Vec::new()` vs `VecDeque::new()`."}
{"question": "How to handle panics in Rust?", "answer": "Use `panic!` macro. To catch, use `std::panic::catch_unwind`."}
{"question": "What is Rust's ownership model?", "answer": "Manages memory via ownership rules: one owner, no dangling pointers, moves on assignment."}
{"question": "What are borrowing rules?", "answer": "Either one mutable reference or multiple immutable references at a time."}
{"question": "What is 'move' in closures?", "answer": "Moves captured variables into the closure. Required for threads. Example: `thread::spawn(move || { ... })`."}
{"question": "What is 'thread::scope'?", "answer": "Creates a thread with a scope. Example: `thread::scope(|s| { s.spawn(...); })`."}
{"question": "What is the 'self' keyword in methods?", "answer": "The first parameter of instance methods, representing the object. Example: `fn method(&self) { ... }`."}
{"question": "What is the 'static' keyword?", "answer": "Indicates a reference that lives for the entire program. Example: `&'static str`."}
{"question": "How to use 'if let' with 'Result'?", "answer": "`if let Ok(x) = result { ... }` handles success cases."}
{"question": "What is the 'as' keyword?", "answer": "Used for type casting. Example: `let x: i32 = 5.0 as i32;`."}
{"question": "What is the 'drop' trait?", "answer": "Allows custom cleanup code. Implement `fn drop(&mut self) { ... }`."}
{"question": "What is the 'lifetime' parameter?", "answer": "Specifies how long a reference is valid. Example: `fn foo<'a>(s: &'a str) -> &'a str`."}
{"question": "What is the 'where' clause?", "answer": "Adds constraints to generic types. Example: `fn foo<T: Trait> where T: AnotherTrait { ... }`."}
{"question": "What is 'Box<dyn Trait>'?", "answer": "A trait object for dynamic dispatch. Example: `Box<dyn Debug>`."}
{"question": "What is the 'Copy' trait?", "answer": "Allows values to be copied instead of moved. Example: `#[derive(Copy, Clone)] struct Point`."}
{"question": "How to use 'match' with patterns?", "answer": "`match value { pattern => ... }`. Must cover all cases."}
{"question": "What is the 'Debug' trait?", "answer": "Enables formatting for debugging. Use `#[derive(Debug)]`."}
{"question": "How to share data with 'Arc'?", "answer": "`Arc` provides atomic reference counting. Combine with `Mutex` for thread-safe data."}
{"question": "What is the 'Iterator' trait?", "answer": "Provides `next()` method for iteration. Example: `for item in iter`."}
{"question": "How to use 'into_iter'?", "answer": "Consumes a collection and yields its elements. Example: `vec.into_iter()`."}
{"question": "What is 'RwLock'?", "answer": "A read-write lock allowing multiple readers or one writer. Example: `RwLock::new(5)`."}
{"question": "What is 'thread::yield_now'?", "answer": "Yields the current thread's time slice. Example: `thread::yield_now();`."}
{"question": "What is 'thread::sleep'?", "answer": "Pauses the thread for a duration. Example: `thread::sleep(Duration::from_secs(1))`."}
{"question": "What is 'thread::unpark'?", "answer": "Wakes a parked thread. Example: `handle.unpark()`."}
{"question": "How to use 'thread::park'?", "answer": "Blocks the thread until unparked. Example: `thread::park()`."}
{"question": "What is 'thread::available_parallelism'?", "answer": "Returns the number of logical cores. Example: `thread::available_parallelism().unwrap()`."}
{"question": "What is 'thread::Builder'?", "answer": "Configures thread options. Example: `thread::Builder::new().spawn(...)`."}
{"question": "How to use 'thread::Builder::name'?", "answer": "Sets the thread's name. Example: `thread::Builder::new().name(\"my_thread\")`."}
{"question": "What is 'thread::Builder::stack_size'?", "answer": "Sets the thread's stack size. Example: `thread::Builder::new().stack_size(1024 * 1024)`."}
{"question": "What is 'thread::LocalKey'?", "answer": "Stores thread-local data. Example: `thread_local!(static X: i32 = 0;)`."}
{"question": "How to check if a thread is panicking?", "answer": "Use `thread::panicking()`. Example: `if thread::panicking() { ... }`."}
{"question": "What is 'thread::current'?", "answer": "Returns the current thread's handle. Example: `let id = thread::current().id()`."}
{"question": "What is 'the 'async' function'?", "answer": "A function that returns a future. Example: `async fn async_func() -> i32 { ... }`."}
{"question": "What is 'the 'await' keyword'?", "answer": "Waits for a future to complete. Example: `let result = async_func().await;`."}
{"question": "What is 'the 'Send' trait'?", "answer": "Allows types to be sent between threads. Example: `impl Send for MyType`."}
{"question": "What is 'the 'Sync' trait'?", "answer": "Allows types to be shared between threads. Example: `impl Sync for MyType`."}
{"question": "How to use 'thread::Builder::spawn'?", "answer": "`thread::Builder::new().spawn(|_| { ... }).unwrap()`."}
{"question": "What is 'the 'once_cell' crate'?", "answer": "Provides thread-safe once initialization. Example: `once_cell::sync::OnceLock`."}
{"question": "What is 'the 'crossbeam' crate'?", "answer": "Offers concurrency utilities like channels and scoped threads. Example: `crossbeam::channel::unbounded()`."}
{"question": "How to use 'thread::spawn' with a move closure?", "answer": "Moves variables into the thread. Example: `thread::spawn(move || { x })`."}
{"question": "What is 'the 'Rc' vs 'Arc' difference?", "answer": "'Rc' is non-thread-safe, 'Arc' is thread-safe. Use 'Arc' for shared data across threads."}
{"question": "How to use 'thread::spawn' with a 'Mutex'?", "answer": "Wrap the data in a Mutex. Example: `Arc::new(Mutex::new(5))`."}
{"question": "What is 'the 'Deref' trait'?", "answer": "Allows dereferencing. Example: `impl Deref for MyType { ... }`."}
{"question": "What is 'the 'DerefMut' trait'?", "answer": "Allows mutable dereferencing. Example: `impl DerefMut for MyType { ... }`."}
{"question": "How to use 'thread::Builder::spawn' with a function?", "answer": "Pass a function pointer. Example: `thread::Builder::new().spawn(|| my_func())`."}
{"question": "What is 'the 'Send' and 'Sync' traits'?", "answer": "'Send' allows moving between threads, 'Sync' allows shared access. Both are required for thread safety."}
{"question": "How to use 'thread::Builder::spawn' with 'Box'?", "answer": "Use `Box<dyn FnOnce() + Send>`. Example: `thread::Builder::new().spawn(Box::new(|| { ... }))`."}
{"question": "What is 'the 'thread_local' macro'?", "answer": "Creates a thread-local variable. Example: `thread_local!(static X: i32 = 0;)`."}
{"question": "How to use 'thread::Builder::spawn' with 'Rc'?", "answer": "Not allowed. Use 'Arc' instead. Example: `Arc::new(5)`."}
{"question": "What is 'the 'thread::join' method'?", "answer": "Waits for a thread to finish. Example: `handle.join().unwrap()`."}
{"question": "What is 'the 'thread::park' function'?", "answer": "Blocks the thread until `unpark` is called. Example: `thread::park()`."}
{"question": "How to use 'thread::Builder::spawn' with 'Vec'?", "answer": "Allowed if elements are 'Send'. Example: `thread::spawn(move || { vec })`."}
{"question": "What is 'the 'thread::Builder::spawn' with 'String'?", "answer": "Allowed. Example: `thread::spawn(move || { s })`."}
{"question": "How to use 'thread::Builder::spawn' with 'Mutex'?", "answer": "Wrap in 'Arc'. Example: `Arc::new(Mutex::new(5))`."}
{"question": "What is 'the 'thread::Builder::spawn' with 'RwLock'?", "answer": "Wrap in 'Arc'. Example: `Arc::new(RwLock::new(5))`."}
{"question": "How to use 'thread::Builder::spawn' with 'channel'?", "answer": "Sender is 'Send'. Example: `thread::spawn(move || { sender.send(5) })`."}
{"question": "What is 'the 'thread::Builder::spawn' with 'thread_local'?", "answer": "Possible, but 'thread_local' is thread-specific. Example: `thread_local!(static X: i32 = 0;)`."}
{"question": "What is 'the 'thread::Builder::spawn' with 'Box<dyn FnOnce>'?", "answer": "Required for thread-safe closures. Example: `Box::new(|| { ... })`."}
{"question": "How to use 'thread::Builder::spawn' with 'Box' that's not 'Send'?", "answer": "Not allowed. The 'Box' must be 'Send'. Example: `Box<dyn Send + FnOnce>`."}
{"question": "What is 'the 'thread::Builder::spawn' with 'Rc' that's not 'Send'?", "answer": "Not allowed. 'Rc' is not 'Send'. Use 'Arc' instead."}
{"question": "How to use 'thread::Builder::spawn' with 'Arc'?", "answer": "Allowed. Example: `Arc::new(5)`."}
{"question": "What is the difference between 'let' and 'const' in Rust?", "answer": "'let' declares a variable (mutable by default), while 'const' defines a compile-time constant. 'const' requires a type annotation and is immutable."}
{"question": "How do you declare a mutable variable in Rust?", "answer": "Use 'let mut variable_name = value;'."}
{"question": "What are the basic data types in Rust?", "answer": "Primitive types like i32, u32, f64, bool, char, and compound types like arrays, tuples, and structs."}
{"question": "How do you create a function in Rust?", "answer": "Use 'fn function_name(parameters) -> return_type { ... }'."}
{"question": "What is the purpose of the 'match' expression?", "answer": "To match a value against patterns and execute code based on the matching pattern."}
{"question": "How does Rust handle errors with 'Result'?", "answer": "'Result<T, E>' represents success (Ok(T)) or failure (Err(E)). Use 'match' or '?' to handle it."}
{"question": "What is the 'Option' type used for?", "answer": "To represent optional values: Some(T) or None."}
{"question": "How do you create a struct in Rust?", "answer": "Use 'struct StructName { field: Type };' and instantiate with 'StructName { field: value }'."}
{"question": "What is the 'impl' block for?", "answer": "To define methods and associated functions for a type."}
{"question": "How to create a tuple in Rust?", "answer": "Use parentheses: (value1, value2, ...). Access with .0, .1, etc."}
{"question": "What is a 'lifetime' in Rust?", "answer": "A way to specify how long references are valid, ensuring memory safety."}
{"question": "How to implement a trait for a struct?", "answer": "Use 'impl Trait for Struct { ... }'. Example:\n\n```rust\nimpl MyTrait for MyStruct {}\n```"}
{"question": "What is 'Box<T>' used for?", "answer": "To allocate data on the heap and own it, useful for dynamic dispatch or large data."}
{"question": "How to use a vector ('Vec') in Rust?", "answer": "Initialize with Vec::new() or vec![...]. Use .push() to add elements."}
{"question": "What is 'Rc<T>' for?", "answer": "Reference-counted pointer for shared ownership. Use with 'Rc::new()' and 'Rc::clone()'."}
{"question": "How to handle panics in Rust?", "answer": "Use 'panic!' to crash, or 'unwrap()' which panics on error. Prefer 'expect()' for messages."}
{"question": "What is the 'as' keyword used for?", "answer": "To cast between types. Example: 5 as u32."}
{"question": "How to use a closure in Rust?", "answer": "Define with |params| { ... }. Can capture environment variables."}
{"question": "What is the 'pub' keyword for?", "answer": "To make items (functions, structs, etc.) public for external access."}
{"question": "How to use 'if let' for pattern matching?", "answer": "Matches a single pattern and executes code if it matches. Example:\n\n```rust\nif let Some(x) = value { ... }\n```"}
{"question": "What is the 'self' keyword in methods?", "answer": "Refers to the current instance of a struct, used in method definitions."}
{"question": "How to create a thread in Rust?", "answer": "Use std::thread::spawn. Example:\n\n```rust\nstd::thread::spawn(|| { /* code */ });\n```"}
{"question": "What is 'Arc<T>' in Rust concurrency?", "answer": "Atomic reference-counted pointer for thread-safe shared ownership."}
{"question": "How to share data between threads?", "answer": "Use 'Arc' for shared ownership or 'Mutex' for thread-safe access."}
{"question": "What is a 'Mutex' in Rust?", "answer": "A mutual exclusion lock to synchronize access to data across threads."}
{"question": "How to use 'channel' for thread communication?", "answer": "Use std::sync::mpsc::channel(). Send with .send() and receive with .recv()."}
{"question": "What is 'async' and 'await' in Rust?", "answer": "'async' defines an asynchronous function. 'await' suspends execution until a future resolves."}
{"question": "How to use 'for' loops in Rust?", "answer": "'for item in collection { ... }'. Iterates over elements of an iterator."}
{"question": "What is the 'while' loop syntax?", "answer": "'while condition { ... }'. Executes code while the condition is true."}
{"question": "How to use 'match' with enums?", "answer": "Pattern match on enum variants. Example:\n\n```rust\nmatch value {\n    EnumVariant::A => ..., \n    _ => ..., \n}\n```"}
{"question": "What is the 'use' keyword for?", "answer": "To bring modules, types, or functions into scope. Example: 'use std::collections::HashMap;'."}
{"question": "How to create a custom error type?", "answer": "Define an enum and implement the 'Error' trait. Example:\n\n```rust\n#[derive(Debug)]\nenum MyError { ...\n}\n```"}
{"question": "What is the 'derive' attribute used for?", "answer": "Automatically implements common traits like Debug, Clone, PartialEq."}
{"question": "How to use 'if let' with 'Option'?", "answer": "Check for Some(T) and extract the value. Example:\n\n```rust\nif let Some(x) = opt { ... }\n```"}
{"question": "What is 'RefCell<T>' for?", "answer": "Allows interior mutability with runtime checks. Use .borrow() or .borrow_mut()."}
{"question": "How to handle multiple errors with 'Result'?", "answer": "Use 'Result<T, E>' and propagate errors with '?' or 'map_err()'."}
{"question": "What is the 'loop' keyword for?", "answer": "Creates an infinite loop. Use 'break' to exit."}
{"question": "How to use 'match' with guards?", "answer": "Add 'if condition' after a pattern. Example:\n\n```rust\nmatch x {\n    0..=10 if x % 2 == 0 => ..., \n    _ => ..., \n}\n```"}
{"question": "What is the 'static' keyword in Rust?", "answer": "Specifies a reference that lives for the entire program. Used in trait bounds or function parameters."}
{"question": "How to use 'where' clauses in functions?", "answer": "Add constraints to generic parameters. Example:\n\n```rust\nfn foo<T: Trait> where T: AnotherTrait { ... }\n```"}
{"question": "What is the 'as_ref' method for?", "answer": "Converts a 'Box<T>' to a '&T'. Useful for avoiding ownership transfer."}
{"question": "How to use 'Vec::push' in Rust?", "answer": "Adds an element to the end of a vector. Example: vec.push(42);"}
{"question": "What is the 'panic!' macro used for?", "answer": "Crashes the program with a message. Example: panic!(\"error message\");"}
{"question": "How to use 'assert_eq!' for testing?", "answer": "Checks if two values are equal. Panics if not. Example:\n\n```rust\nassert_eq!(a, b);\n```"}
{"question": "What is the 'Option::is_none()' method?", "answer": "Returns true if the 'Option' is 'None'. Example: if opt.is_none() { ... }"}
{"question": "How to use 'Iterator' traits?", "answer": "Implement 'next()' or use methods like .map(), .filter(), etc."}
{"question": "What is the 'Box::new' function?", "answer": "Allocates a value on the heap. Example: let boxed = Box::new(5);"}
{"question": "How to use 'Rc::clone'?", "answer": "Increments the reference count. Example: let clone = Rc::clone(&rc);"}
{"question": "What is the 'Result::ok()' method?", "answer": "Extracts the 'Ok' value or returns None. Example: result.ok().unwrap();"}
{"question": "How to use 'Vec::len()' in Rust?", "answer": "Returns the number of elements. Example: let len = vec.len();"}
{"question": "What is the 'char' type in Rust?", "answer": "Represents a Unicode scalar value. Example: 'a', 'π', '€'."}
{"question": "How to use 'match' with wildcards?", "answer": "Use '_' to match any value. Example:\n\n```rust\nmatch x { 1 => ..., _ => ... }\n```"}
{"question": "What is the 'fn' keyword for?", "answer": "Declares a function. Example: fn add(a: i32, b: i32) -> i32 { a + b }"}
{"question": "How to use 'while let' for iteration?", "answer": "Loops while a pattern matches. Example:\n\n```rust\nwhile let Some(x) = iter.next() { ... }\n```"}
{"question": "What is the 'as_ref' method for 'Option'?", "answer": "Converts 'Option<T>' to 'Option<&T>'. Example: opt.as_ref().unwrap();"}
{"question": "How to use 'Vec::pop()' in Rust?", "answer": "Removes and returns the last element. Example: let last = vec.pop();"}
{"question": "What is the 'str' type in Rust?", "answer": "A string slice, a reference to UTF-8 data. Use 'String' for owned strings."}
{"question": "How to use 'RefCell::borrow_mut()'?", "answer": "Acquires a mutable reference. Example:\n\n```rust\nlet mut data = refcell.borrow_mut();\n```"}
{"question": "What is the 'Result::err()' method?", "answer": "Extracts the 'Err' value or returns None. Example: result.err().unwrap();"}
{"question": "How to use 'Vec::iter()' in Rust?", "answer": "Returns an iterator over references. Example: for item in vec.iter() { ... }"}
{"question": "What is the 'Option::unwrap()' method?", "answer": "Returns the Some(T) value or panics. Example: let x = opt.unwrap();"}
{"question": "How to use 'Vec::into_iter()' in Rust?", "answer": "Consumes the vector and returns an iterator. Example: for item in vec.into_iter() { ... }"}
{"question": "What is the 'Box::into_raw' function?", "answer": "Converts a Box to a raw pointer. Example: let ptr = Box::into_raw(Box::new(5));"}
{"question": "How to use 'Mutex::lock()' in Rust?", "answer": "Acquires the lock, returns a Guard. Example:\n\n```rust\nlet data = mutex.lock().unwrap();\n```"}
{"question": "What is the 'Arc::clone' method?", "answer": "Increments the reference count. Example: let arc_clone = Arc::clone(&arc);"}
{"question": "How to use 'channel' for message passing?", "answer": "Use std::sync::mpsc::channel(). Send with .send() and receive with .recv()."}
{"question": "What is the 'async' keyword for?", "answer": "Declares an asynchronous function. Example: async fn async_func() { ... }"}
{"question": "How to use 'await' in async functions?", "answer": "Waits for a future to resolve. Example: let result = async_func().await;"}
{"question": "What is the 'Send' trait in Rust?", "answer": "Marks types that can be safely sent between threads."}
{"question": "How to use 'join' on a thread?", "answer": "Call .join() to wait for the thread to finish. Example:\n\n```rust\nthread.join().unwrap();\n```"}
{"question": "What is the 'Copy' trait in Rust?", "answer": "Allows values to be copied instead of moved. Types like i32 implement it by default."}
{"question": "How to use 'match' with enums?", "answer": "Pattern match on variants. Example:\n\n```rust\nmatch result {\n    Ok(val) => ..., \n    Err(e) => ..., \n}\n```"}
{"question": "What is the 'Sized' trait in Rust?", "answer": "Indicates a type's size is known at compile time."}
{"question": "How to use 'Rc::into_inner' in Rust?", "answer": "Returns the inner value if the count is 1. Example: Rc::into_inner(rc).unwrap();"}
{"question": "What is the 'Drop' trait used for?", "answer": "Allows custom cleanup when a value goes out of scope. Implement 'drop()' method."}
{"question": "How to use 'RefCell::try_borrow()'?", "answer": "Attempts to get an immutable reference. Returns a Result. Example:\n\n```rust\nif let Ok(data) = refcell.try_borrow() { ... }\n```"}
{"question": "What is the 'Send' trait in concurrency?", "answer": "Ensures a type can be safely transferred between threads."}
{"question": "How to use 'Arc::try_unwrap' in Rust?", "answer": "Returns the inner value if the count is 1. Example: Arc::try_unwrap(arc).unwrap();"}
{"question": "What is the 'Future' trait in Rust?", "answer": "Represents asynchronous computations. Implement 'poll()' method."}
{"question": "How to use 'Vec::extend' in Rust?", "answer": "Adds elements from an iterator. Example: vec.extend([1, 2, 3].iter());"}
{"question": "What is the 'Option::as_deref' method?", "answer": "Converts 'Option<T>' to 'Option<&T::Target>'. Useful for dereferencing."}
{"question": "How to use 'Vec::resize' in Rust?", "answer": "Changes the length of the vector. Example: vec.resize(10, 0);"}
{"question": "What is the 'str' type's relation to 'String'?", "answer": "'str' is a slice; 'String' is an owned, growable string."}
{"question": "How to use 'Vec::split_at' in Rust?", "answer": "Splits the vector into two at a given index. Example: let (left, right) = vec.split_at(3);"}
{"question": "What is the 'Box::leak' function?", "answer": "Converts a Box to a &'a T, leaking the memory. Use with caution."}
{"question": "How to use 'Vec::reverse' in Rust?", "answer": "Reverses the elements in place. Example: vec.reverse();"}
{"question": "What is the 'Option::as_ref' method?", "answer": "Converts 'Option<T>' to 'Option<&T>'. Example: opt.as_ref().unwrap();"}
{"question": "How to use 'Vec::retain' in Rust?", "answer": "Keeps elements that satisfy a predicate. Example: vec.retain(|x| *x > 0);"}
{"question": "What is the 'Send' trait's purpose?", "answer": "Ensures a type can be sent between threads safely."}
{"question": "How to use 'Vec::drain' in Rust?", "answer": "Removes and returns elements. Example: let drained = vec.drain(0..2);"}
{"question": "What is the 'Fn' trait in Rust?", "answer": "A closure trait. 'FnOnce', 'FnMut', 'Fn' for different capture modes."}
{"question": "How to use 'Vec::dedup' in Rust?", "answer": "Removes consecutive duplicates. Example: vec.dedup();"}
{"question": "What is the 'Result::map' method?", "answer": "Transforms the Ok value. Example: result.map(|x| x * 2)."}
{"question": "How to use 'Vec::from_iter' in Rust?", "answer": "Creates a vector from an iterator. Example: Vec::from_iter(0..5);"}
{"question": "What is the 'Option::map' method?", "answer": "Transforms Some(T) into Some(U). Example: opt.map(|x| x + 1)."}
{"question": "How to use 'Vec::sort' in Rust?", "answer": "Sorts the vector in place. Example: vec.sort();"}
{"question": "What is the 'Result::and' method?", "answer": "Chains operations. Returns Ok if both are Ok, else the first Err."}
{"question": "How to use 'Vec::split_off' in Rust?", "answer": "Splits the vector at a given index, returning the second part. Example: let right = vec.split_off(3);"}
{"question": "What is the 'Option::and' method?", "answer": "Chains operations. Returns Some if both are Some, else None."}
{"question": "How to use 'Vec::insert' in Rust?", "answer": "Inserts an element at a position. Example: vec.insert(0, 42);"}
{"question": "What is the 'Result::or' method?", "answer": "Returns the first Ok, or the second Result if the first is Err."}
{"question": "How to use 'Vec::remove' in Rust?", "answer": "Removes and returns the element at an index. Example: let val = vec.remove(0);"}
{"question": "How do you print to the console in Rust?", "answer": "Use the `println!` macro."}
{"question": "What is the default mutability of variables in Rust?", "answer": "Variables are immutable by default. Use `let mut` to make them mutable."}
{"question": "What data types are available for integers in Rust?", "answer": "`i8`, `i16`, `i32`, `i64`, `u8`, `u16`, `u32`, `u64`, `isize`, `usize`."}
{"question": "How do you create a constant in Rust?", "answer": "Use `const` or `static` with a type annotation."}
{"question": "What is the difference between `let` and `const`?", "answer": "`let` creates a variable, `const` defines a compile-time constant."}
{"question": "How to define a function in Rust?", "answer": "`fn function_name(parameters) -> return_type { body }`."}
{"question": "What is a closure in Rust?", "answer": "An anonymous function that can capture its environment."}
{"question": "How to handle errors in Rust?", "answer": "Use `Result` and `Option` types with `match` or `if let`."}
{"question": "What is the purpose of `match`?", "answer": "To handle multiple possible values with pattern matching."}
{"question": "How to create a vector in Rust?", "answer": "`let v = vec![1, 2, 3];` or `Vec::new()`."}
{"question": "What is the `?` operator used for?", "answer": "To propagate errors in `Result` or `Option` values."}
{"question": "How to define a struct with named fields?", "answer": "`struct Point { x: i32, y: i32 }`."}
{"question": "What is the `Rc<T>` type used for?", "answer": "To enable multiple ownership of a value via reference counting."}
{"question": "How to implement a trait for a struct?", "answer": "Use `impl Trait for Struct { ... }`."}
{"question": "What is the `Box<T>` type used for?", "answer": "To allocate values on the heap."}
{"question": "How to create a new thread in Rust?", "answer": "Use `std::thread::spawn(|| { /* code */ })`."}
{"question": "What is the `Send` trait?", "answer": "Marks a type as safe to send between threads."}
{"question": "How to use a `Mutex` in Rust?", "answer": "`let m = Mutex::new(data); let guard = m.lock();`"}
{"question": "What is `Arc<T>` and when is it used?", "answer": "`Arc<T>` provides thread-safe shared ownership via reference counting."}
{"question": "How to handle panics in Rust?", "answer": "Use `panic!` macro or `catch_unwind` for recovery."}
{"question": "What is the `impl` block for?", "answer": "To define methods and trait implementations for a type."}
{"question": "How to create an array with fixed size?", "answer": "`let a = [1, 2, 3];` or `let a = [0; 5];` for zeros."}
{"question": "What is the `Option<T>` enum used for?", "answer": "To represent optional values (Some(T) or None)."}
{"question": "How to use a `while` loop in Rust?", "answer": "`while condition { /* code */ }`."}
{"question": "What is the `use` keyword for?", "answer": "To bring modules, types, or functions into scope."}
{"question": "How to create a tuple in Rust?", "answer": "`let t = (1, 2);` or `let t = (1, 2, 3);`."}
{"question": "What is the `Result<T, E>` type?", "answer": "Represents success (Ok(T)) or error (Err(E))."}
{"question": "How to define a function with multiple parameters?", "answer": "`fn add(a: i32, b: i32) -> i32 { a + b }`."}
{"question": "What is the `?` operator's role in `async` functions?", "answer": "Propagates `Result` errors in `async` functions."}
{"question": "How to use a `for` loop in Rust?", "answer": "`for item in collection { /* code */ }`."}
{"question": "What is the `pub` keyword used for?", "answer": "To make items public (visible outside the module)."}
{"question": "How to handle integer overflow in Rust?", "answer": "Use `wrapping_add`, `checked_add`, or `overflowing_add`."}
{"question": "What is the `as` keyword used for?", "answer": "For type casting, e.g., `x as u8`."}
{"question": "How to create a slice in Rust?", "answer": "`&array[start..end]` or `&slice[..]`."}
{"question": "What is the `match` arm syntax?", "answer": "`pattern => expression`."}
{"question": "How to use the `if let` construct?", "answer": "To handle a single case of an `Option` or `Result`."}
{"question": "What is the `loop` keyword used for?", "answer": "To create an infinite loop."}
{"question": "How to use the `where` clause in generics?", "answer": "To specify trait bounds, e.g., `fn foo<T: Trait> where T: OtherTrait`."}
{"question": "What is the `RefCell<T>` type?", "answer": "Allows for interior mutability with runtime checks."}
{"question": "How to use the `?` operator with `Result`?", "answer": "`fn main() -> Result<()> { ... }`."}
{"question": "What is the `Rust` ownership system?", "answer": "A set of rules that govern how memory is managed."}
{"question": "How to create a new `Vec` with capacity?", "answer": "`Vec::with_capacity(10)`."}
{"question": "What is the `lifetime` system in Rust?", "answer": "Ensures references are valid for the correct scope."}
{"question": "How to use the `format!` macro?", "answer": "`let s = format!(\"Hello, {}\", name);`."}
{"question": "What is the `#[derive(Debug)]` attribute?", "answer": "Adds `Debug` trait implementation automatically."}
{"question": "How to use `match` with `Option`?", "answer": "`match opt { Some(x) => x, None => 0 }`."}
{"question": "What is the `Box` type used for?", "answer": "For heap allocation and boxing values."}
{"question": "How to use `Rc` with `RefCell`?", "answer": "`Rc<RefCell<T>>` for shared mutability."}
{"question": "What is the `Send` trait?", "answer": "Marks a type as safe to send between threads."}
{"question": "How to use `Arc` for thread-safe sharing?", "answer": "`Arc::new(data)` to share ownership across threads."}
{"question": "What is the `thread::spawn` function?", "answer": "Creates a new thread and returns a `JoinHandle`."}
{"question": "How to use `Mutex` for shared state?", "answer": "`Mutex::new(data).lock().unwrap()` to access."}
{"question": "What is the `Rust` `panic!` macro?", "answer": "Causes the current thread to panic and unwind."}
{"question": "How to use `while let` for pattern matching?", "answer": "`while let Some(x) = iter.next() { /* code */ }`."}
{"question": "What is the `Rust` `const` keyword?", "answer": "Declares a compile-time constant."}
{"question": "How to use `match` with `Result`?", "answer": "`match res { Ok(x) => x, Err(e) => e }`."}
{"question": "What is the `Rust` `pub` keyword?", "answer": "Makes a function, struct, or module public."}
{"question": "How to use `Rc` for shared ownership?", "answer": "`Rc::new(data)` to share ownership across scopes."}
{"question": "What is the `Rust` `as` operator?", "answer": "Converts a value from one type to another."}
{"question": "How to use `Rust` `if let`?", "answer": "`if let Some(x) = value { /* code */ }`."}
{"question": "What is the `Rust` `loop` keyword?", "answer": "Creates an infinite loop that can be broken with `break`."}
{"question": "How to use `Rust` `while` loops?", "answer": "`while condition { /* code */ }`."}
{"question": "What is the `Rust` `for` loop?", "answer": "Iterates over elements in a collection."}
{"question": "How to use `Rust` `match` arms?", "answer": "`pattern => expression` for each case."}
{"question": "What is the `Rust` `Option` enum?", "answer": "Represents optional values (Some(T) or None)."}
{"question": "How to use `Rust` `Result`?", "answer": "`Ok(T)` for success, `Err(E)` for errors."}
{"question": "What is the `Rust` `Box` type?", "answer": "Allocates a value on the heap."}
{"question": "How to use `Rust` `Arc`?", "answer": "`Arc::new(data)` for thread-safe shared ownership."}
{"question": "What is the `Rust` `Rc` type?", "answer": "Provides reference-counted shared ownership."}
{"question": "How to use `Rust` `RefCell`?", "answer": "For interior mutability with runtime borrow checking."}
{"question": "What is the `Rust` `Send` trait?", "answer": "Indicates a type can be safely sent between threads."}
{"question": "How to use `Rust` `Sync` trait?", "answer": "Marks a type as safe to share between threads."}
{"question": "What is the `Rust` `thread::spawn` function?", "answer": "Spawns a new thread and returns a `JoinHandle`."}
{"question": "How to use `Rust` `Mutex`?", "answer": "`Mutex::new(data).lock().unwrap()` to access."}
{"question": "What is the difference between let and const in Rust?", "answer": "`let` declares a variable with mutable or immutable binding, while `const` defines a compile-time constant. Example: `let x = 5;` vs `const Y: i32 = 10;`."}
{"question": "How do you declare a mutable variable?", "answer": "Use `let mut variable_name = value;` to declare a mutable variable."}
{"question": "What are the basic integer types in Rust?", "answer": "Rust has `i8`, `i16`, `i32`, `i64`, `i128` (signed) and `u8`, `u16`, `u32`, `u64`, `u128` (unsigned)."}
{"question": "What is Rust's ownership system?", "answer": "Rust's ownership system manages memory via rules: each value has a single owner, ownership transfers on assignment, and values are dropped when their owner goes out of scope."}
{"question": "What is the purpose of the 'mut' keyword?", "answer": "It makes a variable's value mutable. Example: `let mut x = 5; x = 6;`."}
{"question": "How to create a struct in Rust?", "answer": "Use `struct` keyword: `struct Point { x: i32, y: i32 }`."}
{"question": "What is a tuple struct?", "answer": "A struct with unnamed fields: `struct Color(u8, u8, u8);`."}
{"question": "How to define an enum?", "answer": "Use `enum` keyword: `enum Direction { Up, Down, Left, Right }`."}
{"question": "What is the 'Option' type?", "answer": "`Option<T>` represents a value that may be `None` or `Some(T)`."}
{"question": "What is the 'Result' type?", "answer": "`Result<T, E>` represents success (`Ok(T)`) or error (`Err(E)`)."}
{"question": "How to implement a trait for a struct?", "answer": "Use `impl Trait for Struct` block: `impl MyTrait for Point { ... }`."}
{"question": "What is a lifetime parameter?", "answer": "A parameter that specifies how long references are valid, e.g., `fn foo<'a>(x: &'a i32) -> &'a i32`."}
{"question": "How to use generics in a function?", "answer": "Add type parameters in angle brackets: `fn max<T: std::cmp::PartialOrd>(a: T, b: T) -> T`."}
{"question": "What is the 'match' expression used for?", "answer": "To match values against patterns and execute code based on the match."}
{"question": "How to handle errors with 'Result'?", "answer": "Use `?` to propagate errors or `match` to handle them explicitly."}
{"question": "What is the 'use' keyword for?", "answer": "To bring modules or items into scope: `use std::collections::HashMap;`."}
{"question": "How to create a module?", "answer": "Use `mod` keyword: `mod my_module;` and define it in a separate file or block."}
{"question": "What is the 'pub' keyword?", "answer": "Marks items as public, allowing access from other modules."}
{"question": "How to use 'self' in a module?", "answer": "`self` refers to the current module. Example: `use self::my_module::MyStruct;`."}
{"question": "What is the 'as' keyword in 'use'?", "answer": "Renames an imported item: `use std::collections::HashMap as HM;`."}
{"question": "How to spawn a thread?", "answer": "Use `std::thread::spawn(|| { ... })` to create a new thread."}
{"question": "What is the 'Send' trait?", "answer": "Indicates a type can be safely sent between threads. Required for thread-safe data."}
{"question": "What is the 'Sync' trait?", "answer": "Allows shared access between threads. Types implementing `Sync` can be safely referenced from multiple threads."}
{"question": "How to share data between threads?", "answer": "Use `Arc<T>` (atomic reference count) for shared ownership across threads."}
{"question": "What is a 'Mutex'?", "answer": "A mutual exclusion lock that ensures only one thread can access data at a time."}
{"question": "How to use 'Arc'?", "answer": "Wrap data in `Arc::new(...)` and clone it for shared access across threads."}
{"question": "What is the 'join' method?", "answer": "Returns a thread's result after it completes: `thread.join().unwrap()`."}
{"question": "How to pass data to a thread?", "answer": "Move data into the thread's closure: `std::thread::spawn(move || { ... })`."}
{"question": "What is 'thread::scope'?", "answer": "Creates a scoped thread that borrows data from the current thread."}
{"question": "What is the 'async' keyword?", "answer": "Declares an async function or block that can be awaited."}
{"question": "How to use 'await'?", "answer": "Use `await` on a `Future` to pause execution until it completes."}
{"question": "What is the 'Future' trait?", "answer": "A trait for types that can be awaited, representing asynchronous computations."}
{"question": "How to create an async function?", "answer": "Use `async fn` syntax: `async fn fetch_data() -> Result<_, _> { ... }`."}
{"question": "What is 'tokio' used for?", "answer": "A runtime for asynchronous Rust programs, managing async tasks and I/O."}
{"question": "How to use channels in threads?", "answer": "Use `std::sync::mpsc::channel()` to create a channel for sending and receiving values."}
{"question": "What is 'mpsc' channel?", "answer": "Multiple producer, single consumer channel for thread communication."}
{"question": "What is 'RwLock'?", "answer": "A read-write lock that allows multiple readers or one writer at a time."}
{"question": "How to use 'RwLock'?", "answer": "Wrap data in `RwLock::new(...)` and use `read()` or `write()` methods."}
{"question": "What is 'thread_local!' macro?", "answer": "Declares a thread-local variable, accessible only in the thread it was created."}
{"question": "How to handle pattern matching?", "answer": "Use `match` with patterns: `match value { Pattern => ... }`."}
{"question": "What is the 'if let' construct?", "answer": "Simplifies matching a single pattern: `if let Some(x) = value { ... }`."}
{"question": "What is the 'where' clause in generics?", "answer": "Specifies trait bounds for generic parameters: `fn foo<T: Trait + Clone>()` vs `fn foo<T>(...) where T: Trait`."}
{"question": "How to use 'impl Trait'?", "answer": "Returns a type that implements a trait without naming it: `fn get_value() -> impl Iterator<Item = i32>`."}
{"question": "What is the 'derive' attribute?", "answer": "Automatically implements common traits like `Debug`, `Clone`, or `Copy`: `#[derive(Debug)] struct Point;`."}
{"question": "How to implement a trait for multiple types?", "answer": "Use `impl Trait for Type` blocks or `where` clauses for generic types."}
{"question": "What is 'as_ref' method?", "answer": "Converts a type into a reference: `Vec<T>.as_ref()` returns `&[T]`."}
{"question": "What is 'match' arm?", "answer": "Each pattern and code block in a `match` expression is a arm."}
{"question": "How to use 'panic!' macro?", "answer": "Causes a runtime panic with a message: `panic!(\"Error message\");`."}
{"question": "What is 'Option::unwrap'?", "answer": "Returns the value inside `Some` or panics if `None`."}
{"question": "How to handle 'None' in 'Option'?", "answer": "Use `match` or `if let` to handle the absence of a value."}
{"question": "What is 'Result::ok'?", "answer": "Converts `Ok(T)` to `Some(T)` or `None` for `Err(E)`."}
{"question": "How to use 'Box' in Rust?", "answer": "Allocates data on the heap: `let b = Box::new(5);`."}
{"question": "What is 'Deref' trait?", "answer": "Allows a type to be treated as a reference: `*b` dereferences a `Box`."}
{"question": "How to implement 'Deref'?", "answer": "Define `deref()` method in `impl Deref` block for a type."}
{"question": "What is 'Drop' trait?", "answer": "Allows custom cleanup when a value goes out of scope: `impl Drop for MyStruct { fn drop(&mut self) { ... } }`."}
{"question": "What is 'Copy' trait?", "answer": "Makes a type copyable instead of movable. Required for types that should be copied on assignment."}
{"question": "How to use 'Copy' trait?", "answer": "Derive it or implement it manually: `#[derive(Copy, Clone)] struct Point;`."}
{"question": "What is 'Clone' trait?", "answer": "Provides a `clone()` method to create deep copies of a type."}
{"question": "How to use 'match' with enums?", "answer": "Pattern match on variants: `match color { Color::Red => ... }`."}
{"question": "What is 'Box::new'?", "answer": "Allocates a value on the heap and returns a `Box<T>`."}
{"question": "How to use 'Box' for trait objects?", "answer": "`Box<dyn Trait>` allows dynamic dispatch for trait methods."}
{"question": "What is 'lifetime elision'?", "answer": "Rust's rules to infer lifetimes in function parameters. Common in simple cases."}
{"question": "How to use 'thread::sleep'?", "answer": "`std::thread::sleep(std::time::Duration::from_secs(1))` pauses the current thread."}
{"question": "What is 'Arc<Mutex<T>>'?", "answer": "Combines thread-safe reference counting (`Arc`) with mutual exclusion (`Mutex`)."}
{"question": "How to use 'RwLock' for shared access?", "answer": "`read()` for shared access, `write()` for exclusive access."}
{"question": "What is 'once_cell' crate?", "answer": "Provides thread-safe lazy initialization with `OnceCell`."}
{"question": "How to use 'OnceCell'?", "answer": "`OnceCell::new().set(value)` initializes once, `get()` retrieves it."}
{"question": "What is 'thread_local!'?", "answer": "Declares a variable that is unique per thread, accessible via `with()`."}
{"question": "How to use 'thread_local!'?", "answer": "`thread_local! { static X: i32 = 5; }` defines a thread-local variable."}
{"question": "What is 'async/await' syntax?", "answer": "Simplifies asynchronous code by pausing execution until a `Future` completes."}
{"question": "How to create an async block?", "answer": "Use `async { ... }` to create a `Future` that can be awaited."}
{"question": "What is 'Future::poll'?", "answer": "The method that drives a `Future` to completion, used internally by `await`."}
{"question": "How to use 'join' with async?", "answer": "`tokio::spawn(async { ... }).await` waits for the async task to finish."}
{"question": "What is 'tokio::spawn'?", "answer": "Spawns an asynchronous task on the Tokio runtime."}
{"question": "How to use 'channel' in async?", "answer": "`tokio::sync::mpsc::channel()` creates async-safe channels for communication."}
{"question": "What is 'MutexGuard'?", "answer": "A guard returned by `Mutex::lock()`, which is dropped when the scope ends."}
{"question": "How to use 'RwLockReadGuard'?", "answer": "`let guard = rwlock.read().unwrap();` allows shared access to data."}
{"question": "What is 'RwLockWriteGuard'?", "answer": "`let guard = rwlock.write().unwrap();` provides exclusive access to data."}
{"question": "How to use 'Arc' with 'Mutex'?", "answer": "`Arc<Mutex<T>>` allows shared ownership and thread-safe access."}
{"question": "What is 'thread::available_parallelism'?", "answer": "Returns the number of logical cores available for parallelism."}
{"question": "How to use 'thread::Builder'?", "answer": "Customizes thread creation: `thread::Builder::new().spawn(|| { ... })`."}
{"question": "What is 'thread::current'?", "answer": "Returns the current thread's handle."}
{"question": "How to use 'thread::yield_now'?", "answer": "Yields the current thread's time slice to the scheduler."}
{"question": "What is 'thread::panicking'?", "answer": "Checks if the current thread is in a panic."}
{"question": "How to use 'thread::unpark'?", "answer": "Wakes a thread that was parked with `thread::park()`. Requires a `JoinHandle`."}
{"question": "What is 'thread::park_timeout'?", "answer": "Parks the thread until a timeout or `unpark()` is called."}
{"question": "How to use 'thread::scoped'?", "answer": "Creates a thread that borrows data from the current scope: `thread::scope(|s| { s.spawn(|| { ... }) })`."}
{"question": "What is 'thread::scoped' used for?", "answer": "To create threads that borrow data from the current stack frame."}
{"question": "How to use 'thread::scoped' with data?", "answer": "Pass a closure to `thread::scope` that borrows data from the parent thread."}
{"question": "What is 'thread::spawn' for?", "answer": "Spawns a new thread to run a closure."}
{"question": "How to use 'thread::spawn' with move?", "answer": "Move ownership of variables into the thread: `thread::spawn(move || { ... })`."}
{"question": "What is 'thread::join' for?", "answer": "Waits for a thread to finish and returns its result."}
{"question": "How to use 'thread::join' with a thread?", "answer": "Call `thread.join()` on a `JoinHandle` to wait for completion."}
{"question": "What is 'thread::local'?", "answer": "Declares a thread-local variable, accessible only in the thread it was created."}
{"question": "How to use 'thread::local'?", "answer": "`thread_local! { static X: i32 = 5; }` defines a thread-local variable."}
{"question": "What is the difference between 'let' and 'const' in Rust?", "answer": "'let' declares a variable, while 'const' defines a constant. Constants are evaluated at compile-time and must have a type annotation. Example: ```rust\nlet x = 5;\nconst Y: i32 = 10;\n```"}
{"question": "How do you create a new thread in Rust?", "answer": "Use std::thread::spawn. Example: ```rust\nthread::spawn(|| {\n    println!(\"Hello\");\n}).join();\n```"}
{"question": "What is a 'Mutex' in Rust?", "answer": "A 'Mutex' (mutual exclusion) allows safe shared mutable access across threads. Use 'lock()' to acquire the guard. Example: ```rust\nuse std::sync::{Arc, Mutex};\nlet data = Arc::new(Mutex::new(0));\n```"}
{"question": "What is the purpose of 'match' in Rust?", "answer": "'match' is used for pattern matching. It ensures exhaustive checks and deconstructs values. Example: ```rust\nmatch value {\n    1 => println!(\"One\"),\n    _ => println!(\"Other\"),\n}\n```"}
{"question": "How does Rust handle memory safety without garbage collection?", "answer": "Rust uses ownership and borrowing rules. The compiler enforces strict rules for memory management at compile-time."}
{"question": "What is the 'Option' type used for?", "answer": "'Option' represents values that may be absent. It has variants 'Some(T)' and 'None'. Example: ```rust\nlet x: Option<i32> = Some(5);\n```"}
{"question": "What is the 'Result' type in Rust?", "answer": "'Result' is used for error handling, with 'Ok(T)' for success and 'Err(E)' for failure. Example: ```rust\nlet res: Result<i32, &str> = Ok(42);\n```"}
{"question": "How do you define a struct in Rust?", "answer": "Use 'struct' keyword. Example: ```rust\nstruct Point { x: i32, y: i32 }\n```"}
{"question": "What is a 'trait' in Rust?", "answer": "A 'trait' defines shared behavior. Example: ```rust\ntrait Animal { fn speak(&self); }\n```"}
{"question": "How do you make a struct public in Rust?", "answer": "Use 'pub' before the struct definition. Example: ```rust\npub struct User { name: String }\n```"}
{"question": "What is the 'Arc' type used for?", "answer": "'Arc' (Atomic Reference Counted) allows shared ownership across threads. Example: ```rust\nuse std::sync::Arc;\nlet data = Arc::new(5);\n```"}
{"question": "What is the 'Send' trait in Rust?", "answer": "'Send' indicates a type can be safely transferred between threads. Most types implement it by default."}
{"question": "How do you handle panics in Rust?", "answer": "Use 'panic!' to trigger a panic. Handle with 'catch_unwind' or 'unwrap' for recovery. Example: ```rust\nlet result = std::panic::catch_unwind(|| {\n    panic!(\"error\");\n});\n```"}
{"question": "What is the 'lifetime' system in Rust?", "answer": "Lifetimes ensure references are valid for their usage. They are annotated with ' as in 'fn foo<'a>(x: &'a i32) -> &'a i32'."}
{"question": "How do you create a vector in Rust?", "answer": "Use Vec::new() or the vec! macro. Example: ```rust\nlet v = vec![1, 2, 3];\n```"}
{"question": "What is the 'as' keyword used for in Rust?", "answer": "'as' converts between types. Example: ```rust\nlet x: i32 = 5 as i32;\n```"}
{"question": "How do you implement a trait for a type?", "answer": "Use 'impl Trait for Type'. Example: ```rust\nimpl Animal for Dog { fn speak(&self) { println!(\"Woof\"); }\n```"}
{"question": "What is the 'self' keyword in Rust methods?", "answer": "'self' refers to the instance of the type. 'self' consumes the value, '&self' borrows it."}
{"question": "How do you use a closure in Rust?", "answer": "Define with |args| { body }. Example: ```rust\nlet add = |a: i32, b: i32| a + b;\n```"}
{"question": "What is the 'use' keyword for?", "answer": "'use' brings items into scope. Example: ```rust\nuse std::collections::HashMap;\n```"}
{"question": "How do you create a slice in Rust?", "answer": "Use [start..end]. Example: ```rust\nlet slice = &vec![1,2,3][1..2];\n```"}
{"question": "What is the 'Box' type used for?", "answer": "'Box' provides heap allocation. Example: ```rust\nlet b = Box::new(5);\n```"}
{"question": "How do you handle multiple errors in Rust?", "answer": "Use 'Result<T, E>' with 'map_err' or 'and_then' for chaining. Example: ```rust\nresult.map_err(|e| e.to_string())\n```"}
{"question": "What is the 'Rust' borrow checker?", "answer": "The borrow checker enforces borrowing rules at compile-time to prevent data races."}
{"question": "How do you define a function in Rust?", "answer": "Use 'fn' keyword. Example: ```rust\nfn add(a: i32, b: i32) -> i32 { a + b }\n```"}
{"question": "What is the 'impl' block for?", "answer": "'impl' defines methods for a type. Example: ```rust\nimpl Point {\n    fn new(x: i32, y: i32) -> Self { Self { x, y } }\n}\n```"}
{"question": "What is the 'panic!' macro used for?", "answer": "'panic!' triggers a runtime panic. Example: ```rust\npanic!(\"Something went wrong\");\n```"}
{"question": "How do you create an empty vector?", "answer": "Use Vec::new() or vec![]. Example: ```rust\nlet v: Vec<i32> = Vec::new();\n```"}
{"question": "What is the 'lifetime' parameter in function signatures?", "answer": "It specifies how long references are valid. Example: ```rust\nfn longest<'a>(s1: &'a str, s2: &'a str) -> &'a str\n```"}
{"question": "How do you use 'if let' in Rust?", "answer": "'if let' matches a single pattern. Example: ```rust\nif let Some(x) = value { /* handle Some */ }\n```"}
{"question": "What is the 'as_ref' method used for?", "answer": "'as_ref' converts a Box<T> to a &T. Example: ```rust\nlet s = Box::new(\"hello\");\nlet slice = s.as_ref();\n```"}
{"question": "How do you create a thread-safe shared variable?", "answer": "Use Arc<Mutex<T>> for shared mutable access. Example: ```rust\nlet data = Arc::new(Mutex::new(0));\n```"}
{"question": "What is the 'drop' trait used for?", "answer": "'drop' allows custom cleanup when a value goes out of scope. Example: ```rust\nimpl Drop for MyStruct { fn drop(&mut self) { /* cleanup */ }\n```"}
{"question": "How do you create a tuple in Rust?", "answer": "Use parentheses. Example: ```rust\nlet t = (1, \"two\");\n```"}
{"question": "What is the 'match' arm syntax?", "answer": "Each arm is pattern => expression. Example: ```rust\nmatch x {\n    1 => \"one\",\n    _ => \"other\",\n}\n```"}
{"question": "How do you use 'while let' in Rust?", "answer": "'while let' loops while a pattern matches. Example: ```rust\nwhile let Some(x) = iter.next() { /* process x */ }\n```"}
{"question": "What is the 'pub use' statement for?", "answer": "'pub use' re-exports items from another module. Example: ```rust\npub use crate::my_module::MyType;\n```"}
{"question": "How do you create a static variable in Rust?", "answer": "Use 'static' keyword. Example: ```rust\nstatic COUNT: i32 = 0;\n```"}
{"question": "What is the 'ref' keyword in pattern matching?", "answer": "'ref' creates a reference to a value in a pattern. Example: ```rust\nmatch x {\n    ref r => println!(\"Reference: {:p}\", r),\n}\n```"}
{"question": "How do you use 'match' with enums?", "answer": "Match on enum variants. Example: ```rust\nenum Message { Quit, Move { x: i32, y: i32 } }\nmatch msg {\n    Message::Quit => panic!(),\n    Message::Move { x, y } => println!(\"Move to ({}, {})\", x, y),\n}\n```"}
{"question": "What is the 'lifetime' elision in Rust?", "answer": "Compiler infers lifetimes when they are unambiguous. Example: ```rust\nfn longest(s1: &str, s2: &str) -> &str\n```"}
{"question": "How do you create a thread in Rust?", "answer": "Use std::thread::spawn. Example: ```rust\nthread::spawn(|| { /* code */ });\n```"}
{"question": "What is the 'as_str' method for?", "answer": "'as_str' converts a String to a &str. Example: ```rust\nlet s = String::from(\"hello\");\nlet slice = s.as_str();\n```"}
{"question": "How do you handle multiple threads in Rust?", "answer": "Use 'join()' on a JoinHandle. Example: ```rust\nlet handle = thread::spawn(|| { 42 });\nhandle.join().unwrap();\n```"}
{"question": "What is the 'Box<dyn Trait>' pattern?", "answer": "'Box<dyn Trait>' allows dynamic dispatch. Example: ```rust\nlet b: Box<dyn Animal> = Box::new(Dog);\n```"}
{"question": "How do you define a constant in Rust?", "answer": "Use 'const' keyword. Example: ```rust\nconst PI: f64 = 3.14;\n```"}
{"question": "What is the 'lifetime' parameter in structs?", "answer": "It specifies the lifetime of references in a struct. Example: ```rust\nstruct Ref<'a> { data: &'a i32 }\n```"}
{"question": "How do you create a slice from a vector?", "answer": "Use &vec[start..end]. Example: ```rust\nlet v = vec![1,2,3];\nlet slice = &v[1..2];\n```"}
{"question": "What is the 'Option::unwrap' method?", "answer": "'unwrap' retrieves the value or panics. Example: ```rust\nlet x = Some(5).unwrap();\n```"}
{"question": "How do you use 'as' for type conversion?", "answer": "'as' converts types explicitly. Example: ```rust\nlet x: i32 = 5.0 as i32;\n```"}
{"question": "What is the 'Result::ok' method?", "answer": "'ok' converts Result to Option. Example: ```rust\nlet x = Ok(5).ok();\n```"}
{"question": "How do you create a reference to a variable?", "answer": "Use & before the variable. Example: ```rust\nlet x = 5;\nlet r = &x;\n```"}
{"question": "What is the 'Rust' 'move' keyword in closures?", "answer": "'move' forces the closure to take ownership of captured variables. Example: ```rust\nthread::spawn(move || { /* code */ });\n```"}
{"question": "How do you use 'if let' with Option?", "answer": "'if let' checks for Some. Example: ```rust\nif let Some(x) = opt { /* handle Some */ }\n```"}
{"question": "What is the 'Rust' 'ref mut' keyword?", "answer": "'ref mut' creates a mutable reference in a pattern. Example: ```rust\nmatch x {\n    ref mut r => *r = 5,\n}\n```"}
{"question": "How do you create a new String in Rust?", "answer": "Use String::new() or String::from. Example: ```rust\nlet s = String::from(\"hello\");\n```"}
{"question": "What is the 'Rust' 'as' keyword for?", "answer": "'as' is used for type casting. Example: ```rust\nlet x: u8 = 255 as u8;\n```"}
{"question": "How do you handle errors with 'Result' in Rust?", "answer": "Use 'match' or 'and_then' to handle Ok/Err. Example: ```rust\nresult.and_then(|x| Ok(x * 2))\n```"}
{"question": "What is the 'Rust' 'self' keyword in methods?", "answer": "'self' is the first parameter of methods, representing the instance. Example: ```rust\nfn greet(self) { /* uses self */ }\n```"}
{"question": "How do you create a slice of a string?", "answer": "Use &s[start..end]. Example: ```rust\nlet s = String::from(\"hello\");\nlet slice = &s[1..3];\n```"}
{"question": "What is the 'Rust' 'pub' keyword for?", "answer": "'pub' makes items accessible from other modules. Example: ```rust\npub fn add(a: i32, b: i32) -> i32 { a + b }\n```"}
{"question": "How do you use 'as' for enum variant conversion?", "answer": "'as' converts between enum variants. Example: ```rust\nlet e: MyEnum = MyEnum::A as MyEnum;\n```"}
{"question": "What is the 'Rust' 'drop' trait?", "answer": "'drop' is called when a value is no longer in scope. Example: ```rust\nimpl Drop for MyStruct { fn drop(&mut self) { /* cleanup */ }\n```"}
{"question": "How do you create a tuple struct in Rust?", "answer": "Use struct Name (T1, T2). Example: ```rust\nstruct Color(i32, i32, i32);\n```"}
{"question": "What is the 'Rust' 'lifetime' annotation for?", "answer": "It ensures references are valid. Example: ```rust\nfn print<'a>(s: &'a str) { /* uses 'a */ }\n```"}
{"question": "How do you use 'as' for integer conversion?", "answer": "'as' converts between numeric types. Example: ```rust\nlet x: u8 = 255 as u8;\n```"}
{"question": "What is the 'Rust' 'Option::None' value?", "answer": "'None' represents the absence of a value. Example: ```rust\nlet x: Option<i32> = None;\n```"}
{"question": "How do you create a reference to a vector?", "answer": "Use &vec. Example: ```rust\nlet v = vec![1,2,3];\nlet r = &v;\n```"}
{"question": "What is the 'Rust' 'Result::Err' variant?", "answer": "'Err(E)' indicates an error. Example: ```rust\nlet res: Result<i32, &str> = Err(\"error\");\n```"}
{"question": "How do you handle multiple threads with 'JoinHandle'?", "answer": "Call 'join()' to wait for completion. Example: ```rust\nhandle.join().unwrap();\n```"}
{"question": "What is the 'Rust' 'move' closure keyword?", "answer": "'move' captures variables by value. Example: ```rust\nthread::spawn(move || { /* code */ });\n```"}
{"question": "How do you use 'as' for type coercion?", "answer": "'as' coerces types. Example: ```rust\nlet x: f64 = 5 as f64;\n```"}
{"question": "What is the 'Rust' 'self' keyword in traits?", "answer": "'self' is the first parameter in trait methods. Example: ```rust\ntrait MyTrait { fn method(self); }\n```"}
{"question": "How do you create a struct with named fields?", "answer": "Use struct Name { field: Type }. Example: ```rust\nstruct Point { x: i32, y: i32 }\n```"}
{"question": "What is the 'Rust' 'Option::Some' value?", "answer": "'Some(T)' wraps a value. Example: ```rust\nlet x = Some(5);\n```"}
{"question": "How do you use 'as' for pointer conversion?", "answer": "'as' converts pointers. Example: ```rust\nlet ptr: *const i32 = &x as *const i32;\n```"}
{"question": "What is the 'Rust' 'Result::Ok' variant?", "answer": "'Ok(T)' wraps a success value. Example: ```rust\nlet res = Ok(42);\n```"}
{"question": "How do you create a slice of a string?", "answer": "Use &s[start..end]. Example: ```rust\nlet s = \"hello\";\nlet slice = &s[1..3];\n```"}
{"question": "What is the 'Rust' 'pub use' re-export?", "answer": "'pub use' makes items available from another module. Example: ```rust\npub use crate::mod::Type;\n```"}
{"question": "How do you define a function with a closure parameter?", "answer": "Use Fn traits. Example: ```rust\nfn apply<F>(f: F) where F: Fn(i32) -> i32 { /* uses f */ }\n```"}
{"question": "What is the 'Rust' 'as' operator for?", "answer": "'as' converts types explicitly. Example: ```rust\nlet x: u8 = 5 as u8;\n```"}
{"question": "How do you create a thread-safe counter?", "answer": "Use Arc<Mutex<i32>>. Example: ```rust\nuse std::sync::{Arc, Mutex};\nlet count = Arc::new(Mutex::new(0));\n```"}
{"question": "What is the 'Rust' 'self' keyword in functions?", "answer": "'self' is the instance parameter. Example: ```rust\nfn new(self) -> Self { /* uses self */ }\n```"}
{"question": "How do you use 'as' for enum discriminant conversion?", "answer": "'as' converts enum variants to integers. Example: ```rust\nlet e = MyEnum::A as u8;\n```"}
{"question": "What is the 'Rust' 'lifetime' elision rule?", "answer": "Omits explicit lifetimes when they can be inferred. Example: ```rust\nfn longest(s1: &str, s2: &str) -> &str\n```"}
{"question": "How do you create a slice of a vector?", "answer": "Use &vec[start..end]. Example: ```rust\nlet v = vec![1,2,3];\nlet slice = &v[1..2];\n```"}
{"question": "What is the 'Rust' 'pub' visibility modifier?", "answer": "'pub' makes items accessible outside the module. Example: ```rust\npub struct Data { value: i32 }\n```"}
